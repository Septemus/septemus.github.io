[{"categories":["college"],"content":" Note 此笔记针对西南交通大学2025-2026学年上半学期开设的计图实验课 Success 学号单号和双号任务均已完成 Special thanks👍🏿 感谢李同学为本次实验提供的帮助！ 西南交通大学-计算机图形学实验4-2025年 三维图形建模实验 访问博客获得更多信息 View Demo · Report Bug · Request Feature 实验要求 根据实验参考资料 4，完成立方体模型构建。根据以下对应的任务，可在 CGRenderable 基础上派生出对应的图形对象类，实现相关模型构建。在场景中添加图形实例节点进行显示。 立方体模型构建（必选） 对应学号尾数为单号： 球体类（参数是半径、经度与维度方向上的细分数量），默认模型坐标系原点在球体中心，环 Z 轴细分数（相当于经度细分）slice、沿 Z 轴方向细分数（相当于维度方向细分数）stack。场景实例要求完成球体模型的多实例绘制。可设计面板按钮分别调用弹出对话框输入参数，完成球体线框模型、球体表面模型的绘制。 对应学号尾数为双号： 圆柱类（参数包括下底面半径、上顶面半径、高度、环 Z 轴细分数 slice、沿 Z 轴方向细分数 stack。要求当上顶面半径为 0 是能实现圆锥体。场景实例要求完成圆柱及体圆锥体的线框模型、球体表面模型的绘制。可设计面板按钮分别调用弹出对话框输入参数，完成圆柱及体圆锥体的多实例绘制。 (back to top) 实验工具 (back to top) 实验效果 立方体构建 球体构建 圆柱/锥体构建 (back to top) 使用教程 打开Visual Studio: 选择克隆存储库 粘贴github源代码仓库地址：https://github.com/Septemus/swjtu-computergraphics-exp4 设置好路径后点击克隆 点击启动按钮 启动成功 点击工具栏的三维图形类，可以看到按钮 ","date":"2025-06-02","objectID":"/computer_graphics_exp4/:0:0","tags":null,"title":"西南交通大学-计算机图形学实验4-2025年","uri":"/computer_graphics_exp4/"},{"categories":["college"],"content":"球体（学号单号） 点击球体，出现对话框设置球体属性 设置球体属性 点击确定，绘图区出现球体 ","date":"2025-06-02","objectID":"/computer_graphics_exp4/:1:0","tags":null,"title":"西南交通大学-计算机图形学实验4-2025年","uri":"/computer_graphics_exp4/"},{"categories":["college"],"content":"圆柱体（学号双号） 点击圆柱，出现对话框设置圆柱属性 设置圆柱属性 点击确定，绘图区出现圆柱 开发路线 在Windows 11,Visual Studio 2022上创建MFC APP实现 在MacOS,QT6上创建QT APP实现 查看 open issues 获取功能和问题列表 (back to top) 开源贡献 正是贡献让开源社区成为了学习、启发和创造的绝佳场所。我们非常感谢您的任何贡献。 如果您有改进建议，请分叉仓库并创建拉取请求。您也可以简单地打开一个带有标签“增强”的问题。 别忘了给项目点个星！再次感谢！ 分叉项目 创建您的功能分支（git checkout -b feature/AmazingFeature） 提交您的更改（git commit -m 'Add some AmazingFeature'） 推送到分支（git push origin feature/AmazingFeature） 打开拉取请求 ","date":"2025-06-02","objectID":"/computer_graphics_exp4/:2:0","tags":null,"title":"西南交通大学-计算机图形学实验4-2025年","uri":"/computer_graphics_exp4/"},{"categories":["college"],"content":"贡献者: (back to top) License Distributed under the Unlicense License. See LICENSE.txt for more information. (back to top) 联系 博客留言 - 西南交通大学-计算机图形学实验4-2025年 - musketeerdt@gmail.com 项目源代码仓库: https://github.com/Septemus/swjtu-computergraphics-exp4 (back to top) ","date":"2025-06-02","objectID":"/computer_graphics_exp4/:3:0","tags":null,"title":"西南交通大学-计算机图形学实验4-2025年","uri":"/computer_graphics_exp4/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2025-2026学年上半学期开设的计图实验课 Success 已更新任务2内容 西南交通大学-计算机图形学实验3-2025年 二维图形变换与裁剪实验 访问博客获得更多信息 View Demo · Report Bug · Request Feature 实验要求 任务1（第8周）：二维图形程交互绘制（参考资料：计算机图形学实验参考02.pdf） 在实验二程序框架基础上，根据提供的实验参考资料，逐步修改图形程序框架，实现自定义可绘制图形对象，场景管理功能，参考线段类的实现，添加工具面板按钮，完成以下图形类构建及交互绘制加入场景，交互绘制要能支持橡皮线功能并使用实验二中直线段绘制算法进行测试）: 学号单号：折线（鼠标左键单击指定第一点，第二点…右键点击作为最后一点结束），类似GL_LINE_STRIP功能 学号双号：闭合线（鼠标左键单击指定第一点，第二点…右键点击最后一点结束），类似GL_LINE_LOOP功能。 任务2(第9周)、二维图形几何变换（参考资料：计算机图形学实验参考03.pdf）添加工具面板按钮，实现二维图形的鼠标交互拾取，使用键盘及鼠标控制图形对象的几何变换。 基本几何变换包括：平移、旋转、缩放；按自定义默认参数, 通过派生自定义的事件处理类实现； 复合几何变换假定参考基准点为图形对象中心，绕基准点旋转、基于该基准点缩放（设计交互命令类支持鼠标交互获取角度、缩放比例）。运行程序目录下要写一个操作说明文档readme.txt。 (back to top) 实验工具 (back to top) 实验效果 任务（1） 任务（2） (back to top) 使用教程 打开Visual Studio: 选择克隆存储库 粘贴github源代码仓库地址：https://github.com/Septemus/swjtu-computergraphics-exp3 设置好路径后点击克隆 点击启动按钮 启动成功 ","date":"2025-04-26","objectID":"/computer_graphics_exp3/:0:0","tags":null,"title":"西南交通大学-计算机图形学实验3-2025年","uri":"/computer_graphics_exp3/"},{"categories":["college"],"content":"任务（1） 点击工具栏的直线类，可以看到按钮 点击直线段，然后在绘图区用鼠标左键任意点击两个位置，出现一条新线段，按ESC退出 点击折线（学号单号），然后在绘图区用鼠标左键任意点击多个位置，将会依次连接成折线，按鼠标右键点击的位置将成为折线最后一个点的位置，按ESC退出 点击闭合线（学号双号），然后在绘图区用鼠标左键任意点击多个位置，将会依次连接成折线，按鼠标右键点击的位置将成为折线最后一个点的位置，并且和第一个位置相连形成闭合线，按ESC退出 ","date":"2025-04-26","objectID":"/computer_graphics_exp3/:1:0","tags":null,"title":"西南交通大学-计算机图形学实验3-2025年","uri":"/computer_graphics_exp3/"},{"categories":["college"],"content":"任务（2） 点击工具栏的转换类，可以看到按钮 首先在节点树上选择一个节点 点击平移，然后鼠标点击一下绘图区，然后按方向键←,↑,→,↓ 点击缩放，然后鼠标在绘图区按住移动 点击旋转，然后鼠标在绘图区按住移动 开发路线 在Windows 11,Visual Studio 2022上创建MFC APP实现 在MacOS,QT6上创建QT APP实现 查看 open issues 获取功能和问题列表 (back to top) 开源贡献 正是贡献让开源社区成为了学习、启发和创造的绝佳场所。我们非常感谢您的任何贡献。 如果您有改进建议，请分叉仓库并创建拉取请求。您也可以简单地打开一个带有标签“增强”的问题。 别忘了给项目点个星！再次感谢！ 分叉项目 创建您的功能分支（git checkout -b feature/AmazingFeature） 提交您的更改（git commit -m 'Add some AmazingFeature'） 推送到分支（git push origin feature/AmazingFeature） 打开拉取请求 ","date":"2025-04-26","objectID":"/computer_graphics_exp3/:2:0","tags":null,"title":"西南交通大学-计算机图形学实验3-2025年","uri":"/computer_graphics_exp3/"},{"categories":["college"],"content":"贡献者: (back to top) License Distributed under the Unlicense License. See LICENSE.txt for more information. (back to top) 联系 博客留言 - 西南交通大学-计算机图形学实验3-2025年 - musketeerdt@gmail.com 项目源代码仓库: https://github.com/Septemus/swjtu-computergraphics-exp3 (back to top) ","date":"2025-04-26","objectID":"/computer_graphics_exp3/:3:0","tags":null,"title":"西南交通大学-计算机图形学实验3-2025年","uri":"/computer_graphics_exp3/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2025-2026学年上半学期开设的计图实验课 Success 已更新任务2内容 Failure 已知绘图区窗口大小改变时图像会消失，此问题未找到解决方法，如果有读者解决欢迎在评论区提出！ ﻿ 西南交通大学-计算机图形学实验2-2025年 实验环境与实验程序框架搭建 访问博客获得更多信息 View Demo · Report Bug · Request Feature 实验要求 使用实验一的程序项目，根据任务设置程序界面，两周课程依次完成如下任务： 任务（1）（第 6 周） 实现任意斜率直线段生成算法（DDA 算法、中点算法、Bresenham 算法），每种算法完成任意斜率直线段的绘制。选择 12~24 边的一种正多边形两两顶点相连形成线段进行每种算法测试。（必做） 实现中点画圆算法（必做），以同心圆簇（若干同心圆）与不同位置的圆进行测试； Bresenham 画圆算法、圆弧绘制算法，以同心圆簇（若干同心圆）、0-90 度、0-180 度、0-270 度、0-360 度等范围内多个圆弧进行验证（选做）。 任务（2）（第 7 周） 实现扫描线多边形填充算法（有效边表多边形填充算法）并至少以多个凸、凹多边形进行验证（包括有水平边的多边形）；（必做） 实现种子填充算法（四联通的边界表示、内点表示），并使用自己的画圆算法绘制边界边界表示的点阵区域,再作为内点表示的区域进行填充验证。（选做） (back to top) 实验工具 (back to top) 实验效果 任务（1） 任务（2） (back to top) 使用教程 ","date":"2025-04-11","objectID":"/computer_graphics_exp2/:0:0","tags":null,"title":"西南交通大学-计算机图形学实验2-2025年","uri":"/computer_graphics_exp2/"},{"categories":["college"],"content":"任务（1） 打开Visual Studio: 选择克隆存储库 粘贴github源代码仓库地址：https://github.com/Septemus/swjtu-computergraphics-exp2 设置好路径后点击克隆 点击启动按钮 启动成功 把左侧栏拉宽一点 点击正多边形绘制按钮弹出对话框 选择算法、正多边形边数、坐标 点击确定，正多边形成功生成 点击圆绘制按钮弹出对话框 选择圆心坐标，半径，弧度（0-360） 点击确定，圆弧成功生成 ","date":"2025-04-11","objectID":"/computer_graphics_exp2/:1:0","tags":null,"title":"西南交通大学-计算机图形学实验2-2025年","uri":"/computer_graphics_exp2/"},{"categories":["college"],"content":"任务（2） 使用最新的代码，可以看到左上工具栏出现新选项 点击有效边扫描线法填充多边形按钮一次，进入选择顶点状态 在绘图区鼠标点击任意位置，该位置将成为多边形顶点位置 再点击一次有效边扫描线法填充多边形按钮，填充好的多边形出现 开发路线 在Windows 11,Visual Studio 2022上创建MFC APP实现 在MacOS,QT6上创建QT APP实现 查看 open issues 获取功能和问题列表 (back to top) 开源贡献 正是贡献让开源社区成为了学习、启发和创造的绝佳场所。我们非常感谢您的任何贡献。 如果您有改进建议，请分叉仓库并创建拉取请求。您也可以简单地打开一个带有标签“增强”的问题。 别忘了给项目点个星！再次感谢！ 分叉项目 创建您的功能分支（git checkout -b feature/AmazingFeature） 提交您的更改（git commit -m 'Add some AmazingFeature'） 推送到分支（git push origin feature/AmazingFeature） 打开拉取请求 ","date":"2025-04-11","objectID":"/computer_graphics_exp2/:2:0","tags":null,"title":"西南交通大学-计算机图形学实验2-2025年","uri":"/computer_graphics_exp2/"},{"categories":["college"],"content":"贡献者: (back to top) License Distributed under the Unlicense License. See LICENSE.txt for more information. (back to top) 联系 博客留言 - 西南交通大学-计算机图形学实验2-2025年 - musketeerdt@gmail.com 项目源代码仓库: https://github.com/Septemus/swjtu-computergraphics-exp2 (back to top) ","date":"2025-04-11","objectID":"/computer_graphics_exp2/:3:0","tags":null,"title":"西南交通大学-计算机图形学实验2-2025年","uri":"/computer_graphics_exp2/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2025-2026学年上半学期开设的计图实验课 西南交通大学-计算机图形学实验1-2025年\r实验环境与实验程序框架搭建\r访问博客获得更多信息\rView Demo\r·\rReport Bug\r·\rRequest Feature\r实验要求 参考《计算机图形学实验参考 01.pdf》构建单文档框架程序 自拟数据，绘制以下图形: 自拟数据绘制如下图形: (back to top) 实验工具 (back to top) 实验效果 (back to top) 使用教程 打开Visual Studio: 选择克隆存储库 粘贴github源代码仓库地址：https://github.com/Septemus/swjtu-computergraphics-exp 设置好路径后点击克隆 点击启动按钮 启动成功 开发路线 在Windows 11,Visual Studio 2022上创建MFC APP实现 在MacOS,QT6上创建QT APP实现 查看 open issues 获取功能和问题列表 (back to top) 开源贡献 正是贡献让开源社区成为了学习、启发和创造的绝佳场所。我们非常感谢您的任何贡献。 如果您有改进建议，请分叉仓库并创建拉取请求。您也可以简单地打开一个带有标签“增强”的问题。 别忘了给项目点个星！再次感谢！ 分叉项目 创建您的功能分支（git checkout -b feature/AmazingFeature） 提交您的更改（git commit -m 'Add some AmazingFeature'） 推送到分支（git push origin feature/AmazingFeature） 打开拉取请求 ","date":"2025-04-02","objectID":"/computer_graphics_exp1/:0:0","tags":null,"title":"西南交通大学-计算机图形学实验1-2025年","uri":"/computer_graphics_exp1/"},{"categories":["college"],"content":"贡献者: (back to top) License Distributed under the Unlicense License. See LICENSE.txt for more information. (back to top) 联系 博客留言 - 西南交通大学-计算机图形学实验1-2025年 - musketeerdt@gmail.com 项目源代码仓库: https://github.com/Septemus/swjtu-computergraphics-exp (back to top) ","date":"2025-04-02","objectID":"/computer_graphics_exp1/:1:0","tags":null,"title":"西南交通大学-计算机图形学实验1-2025年","uri":"/computer_graphics_exp1/"},{"categories":["develop"],"content":" Fixed 这个bug已经被解决 问题简述 (One-line summary) 用jest进行测试时，当待测试的文件引入了node_modules里的第三方模块，且模块是ESM（使用import/export进入导入导出）时会报错: SyntaxError: Cannot use import statement outside a module 问题复现 (Steps-to-reproduce) 在React项目中编写简单的单元测试用例 //App.test.tsx import React from 'react'; import { render } from '@testing-library/react'; import App from '@/App'; test('renders react', () =\u003e { render(\u003cApp /\u003e); expect(1).toBe(1); }); App.tsx中导入了axios模块 import axios from 'axios'; jest.config.js配置如下,transformIgnorePatterns选项指定要编译axios模块内的内容 module.exports = { preset: 'ts-jest', collectCoverageFrom: ['src/**/*.{js,jsx,ts,tsx}', '!src/**/*.d.ts'], testMatch: [ '\u003crootDir\u003e/src/**/__tests__/**/*.{js,jsx,ts,tsx}', '\u003crootDir\u003e/src/**/*.{spec,test}.{js,jsx,ts,tsx}', ], testEnvironment: 'jsdom', transform: { '^.+\\\\.css$': '\u003crootDir\u003e/config/jest/cssTransform.js', '^.+\\\\.(js|jsx)$': 'babel-jest', '^.+\\\\.(ts|tsx)?$': 'ts-jest', }, transformIgnorePatterns: ['\u003crootDir\u003e/node_modules/(?!(axios))'], moduleNameMapper: { '^@/(.*)': '\u003crootDir\u003e/src/$1', }, watchPlugins: [ 'jest-watch-typeahead/filename', 'jest-watch-typeahead/testname', ], resetMocks: true, globals: { 'ts-jest': { isolatedModules: true, }, }, }; .babelrc配置如下 { \"presets\": [ [\"@babel/preset-env\", { \"targets\": { \"node\": true } }], // \"@babel/preset-typescript\", \"@babel/preset-react\", ], \"plugins\": [\"transform-es2015-modules-commonjs\"], }; 预期效果 (What is expected) 既然已经在jest.config.js中通过transformIgnorePatterns指定了要编译axios模块，那么里面的ESM语法应该会被babel编译为commonJS语法，测试会正常运行 实际效果 (What is actually happening?) axios模块中的index.js文件报错，并且没有被编译 Details: /Users/joe/Documents/Programming/react/data-resource-index/v1/node_modules/axios/index.js:2 import axios from './lib/axios.js'; ^^^^^^ SyntaxError: Cannot use import statement outside a module 1 | debugger; \u003e 2 | import axios from 'axios'; | ^ 3 | import { message } from 'antd'; 4 | const request = axios.create({ 5 | baseURL: process.env.REACT_APP_BASE_API, at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1728:14) 问题原因 (Reason) 在github上查找到issues#7578，如果要通过babel v7编译node_modules中的模块，babel的配置文件应该是babel.config.js 解决办法 (Solution) 将.babelrc重命名为babel.config.js，并将语法变成js语法 //babel.config.js module.exports = { presets: [ ['@babel/preset-env', { targets: { node: true } }], // \"@babel/preset-typescript\", '@babel/preset-react', ], plugins: ['transform-es2015-modules-commonjs'], }; ","date":"2024-03-10","objectID":"/jest_debug1/:0:0","tags":null,"title":"Fixed:jest 测试文件引入node_modules中代码时报错SyntaxError: Cannot use import statement outside a module","uri":"/jest_debug1/"},{"categories":["development"],"content":" 功能说明 该钩子可用于在git commit时自动给message添加前缀 使用说明 ","date":"2024-03-01","objectID":"/git_add_prefix_tutorial/:0:0","tags":null,"title":"git commit时如何自动添加前缀","uri":"/git_add_prefix_tutorial/"},{"categories":["development"],"content":"1 创建commit-msg钩子: 控制台输入: npx husky add commit-msg ","date":"2024-03-01","objectID":"/git_add_prefix_tutorial/:1:0","tags":null,"title":"git commit时如何自动添加前缀","uri":"/git_add_prefix_tutorial/"},{"categories":["development"],"content":"2 在.husky/下创建hooks/commit-msg.js，并写入以下内容 function getFileContent(filePath) { try { var buffer = fs.readFileSync(filePath); var hasToString = buffer \u0026\u0026 typeof buffer.toString === 'function'; return hasToString \u0026\u0026 buffer.toString(); } catch (err) { if (err \u0026\u0026 err.code !== 'ENOENT' \u0026\u0026 err.code !== 'ENAMETOOLONG') { throw err; } } } require('dotenv').config({ path: '.env' }); const path = require('path'); const fs = require('fs'); const dotenv = require('dotenv'); const commitMsgPath = process.argv[2]; const gitMsgPath = path.resolve(__dirname, '../../', commitMsgPath); const prefix = process.env.prefix; const commitMsg = prefix + getFileContent(gitMsgPath); let ret = 0; console.log('this is the commiting message:@@ ', commitMsg); if (commitMsg.match(/^--(story|bug)=[0-9]+/)) { console.log('提交符合规范！@@'); fs.writeFileSync(gitMsgPath, commitMsg); } else { ret = 1; console.log(`提交不符合规范！`); } process.exit(ret); ","date":"2024-03-01","objectID":"/git_add_prefix_tutorial/:2:0","tags":null,"title":"git commit时如何自动添加前缀","uri":"/git_add_prefix_tutorial/"},{"categories":["development"],"content":"3 将以下内容覆盖到.husky/commit-msg #!/bin/sh commitFiles=$(git diff --name-only --cached) sudo node ./.husky/hooks/commit-msg.js $1 $commitFiles ","date":"2024-03-01","objectID":"/git_add_prefix_tutorial/:3:0","tags":null,"title":"git commit时如何自动添加前缀","uri":"/git_add_prefix_tutorial/"},{"categories":["development"],"content":"4 在根目录创建.env文件，并写入以下内容 prefix=\"--story=xxx 你想要添加的前缀\" ","date":"2024-03-01","objectID":"/git_add_prefix_tutorial/:4:0","tags":null,"title":"git commit时如何自动添加前缀","uri":"/git_add_prefix_tutorial/"},{"categories":["development"],"content":"5 挂载钩子 npx husky install ","date":"2024-03-01","objectID":"/git_add_prefix_tutorial/:5:0","tags":null,"title":"git commit时如何自动添加前缀","uri":"/git_add_prefix_tutorial/"},{"categories":["project"],"content":" 基于Vue+NodeJs的小米商城 github仓库：  vue_xiaomi_store ","date":"2023-11-20","objectID":"/vue_xiaomi_store/:0:0","tags":null,"title":"基于vue+nodejs+bootstrap的购物商城（参考小米商城）","uri":"/vue_xiaomi_store/"},{"categories":["project"],"content":"前言 这是我使用Vue和NodeJs进行实战的一个项目，我选择了小米商城进行仿制，我从2023年8月份开始制作，断断续续做了很久现在做的差不多了，分享出来希望带给大家启发！目前项目还有不少bug和待完善功能，欢迎大家批评指正。 本项目参考了小海同学的Store（参考小米商城） 本项目前后端分离，前端基于Vue仿制小米商城 实现，后端代码已上传至仓库vue_xiaomi_store_backend 项目通过腾讯云部署到了 http://123.207.79.116/ （移动端和桌面端都已适配），欢迎大家访问！ 我正在学习前端，会不定期的更新完善该项目，日后可能更换技术栈（比如现在是基于Vue2，日后可能基于Vue3）。如果您发现问题欢迎在Issue或是在我博客评论区留言！ 如果您喜欢这个项目请点击右上角⭐支持一下， 谢谢！ ","date":"2023-11-20","objectID":"/vue_xiaomi_store/:1:0","tags":null,"title":"基于vue+nodejs+bootstrap的购物商城（参考小米商城）","uri":"/vue_xiaomi_store/"},{"categories":["project"],"content":"项目简介 前端基于 Vue2 Vuex Vue-Router Bootstrap Swiper 后端基于 NodeJs Express框架 Mysql 网站静态资源爬取 NodeJs cheerio Selenium 前端页面根据功能主要分为主页，商品详情，购物车，个人中心。 ","date":"2023-11-20","objectID":"/vue_xiaomi_store/:2:0","tags":null,"title":"基于vue+nodejs+bootstrap的购物商城（参考小米商城）","uri":"/vue_xiaomi_store/"},{"categories":["project"],"content":"运行项目 1. Clone project git clone https://github.com/Septemus/vue_xiaomi_store.git 2. Project setup cd vue_xiaomi_store npm i 3. Compiles and hot-reloads for development npm run serve 4. Compiles and minifies for production npm run build ","date":"2023-11-20","objectID":"/vue_xiaomi_store/:3:0","tags":null,"title":"基于vue+nodejs+bootstrap的购物商城（参考小米商城）","uri":"/vue_xiaomi_store/"},{"categories":["project"],"content":"页面截图 ","date":"2023-11-20","objectID":"/vue_xiaomi_store/:4:0","tags":null,"title":"基于vue+nodejs+bootstrap的购物商城（参考小米商城）","uri":"/vue_xiaomi_store/"},{"categories":["develop"],"content":" Fixed 这个bug已经被解决 问题简述 (One-line summary) vue-router编程式导航跳转到一个页面后强制返回主页 问题复现 (Steps-to-reproduce) 一开始用 \u003crouter-link\u003e 方式实现没有问题 后来改成编程式导航的方式，结果每次跳转完成后很短时间内返回主页（根路径） router.push和router.replace一样会遇到问题 去掉路由守卫问题仍存在 预期效果 (What is expected) 编程式导航和标签式导航效果一致，跳转到指定页面后只要不被路由守卫拦截就不再跳转 实际效果 (What is actually happening?) 每次跳转完成后很短时间内返回主页（根路径）, 控制台无报错 问题原因 (Reason) 检查很久代码发现外层的a标签href设置为\"\"导致点击事件冒泡后默认跳转事件执行，所以会跳转回主页 解决办法 (Solution) a标签的href属性修改为javascript:void(0); ","date":"2023-10-28","objectID":"/vue_router_debug1/:0:0","tags":null,"title":"Fixed:Vue-router 跳转到指定页面后强行返回主页解决","uri":"/vue_router_debug1/"},{"categories":["college"],"content":" Note I made this note based on Computer Networking A Top-Down Approach Seventh Edition. Warning The note is made for the sole purpose of reviewing what i learned and understood from the book.Some statements and descryptions might be subjective and incorrect.If you have doubts please leave comments or contact me. Chapter 1 Computer Networks and the Internet End systems are connected together by a network of communication links and packet switches. When one end system has data to send to another end system, the sending end systemsegments the data and adds header bytes to each segment. The resulting packages of information, known as packets. the two most prominent types in today’s Internet are routers and link-layer switches The sequence of communication links and packet switches traversed by a packet from the sending end system to the receiving end system is known as a route or path through the network. ISPs : Internet Service Providers Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. If an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer . Thus, in addition to the store-and-forward delays, packets suffer output buffer queuing delays . arriving packet may find that the buffer is completely full with other packets waiting for transmission. In this case, packet loss will occur—either the arriving packet or one of the already-queued packets will be dropped. a router uses a packet’s destination address to index a forwarding table and determine the appropriate outbound link There are two fundamental approaches to moving data through a network of links and switches: circuit switching and packet switching . In circuit-switched networks, the resources needed along a path (buffers, link transmission rate) to provide for communication between the end systems are reserved for the duration of the communication session between the end systems. A circuit in a link is implemented with either frequency-division multiplexing (FDM) or time-division multiplexing (TDM). The most important of these delays are the nodal processing delay , queuing delay , transmission delay , and propagation delay ; The time required to examine the packet’s header and determine where to direct the packet is part of the processing delay. Transmission Delay:amount of time required to push (that is, transmit) all of the packet’s bits into the link. The time required to propagate from the beginning of the link to router B is the propagation delay. let a denote the average rate at which packets arrive at the queue (a is in units of packets/sec). Recall that R is the transmission rate; that is, it is the rate (in bits/sec) at which bits are pushed out of the queue. Also suppose, for simplicity, that all packets consist of L bits. Then the average rate at which bits arrive at the queue is La bits/sec. The ratio La/R,is called the traffic intensity. If La/R \u003e 1, then the average rate at which bits arrive at the queue exceeds the rate at which the bits can be transmitted from the queue. In this unfortunate situation, the queue will tend to increase without bound and the queuing delay will approach infinity. a packet can arrive to find a full queue.With no place to store such a packet, a router will drop that packet; that is, the packet will be lost. a lost packet may be retransmitted on an end-to-end basis in order to ensure that all data are eventually transferred from source to destination. In VoIP, the sending side must first fill a packet with encoded digitized speech before passing the packet to the Internet. This time to fill a packet—called the packetization delay—can be significant and can impact the user-perceived quality of a VoIP call The instantaneous throughput at any instant of time is the rate (in bits/sec) at which clie","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:0:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.1 HTTP HTTP is said to be a stateless protocol: server sends requested files to clients without storing any state information about the client. Non-Persistent:each request/response pair be sent over a separate TCP connection. Persistent Connections:all of the requests and their corresponding responses be sent over the same TCP connection. HTTP uses persistent connections in its default mode. the steps of transferring a Web page from server to client for the case of non- persistent connections: Let’s suppose the page consists of a base HTML file and 10 JPEG images/computer_networking_topdown, and that all 11 of these objects reside on the same server.Further suppose the URL for the base HTML file is:http://www.someSchool.edu/someDepartment/home.index Here is what happens: The HTTP client process initiates a TCP connection to the server www.someSchool.edu on port number 80, which is the default port number for HTTP. Associated with the TCP connection, there will be a socket at the client and a socket at the server. The HTTP client sends an HTTP request message to the server via its socket. The request message includes the path name /someDepartment/home .index. (We will discuss HTTP messages in some detail below.) The HTTP server process receives the request message via its socket, retrieves the object from path: /someDepartment/home.index from its storage (RAM or disk), encapsulates the object in an HTTP response message, and sends the response message to the client via its socket. The HTTP server process tells TCP to close the TCP connection. (But TCP doesn’t actually terminate the connection until it knows for sure that the client has received the response message intact.) The HTTP client receives the response message. The TCP connection terminates. The message indicates that the encapsulated object is an HTML file. The client extracts the file from the response message, examines the HTML file, and finds references to the 10 JPEG objects. The first four steps are then repeated for each of the referenced JPEG objects. round-trip time (RTT), is the time it takes for a small packet to travel from client to server and then back to the client. The RTT includes packet-propagation delays, packet-queuing delays in intermediate routers and switches, and packet-processing delays.(the packet is small so there is no transmission delay) Non-persistent connections have some shortcomings. a brand-new connection must be established and maintained for each requested object. For each of these connections, TCP buffers must be allocated and TCP variables must be kept in both the client and server. This can place a significant burden on the Web server, which may be serving requests from hundreds of different clients simultaneously. each object suffers a delivery delay of two RTTs—one RTT to establish the TCP connection and one RTT to request and receive an object. The first line of an HTTP request message is called the request line,the subsequent lines are called the header lines. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:1:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.1.1 Request Message The request line has three fields: the method field, the URL field, and the HTTP version field. The method field can take on several different values, including GET, POST,HEAD,PUT,and DELETE The header lines: Host: xxx.xxx.xxx specifies the host on which the object resides. Connection:close/keep-alive header line tells the server to set the connection to whether persistent or non-persistent. The User-agent: header line specifies the user agent, that is, the browser type that is making the request to the server. after the header lines there is an entity body.The entity body is empty with the GET method, but is used with the POST method. HTML form elements often use the GET method and include the inputted data (in the form fields) in the requested URL The HEAD method is similar to the GET method. When a server receives a request with the HEAD method, it responds with an HTTP message but it leaves out the requested object. The PUT method allows a user to upload an object to a specific path (directory) on a specific Web server. The DELETE method allows a user, or an application, to delete an object on a Web server. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:1:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.1.2 Response Message HTTP response message has three sections: Initial status line:The status line has three fields: the protocol version field, a status code, and a corresponding status message. Header lines: Date: indicates the time and date when the HTTP response was created and sent by the server. Note that this is not the time when the object was created or last modified; it is the time when the server retrieves the object from its file system, inserts the object into the response message, and sends the response message. Content-Type: indicates the type of the object in the entity body. Entity line. Info The object type is officially indicated by the Content-Type: header and not by the file extension. Info Some common status codes and associated phrases include: 200 OK: Request succeeded and the information is returned in the response. 301 Moved Permanently: Requested object has been permanently moved; the new URL is specified in Location: header of the response message. The client software will automatically retrieve the new URL. 400 Bad Request: This is a generic error code indicating that the request could not be understood by the server. 404 Not Found: The requested document does not exist on this server. 505 HTTP Version Not Supported: The requested HTTP protocol version is not supported by the server. 304 Not Modified:The web server informs the cache that the requested resource is not modified and go send the cached copy to the client. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:2:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.1.3 Cookies cookie technology has four components: a cookie header line in the HTTP response message; a cookie header line in the HTTP request message; a cookie file kept on the user’s end system and managed by the user’s browser; a back-end database at the Web site. How the cookies work: request comes into the Web server, the server creates a unique identification number and creates an entry in its back-end database that is indexed by the identification number. The Web server then responds to client’s browser, including in the HTTP response a Set-cookie: header, which contains the identification number. When Client’s browser receives the HTTP response message, it sees the Set-cookie: header. The browser then appends a line to the special cookie file that it manages. This line includes the hostname of the server and the identification number in the Set-cookie: header. As client continues to browse the site, each time he requests a Web page, his browser consults his cookie file,extracts his identification number for this site, and puts a Cookie header line that includes the identification number in the HTTP request. In this manner, the server is able to track client’s activity at the site. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:2:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.1.4 Web Cache(Proxy) A Web cache—also called a proxy server—is a network entity that satisfies HTTP requests on the behalf of an origin Web server. A user’s browser can be configured so that all of the user’s HTTP requests are first directed to the Web cache. How does web cache work: The browser establishes a TCP connection to the Web cache and sends an HTTP request for the object to the Web cache. The Web cache checks to see if it has a copy of the object stored locally: If it does, the cache performs an up-to-date check by issuing a conditional GET to the web server telling the server to send the object only if the object has been modified since the specified date: If it does then the object is updated. If it doesn’t the object remains the same The Web cache returns the object within an HTTP response message to the client browser. If the Web cache does not have the object, the Web cache opens a TCP connection to the web server, The Web cache then sends an HTTP request for the object into the cache-to-server TCP connection. After receiving this request, the origin server sends the object within an HTTP response to the Web cache. When the Web cache receives the object, it stores a copy in its local storage and sends a copy, within an HTTP response message, to the client browser (over the existing TCP connection between the client browser and the Web cache). The benefits of a web cache: First, a Web cache can substantially reduce the response time for a client request. Second, Web caches can substantially reduce traffic on an institution’s access link to the Internet HTTP has a mechanism that allows a cache to verify that its objects are up to date. This mechanism is called the conditional GET ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:2:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.2 SMTP A typical message starts its journey in the sender’s user agent, travels to the sender’s mail server, and travels to the recipient’s mail server, where it is deposited in the recipient’s mailbox. How SMTP works: Alice invokes her user agent for e-mail, provides Bob’s e-mail address (for example,bob@someschool.edu), composes a message, and instructs the user agent to send the message. Alice’s user agent sends the message to her mail server, where it is placed in a message queue. The client side of SMTP, running on Alice’s mail server, sees the message in the message queue. It opens a TCP connection to an SMTP server, running on Bob’s mail server. After some initial SMTP handshaking, the SMTP client sends Alice’s message into the TCP connection. At Bob’s mail server, the server side of SMTP receives the message. Bob’s mail server then places the message in Bob’s mailbox. Bob invokes his user agent to read the message at his convenience. Five commands in SMTP: HELO (an abbreviation for HELLO) MAIL FROM RCPT TO DATA QUIT SMTP uses persistent connection. MTP requires each message, including the body of each message, to be in 7-bit ASCII format. A mail access protocol is used to transfer mail from the recipient’s mail server to the recipient’s user agent. There are currently a number of popular mail access protocols, including Post Office Protocol—Version 3 (POP3), Internet Mail Access Protocol (IMAP), and HTTP. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:3:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.3 DNS The DNS protocol runs over UDP and uses port 53. How DNS works(approximately): The browser extracts the hostname, from the URL and passes the hostname to the client side of the DNS application. The DNS client sends a query containing the hostname to a DNS server. The DNS client eventually receives a reply, which includes the IP address for the hostname. Once the browser receives the IP address from DNS, it can initiate a TCP connection to the HTTP server process located at port 80 at that IP address The desired IP address is often cached in a “nearby” DNS server, which helps to reduce DNS network traffic as well as the average DNS delay. DNS provides services such as: Host aliasing Mail server aliasing Load distribution there are three classes of DNS servers: root DNS servers top-level domain (TLD) DNS servers authoritative DNS servers How DNS works(in detail): The client first contacts one of the root servers,which returns IP addresses for TLD servers for the top-level domain com. The client then contacts one of these TLD servers, which returns the IP address of an authoritative server for amazon.com. Finally,the client contacts one of the authoritative servers for amazon.com, which returns the IP address for the hostname www.amazon.com. 2 query methods in DNS:recursive queries and iterative queries Typically,The query from the requesting host to the local DNS server is recursive, and the remaining queries are iterative. The DNS servers that together implement the DNS distributed database store resource records (RRs) A resource record is a four-tuple that contains the following fields: Name Value Type TTL TTL is the time to live of the resource record; it determines when a resource should be removed from a cache. If Type=A, then Name is a hostname and Value is the IP address for the hostname. If Type=NS, then Name is a domain (such as foo.com) and Value is the hostname of an authoritative DNS server that knows how to obtain the IP addresses for hosts in the domain. If Type=CNAME, then Value is a canonical hostname for the alias hostname Name. If Type=MX, then Value is the canonical name of a mail server that has an alias hostname Name. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:4:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.4 Video Streaming A video is a sequence of images, typically being displayed at a constant rate, for example, at 24 or 30 images. the network must provide an average throughput to the streaming application that is at least as large as the bit rate of the compressed video. In HTTP streaming, the video is simply stored at an HTTP server as an ordinary file with a specific URL. How HTTP streaming works: When a user wants to see the video, the client establishes a TCP connection with the server and issues an HTTP GET request for that URL. The server then sends the video file, within an HTTP response message. On the client side, the bytes are collected in a client application buffer. Once the number of bytes in this buffer exceeds a predetermined threshold, the client application begins playback—specifically, the streaming video application periodically grabs video frames from the client application buffer, decompresses the frames, and displays them on the user’s screen. Dynamic Adaptive Streaming over HTTP(DASH):The client dynamically requests chunks of video segments of a few seconds in length. When the amount of available bandwidth is high, the client naturally selects chunks from a high-rate version; and when the available bandwidth is low, it naturally selects from a low-rate version. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:5:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"2.5 Content Distribution Networks A CDN manages servers in multiple geographically distributed locations, stores copies of content in its servers, and attempts to direct each user request to a CDN location that will provide the best user experience. How CDN works: The user’s host sends a DNS query for the host name of the requested resource. The user’s Local DNS Server (LDNS) relays the DNS query to an authoritative DNS server for the hostname, which observes in the hostname that this belongs to CDN. To “hand over” the DNS query to CDN, instead of returning an IP address, the authoritative DNS server returns to the LDNS a hostname in the CDN’s domain. The user’s LDNS then sends a second query, now for the hostname provided in 2, and CDN’s DNS system eventually returns the IP addresses of a CDN content server to the LDNS. The LDNS forwards the IP address of the content-serving CDN node to the user’s host. Once the client receives the IP address for a CDN content server, it establishes a direct TCP connection with the server at that IP address and issues an HTTP GET request for the content. Chapter 3 Transport layer Port number is the identifier of the socket. Extending host-to-host delivery to process-to-process delivery is called transport-layer multiplexing and demultiplexing. This job of delivering the data in a transport-layer segment to the correct socket is called demultiplexing. The job of gathering data chunks at the source host from different sockets,encapsulating each data chunk with header information to create segments, and passing the segments to the network layer is called multiplexing. UDP socket is fully identified by a two-tuple consisting of a destination IP address and a destination port number. TCP socket is identified by a four-tuple: (source IP address, source port number,destination IP address,destination port number). ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:6:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.1 UDP Note that with UDP there is no handshaking between sending and receiving transport-layer entities before sending a segment. UDP’s advantages over TCP: Finer application-level control over what data is sent, and when. No connection establishment. No connection state. Small packet header overhead. UDP Segment Structure port numbers allow the destination host to pass the application data to the correct process running on the destination end system (that is, to perform the demultiplexing function). The length field specifies the number of bytes in the UDP segment (header plus data). The checksum is used by the receiving host to check whether errors have been introduced into the segment. How checksum works At the sender side,assign the 1s complement(The 1s complement is obtained by converting all the 0s to 1s and converting all the 1s to 0s) of the sum of all the 16-bit words in the segment to the checksum field. At the receiver, all four 16-bit words are added, including the checksum. If no errors are introduced into the packet, then clearly the sum at the receiver will be 1111111111111111. If one of the bits is a 0, then we know that errors have been introduced into the pack. Although UDP provides error checking, it does not do anything to recover from an error. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:7:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.2 Reliable Data Transfer With a reliable data transfer, no transferred data bits are corrupted (flipped from 0 to 1, or vice versa) or lost, and all are delivered in the order in which they were sent. RDT 1.0 FSM RDT 2.0 Control messages allow the receiver to let the sender know what has been received correctly by sending ACK, and what has been received in error by NAK and thus requires repeating. In a computer network setting, reliable data transfer protocols based on such retransmission are known as ARQ (Automatic Repeat reQuest) protocols. FSM Flaw:the ACK or NAK packet could be corrupted! RDT 2.1 Fix Measure: The sender simply to resend the current data packet when it receives a garbled ACK or NAK packet. And add a new field to the data packet and have the sender number its data packets by putting a sequence number into this field to check whether or not the received packet is a retransmission. FSM RDT 2.2 We can accomplish the same effect as a NAK if, instead of sending a NAK, we send an ACK for the last correctly received packet. FSM RDT 3.0 Suppose now that in addition to corrupting bits, the underlying channel can lose packets as well.Two additional concerns must now be addressed by the protocol: how to detect packet loss and what to do when packet loss occurs. Implementing a time-based retransmission mechanism requires a countdown timer that can interrupt the sender after a given amount of time has expired. FSM ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:8:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.2.1 Pipelined Reliable Data Transfer Pipelined Reliable Data Transfer:Rather than operate in a stop-and-wait manner, the sender is allowed to send multiple packets without waiting for acknowledgments. Pipelining has the following consequences: The range of sequence numbers must be increased. The sender and receiver sides of the protocols may have to buffer more than one packet. The range of sequence numbers needed and the buffering requirements will depend on the manner in which a data transfer protocol responds to lost, corrupted, and overly delayed packets. 3.2.1.1 GBN Go-Back-N (GBN): the sender is allowed to transmit multiple packets (when available) without waiting for an acknowledgment, but is constrained to have no more than some maximum allowable number, N, of unacknowledged packets in the pipeline. Sequence numbers in the interval [0, base-1] correspond to packets that have already been transmitted and acknowledged. The interval [base, nextseqnum-1] corresponds to packets that have been sent but not yet acknowledged. Sequence numbers in the interval [nextseqnum , base+N-1] can be used for packets that can be sent immediately, should data arrive from the upper layer. Finally, sequence numbers greater than or equal to base+N cannot be used until the packet with sequence number base has been acknowledged. the range of permissible sequence numbers for transmitted but not yet acknowledged packets can be viewed as a window of size N over the range of sequence numbers. 3.2.1.2 Selective Repeat As the name suggests, selective-repeat protocols avoid unnecessary retransmissions by having the sender retransmit only those packets that it suspects were received in error (that is, were lost or corrupted) at the receiver. The SR receiver will acknowledge a correctly received packet whether or not it is in order. Out-of-order packets are buffered until all packets with lower sequence numbers are received, at which point a batch of packets can be delivered in order to the upper layer. How Selective Repeat Works Sender Data received from above.When data is received from above, the SR sender checks the next available sequence number for the packet. If the sequence number is within the sender’s window, the data is packetized and sent; other-wise it is either buffered or returned to the upper layer for later transmission,as in GBN. Timeout.Timers are again used to protect against lost packets. However, each packet must now have its own logical timer, since only a single packet will be transmitted on timeout. ACK received.If an ACK is received, the SR sender marks that packet as having been received, provided it is in the window. If the packet’s sequencenumber is equal to send_base, the window base is moved forward to the unacknowledged packet with the smallest sequence number. If the window moves and there are untransmitted packets with sequence numbers that now fall within the window, these packets are transmitted. Receiver Packet with sequence number in [rcv_base, rcvbase+N-1 ] is correctly received.In this case, the received packet falls within the receiver’s window and a selective ACK packet is returned to the sender. If there are previous packets not received, the packet in the middle is buffered. If this packet has a sequence number equal to the base of the receive window , then this packet,and any previously buffered and consecutively numbered packets are delivered to the upper layer. The receive window is then moved forward by the number of packets delivered to the upper layer. Packet with sequence number in [rcv_base-N, rcv_base-1] is correctly received.In this case, an ACK must be generated, even though this is apacket that the receiver has previously acknowledged Otherwise. Ignore the packet. window size must be less than or equal to half the size of the sequence number space for SR protocols. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:8:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.3 TCP TCP is said to be connection-oriented because before one application process can begin to send data to another, the two processes must first “handshake” with each other—that is, they must send some preliminary segments to each other to establish the parameters of the ensuing data transfer. The TCP “connection” is not an end-to-end TDM or FDM circuit as in a circuit-switched network. Instead,the “connection” is a logical one, with common state residing only in the TCPs in the two communicating end systems. A TCP connection provides a full-duplex service: If there is a TCP connection between Process A on one host and Process B on another host, then application-layer data can flow from Process A to Process B at the same time as application-layer data flows from Process B to Process A. A TCP connection is also always point-to-point, that is, between a single sender and a single receiver. So-called “multicasting”—the transfer of data from one sender to many receivers in a single send operation—is not possible with TCP. The maximum amount of data that can be grabbed and placed in a segment is limited by the maximum segment size (MSS). The MSS is typically set by first determining the length of the largest link-layer frame that can be sent by the local sending host (the so-called maximum transmission unit, MTU), and then setting the MSS to ensure that a TCP segment(when encapsulated in an IP datagram) plus the TCP/IP header length (typically 40 bytes) will fit into a single link-layer frame. Note that the MSS is the maximum amount of application-layer data in the segment, not the maximum size of the TCP segment including headers. a TCP connection consists of buffers, variables, and a socket connection to a process in two hosts of a connection pair. The TCP segment consists of header fields and a data field. When TCP sends a large file, such as an image as part of a Web page, it typically breaks the file into chunks of size MSS (except for the last chunk, which will often be less than the MSS). The Structure Of The TCP Segment the header includes source and destination port numbers. the header includes a checksum field The 32-bit sequence number field and the 32-bit acknowledgment number field are used by the TCP sender and receiver in implementing a reliable data transfer service. The 16-bit receive window field is used for flow control. The 4-bit header length field specifies the length of the TCP header in 32-bit words. The optional and variable-length options field is used when a sender and receiver negotiate the maximum segment size (MSS) or as a window scaling factor for use in high-speed networks. A time-stamping option is also defined. The flag field contains 6 bits: The ACK bit is used to indicate that the value carried in the acknowledgment field is valid. The RST,SYN, and FIN bits are used for connection setup and teardown. The CWR and ECE bits are used in explicit congestion notification. Setting the PSH bit indicates that the receiver should pass the data to the upper layer immediately. the URG bit is used to indicate that there is data in this segment that the sending-side upper-layer entity has marked as “urgent.”The location of the last byte of this urgent data is indicated by the 16-bit urgent data pointer field The sequence number for a segment is the byte-stream number of the first byte in the segment. The acknowledgment number that a host puts in its segment is the sequence number of the next byte the host is expecting from its peer host. TCP only acknowledges bytes up to the first missing byte in the stream, TCP is said to provide cumulative acknowledgments. when a host receives out-of-order segments in a TCP connection,it keeps the out-of-order bytes and waits for the missing bytes to fill in the gaps. In practice, both sides of a TCP connection randomly choose an initial sequence number.This is done to minimize the possibility that a segment that is still present in the network from an earlier, already-t","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:9:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.3.1 TCP Reliable Data Transfer Highly Simplified Description // Assume sender is not constrained by TCP flow or congestion control,that data from above is less than MSS in size, and that data transfer is in one direction only. NextseqNum=InitialseqNumber sendBase=InitialseqNumber loop (forever) { switch(event) event: data received from application above create TCP segment with sequence number NextSegNum if ( timer currently not running) start timer pass segment to IP NextseqNum=NextseqNum+length (data) break; event: timer timeout retransmit not-yet-acknowledged segment with smallest sequence number start timer timer*=2 break; event: ACK received, with ACK field value of y if (y \u003e SendBase) { SendBase=y if (there are currently any not yet acknowledged segments) start timer } else {/* a duplicate ACK for already ACKed segment */ increment number of duplicate ACKs received for y if (number of duplicate ACKS received for y==3) /* TCP fast retransmit */ resend segment with sequence number y } break; TCP ACK Generation Recommendation Event TCP Receiver Action Arrival of in-order segment with expected sequence number. All data up to expected sequence number already acknowledged. Delayed ACK. Wait up to 500 msec for arrival of another in-order segment. If next in-order segment does not arrive in this interval, send an ACK. Arrival of in-order segment with expected sequence number. One other in-order segment waiting for ACK transmission. One Immediately send single cumulative ACK,ACKing both in-order segments. Arrival of out-of-order segment with higher- than-expected sequence number. Gap detected. Immediately send duplicate ACK, indicating sequence number of next expected byte (which is the lower end of the gap). Arrival of segment that partially or completely fills in gap in received data. Immediately send ACK as long as the segment starts at the lower end of gap. Fast Retransmit:If the TCP sender receives three duplicate ACKs for the same data, it takes this as an indication that the segment following the segment that has been ACKed three times has been lost.the TCP sender performs a fast retransmit , retransmitting the missing segment before that segment’s timer expires. TCP’s error-recovery mechanism is probably best categorized as a hybrid of GBN and SR protocols. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:9:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.3.2 TCP Flow Control If the application is relatively slow at reading the data, the sender can very easily overflow the connection’s receive buffer by sending too much data too quickly. TCP provides a flow-control service to its applications to eliminate the possibility of the sender overflowing the receiver’s buffer. How TCP Flow Control Works: Suppose that Host A is sending a large file to Host B over a TCP connection. Host B allocates a receive buffer to this connection; denote its size by $RcvBuffer$. From time to time, the application process in Host B reads from the buffer. Define the following variables: $LastByteRead$: the number of the last byte in the data stream read from the buffer by the application process in B $LastByteRcvd$: the number of the last byte in the data stream that has arrived from the network and has been placed in the receive buffer at B Because TCP is not permitted to overflow the allocated buffer, we must have: $$ LastByteRcvd−LastByteRead≤RcvBuffer $$ The receive window, denoted $rwnd$ is set to the amount of spare room in the buffer: $$ rwnd=RcvBuffer−[LastByteRcvd−LastByteRead] $$ Host B tells Host A how much spare room it has in the connection buffer by placing its current value of $rwnd$ in the receive window field of every segment it sends to A. Host A in turn keeps track of two variables, $LastByteSent$ and $LastByteAcked$,$LastByteSent - LastByteAcked$, is the amount of unacknowledged data that A has sent into the connection Host A makes sure throughout the connection’s life that: $$LastByteSent−LastByteAcked≤rwnd$$ The TCP specification requires Host A to continue to send segments with one data byte when B’s receive window is zero. These segments will be acknowledged by the receiver. Eventually the buffer will begin to empty and the acknowledgments will contain a nonzero $rwnd$ value. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:9:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.3.3 TCP Three-Way Handshake How The Three-way Handshaking Works: The client-side TCP first sends a special TCP segment to the server-side TCP. This special segment contains no application-layer data. But one of the flag bits in the segment’s header , the SYN bit, is set to 1. For this reason, this special segment is referred to as a SYN segment. In addition, the client randomly chooses an initial sequence number ($client_isn$) and puts this number in the sequence number field of the initial TCP SYN segment. This segment is encapsulated within an IP datagram and sent to the server. Once the IP datagram containing the TCP SYN segment arrives at the server host (assuming it does arrive!), the server extracts the TCP SYN segment from the datagram, allocates the TCP buffers and variables to the connection, and sends a connection-granted segment to the client TCP.The connection-granted segment is referred to as a SYNACK segment.This connection-granted segment also contains no application-layer data. However, it does contain three important pieces of information in the segment header: the SYN bit is set to 1. the acknowledgment field of the TCP segment header is set to $client_isn+1$ the server chooses its own initial sequence number (server_isn) and puts this value in the sequence number field of the TCP segment header Upon receiving the SYNACK segment, the client also allocates buffers and variables to the connection. The client host then sends the server yet another segment; this last segment acknowledges the server’s connection-granted segment (the client does so by putting the value server_isn+1 in the acknowledgment field of the TCP segment header). The SYN bit is set to zero, since the connection is established. This third stage of the three-way handshake may carry client-to-server data in the segment payload. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:9:3","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.3.4 TCP Closing The client application process issues a close command. This causes the client TCP to send a special TCP segment to the server process. This special segment has a flag bit in the segment’s header, the FIN bit , set to 1. When the server receives this segment, it sends the client an acknowledgment segment in return. The server then sends its own shutdown segment, which has the FIN bit set to 1. Finally, the client acknowledges the server’s shutdown segment. At this point, all the resources in the two hosts are now deallocated. TCP States RST Segment:suppose a host receives a TCP SYN packet with destination port which it is not accepting connections on . Then the host will send a special reset segment to the source. This TCP segment has the RST flag bit set to 1. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:9:4","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"3.3.5 TCP Congestion Control Costs of Congestion: large queuing delays are experienced as the packet-arrival rate nears the link capacity. the sender must perform retransmissions in order to compensate for dropped (lost) packets due to buffer overflow. a router to use its link bandwidth to forward unneeded copies of a packet. when a packet is dropped along a path, the transmission capacity that was used at each of the upstream links to forward that packet to the point at which it is dropped ends up having been wasted. Approaches to Congestion Control: End-to-end congestion control Network-assisted congestion control The TCP congestion-control mechanism operating at the sender keeps track of an additional variable, the congestion window,denoted $cwnd$. At the beginning of every RTT, the constraint permits the sender to send $cwnd$ bytes of data into the connection; at the end of the RTT the sender receives acknowledgments for the data. Thus the sender’s send rate is roughly $cwnd/RTT \\ bytes/sec$. How TCP Sender Determines Sending Rate A lost segment implies congestion, and hence, the TCP sender’s rate should be decreased when a segment is lost. An acknowledged segment indicates that the network is delivering the sender’s segments to the receiver, and hence, the sender’s rate can be increased when an ACK arrives for a previously unacknowledged segment. TCP congestion-control algorithm consists of 3 components: Slow Start Congestion avoidance fast recovery Slow Start The value of cwnd begins at 1 MSS and increases by 1 MSS every time a transmitted segment is first acknowledged.This process results in a doubling of the sending rate every RTT. If there is a loss event (i.e., congestion) indicated by a timeout, the TCP sender sets the value of cwnd to 1 and begins the slow start process anew. It also sets the value of ssthresh (shorthand for “slow start threshold”) to cwnd/2—half of the value of the congestion window value when congestion was detected. Thus, when the value of cwnd equals ssthresh, slow start ends and TCP transitions into congestion avoidance mode. if three duplicate ACKs are detected, in which case TCP performs a fast retransmit and enters the fast recovery state Congestion Avoidance TCP adopts a more conservative approach and increases the value of cwnd by just a single MSS every RTT. When a timeout occurs. The value of cwnd is set to 1 MSS, and the value of ssthresh is updated to half the value of cwnd when the loss event occurred.TCP transitions to Slow Start mode. Triple duplicate ACK:TCP halves the value of cwnd and records the value of ssthresh to be half the value of cwnd (adding in 3 MSS for good measure to account for the triple duplicate ACKs received). The fast-recovery state is then entered. Fast Recovery The value of cwnd is increased by 1 MSS for every duplicate ACK received for the missing segment that caused TCP to enter the fast-recovery state. when an ACK arrives for the missing segment, TCP enters the congestion-avoidance state after deflating $cwnd$. If a timeout event occurs, fast recovery transitions to the slow-start state after performing the same actions as in slow start and congestion avoidance. How TCP Congestion Control Provides Fairness Explicit Congestion Notification (ECN): Network-assisted Congestion Control:At the network layer, two bits (with four possible values, overall) in the Type of Service field of the IP datagram header are used for ECN: One setting of the ECN bits-ECE (Explicit Congestion Notification Echo) bit is used by a router to indicate that it (the router) is experiencing congestion. This congestion indication is then carried in the marked IP datagram to the destination host, which then informs the sending host. A second setting of the ECN bits is used by the sending host to inform routers that the sender and receiver are ECN-capable Chapter 4 Network Layer Forwarding refers to the router-local action of transferring a packet from an input link interface to the appro","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:9:5","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"4.1 Router Architecture Input ports. An input port performs several key functions: It performs the physical layer function of terminating an incoming physical link at a router; this is shown in the leftmost box of an input port and the rightmost box of an output port . An input port also performs link-layer functions needed to interoperate with the link layer at the other side of the incoming link; this is represented by the middle boxes in the input and output ports. Perhaps most crucially, a lookup function is also performed at the input port; this will occur in the rightmost box of the input port. It is here that the forwarding table is consulted. Switching fabric: The switching fabric connects the router’s input ports to its output ports. Output ports: An output port stores packets received from the switching fabric and transmits these packets on the outgoing link by performing the necessary link-layer and physical-layer functions.When a link is bidirectional (that is, carries traffic in both directions), an output port will typically be paired with the input port for that link on the same line card. Routing processor. The routing processor performs control-plane functions. In traditional routers, it executes the routing protocols, maintains routing tables and attached link state information, and computes the forwarding table for the router. In SDN routers, the routing processor is responsible for communicating with the remote controller in order to (among other activities) receive forwarding table entries computed by the remote controller, and install these entries in the router’s input ports. The routing processor also performs the network management functions. A router’s input ports, output ports, and switching fabric are almost always implemented in hardware While the data plane operates at the nanosecond time scale, a router’s control functions。operate at the millisecond or second timescale. the router uses the longest prefix matching rule; that is, it finds the longest matching entry in the table and forwards the packet to the link interface associated with the longest prefix match. Switching Methods: Switching via memory:The simplest, earliest routers were traditional computers, with switching between input and output ports being done under direct control of the CPU (routing processor). Switching via a bus:The input port pre-pend a switch-internal label (header) to the packet indicating the local output port to which this packet is being transferred and transmitting the packet onto the bus. All output ports receive the packet, but only the port that matches the label will keep the packet. One way to overcome the bandwidth limitation of a single, shared bus is to use a more sophisticated interconnection network.A crossbar switch is an interconnection network consisting of 2N buses that connect N input ports to N output ports. Each vertical bus intersects each horizontal bus at a crosspoint, which can be opened or closed at any time by the switch fabric controller (whose logic is part of the switching fabric itself). Packet Scheduling First-in-First-Out (FIFO) Priority Queuing: packets arriving at the output link are classified into priority classes upon arrival at the queue.When choosing a packet to transmit, the priority queuing discipline will transmit a packet from the highest priority class that has a nonempty queue (that is, has packets waiting for transmission). The choice among packets in the same priority class is typically done in a FIFO manner.Under a non-preemptive priority queuing discipline, the transmission of a packet is not interrupted once it has begun. Round Robin:Under the round robin queuing discipline, packets are sorted into classes as with priority queuing. However, rather than there being a strict service priority among classes, a round robin scheduler alternates service among the classes. A generalized form of round robin queuing that has been widely implemented in routers is the so-called we","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:10:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"4.2 The Internet Protocol (IP) ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:11:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"4.2.1 IPv4 4.2.1.1 IPv4 Datagram Structure Version number Header length:these 4 bits are needed to determine where in the IP datagram the payload actually begins Type of service: The type of service (TOS) bits were included in the IPv4 header to allow different types of IP datagrams to be distinguished from each other Datagram length. This is the total length of the IP datagram (header plus data), measured in bytes. Identifier, flags, fragmentation offset Time-to-live:This field is decremented by one each time the datagram is processed by a router. If the TTL field reaches 0, a router must drop that datagram. Protocol:The value of this field indicates the specific transport-layer protocol to which the data portion of this IP datagram should be passed. Header Checksum:The header checksum is computed by treating each 2 bytes in the header as a number and summing these numbers using 1s complement arithmetic. Source and destination IP addresses Options Data (payload):In most circumstances, the data field of the IP datagram contains the transport-layer segment (TCP or UDP) to be delivered to the destination. However, the data field can carry other types of data, such as ICMP messages why does TCP/IP perform error checking at both the transport and network layers? Only the IP header is checksummed at the IP layer, while the TCP/UDP checksum is computed over the entire TCP/UDP segment. TCP/UDP and IP do not necessarily both have to belong to the same protocol stack. TCP can, in principle, run over a different network-layer protocol and IP can carry data that will not be passed to TCP/UDP. 4.2.1.2 Fragment The maximum amount of data that a link-layer frame can carry is called the maximum transmission unit (MTU) each of the links along the route between sender and destination can use different link-layer protocols, and each of these protocols can have different MTUs When Does Fragment Occur:When outgoing link has an MTU that is smaller than the length of the IP datagram,the payload in the IP datagram is fragmented into two or more smaller IP datagrams,and encapsulated in a separate link-layer frame Fragments Reassembly:When a destination host receives a series of datagrams from the same source,it needs to determine whether any of these datagrams are fragments of some original, larger datagram.If some datagrams are fragments, it must further determine when it has received the last fragment and how the fragments it has received should be pieced back together to form the original datagram: When a datagram is created, the sending host stamps the datagram with an identification number as well as source and destination addresses. When a router needs to fragment a datagram, each resulting datagram (that is, fragment) is stamped with the source address, destination address, and identification number of the original datagram. When the destination receives a series of datagrams from the same sending host, it can examine the identification numbers of the datagrams to determine which of the datagrams are actually fragments of the same larger datagram. In order for the destination host to be absolutely sure it has received the last fragment of he original datagram, the last fragment has a flag bit set to 0, whereas all the other fragments have this flag bit set to 1. In order for the destination host to determine whether a fragment is missing (and also to be able to reassemble the fragments in their proper order), the offset field is used to specify where the fragment fits within the original IP datagram. 4.2.1.3 Addressing The boundary between the host or router and the physical link is called an interface An IP address is technically associated with an interface, rather than with the host or router containing that interface In IP terms, the network interconnecting host interfaces and router interface forms a subnet. subnet mask:/n indicates that the leftmost n bits of the 32-bit quantity define the subnet address. Classless Interdomain Routing (C","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:11:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"4.2.2 IPv6 IPv6 Important Changes: Expanded addressing capabilities A streamlined 40-byte header Flow labeling IPv6 datagram format Version Traffic class: The 8-bit traffic class field, like the TOS field in IPv4, can be used to give priority to certain datagrams within a flow, or it can be used to give priority to datagrams from certain applications (for example, voice-over-IP) over datagrams from other applications (for example, SMTP e-mail). Flow label Payload length Next header. This field identifies the protocol to which the contents (data field) of this datagram will be delivered (for example, to TCP or UDP). The field uses the same values as the protocol field in the IPv4 header. Hop limit: The contents of this field are decremented by one by each router that forwards the datagram. If the hop limit count reaches zero, the datagram is ­discarded. Source and destination addresses Data Fields appearing in the IPv4 datagram are no longer present in the IPv6 datagram: Fragmentation/reassembly:If an IPv6 datagram received by a router is too large to be forwarded over the outgoing link, the router simply drops the datagram and sends a “Packet Too Big” ICMP error message back to the sender. The sender can then resend the data, using a smaller IP datagram size. Header checksum: Because the transport-layer (for example, TCP and UDP) and link-layer (for example, Ethernet) protocols in the Internet layers perform checksumming, the designers of IP probably felt that this functionality was sufficiently redundant in the network layer that it could be removed. Options:Instead, the options field is one of the possible next headers pointed to from within the IPv6 header. That is, just as TCP or UDP protocol headers can be the next header within an IP packet, so too can an options field. The removal of the options field results in a fixed-length, 40-byte IP header The approach to IPv4-to-IPv6 transition that has been most widely adopted in practice involves tunneling:With tunneling, the IPv6 node on the sending side of the tunnel (in this example, B) takes the entire IPv6 datagram and puts it in the data (payload) field of an IPv4 datagram. This IPv4 datagram is then addressed to the IPv6 node on the receiving side of the tunnel. Each entry in the match-plus-action forwarding table, known as a flow table in OpenFlow, includes: A set of header field values to which an incoming packet will be matched.If a packet matches multiple flow table entries, the selected match and corresponding action will be that of the highest priority entry with which the packet matches. A set of counters that are updated as packets are matched to flow table entries. These counters might include the number of packets that have been matched by that table entry, and the time since the table entry was last updated. A set of actions to be taken when a packet matches a flow table entry. These actions might be to forward the packet to a given output port, to drop the packet, makes copies of the packet and sent them to multiple output ports, and/or to rewrite selected header fields. Chapter 5 The Network Layer: Control Plane A centralized routing algorithm computes the least-cost path between a source and destination using complete, global knowledge about the network.Algorithms with global state information are often referred to as link-state (LS) algorithms, since the algorithm must be aware of the cost of each link in the network. In a link-state algorithm, the network topology and all link costs are known.In practice this is accomplished by having each node broadcast link-state packets to all other nodes in the network, with each link-state packet containing the identities and costs of its attached links. The result of the nodes’ broadcast is that all nodes have an identical and complete view of the network. Each node can then run the LS algorithm and compute the same set of least-cost paths as every other node Popular LS-Algorithm:Dijkstra’s algorithm,Prim’s algorith","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:11:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.1 Distance-Vector Algorithm How does DV algorithm work: each node x maintains the following routing information: For each neighbor v, the cost $c(x, v)$ from x to directly attached neighbor, v. Node x’s distance vector, that is,$D_x=[D_x(y):y \\ in \\ N]$ , containing x’s estimate of its cost to all destinations, y, in N The distance vectors of each of its neighbors, that is $D_v=[D_v(y):y \\ in \\ N]$, for each neighbor v of x Each node sends a copy of its distance vector to each of its neighbors. When a node x receives a new distance vector from any of its neighbors w, it saves w’s distance vector, and then uses the Bellman-Ford equation to update its own distance vector as follows: $$D_x(y)=minv \\left{ c(x,v)+D_v(y) \\right} \\qquad for \\ each \\ node \\ y \\ in \\ N$$ If node x’s distance vector has changed as a result of this update step, node x will then send its updated,distance vector to each of its neighbors, which can in turn update their own distance vectors. When a node running the DV algorithm detects a change in the link cost from itself to a neighbor , it updates its distance vector and, if there’s a change in the cost of the least-cost path, informs its neighbors of its new distance vector. Initialization: for all destinations y in N: Dx (y)= c(x, y)/* if y is not a neighbor then c(x, y)= ∞ */ for each neighbor w Dw (y) = ? for all destinations y in N for each neighbor w send distance vector Dx = [Dx (y): y in N] to w loop wait (until I see a link cost change to some neighbor w or until I receive a distance vector from some neighbor w) for each y in N: Dx (y) = min {c(x, v) + Dw (y)} update v*y /* the next hop router along the shortest path to y */ if Dx(y) changed for any destination y send distance vector Dx = [Dx (y): y in N] to all neighbors forever ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:12:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.2 Link-State Algorithm autonomous ­systems (ASs):Routers within the same AS all run the same routing algorithm and have information about each other. The routing algorithm ­running within an autonomous system is called an intra-autonomous system routing ­protocol. An autonomous system is identified by its globally unique autonomous system number (ASN) OSPF is a link-state protocol that uses flooding of link-state information and a Dijkstra’s least-cost path algorithm. With OSPF, each router constructs a complete topological map (that is, a graph) of the entire autonomous system. Each router then locally runs Dijkstra’s shortest-path algorithm to determine a shortest-path tree to all subnets, with itself as the root node. Individual link costs are configured by the network administrator. With OSPF, a router broadcasts routing information to all other routers in the autonomous system, not just to its neighboring routers. A router broadcasts link-state information whenever there is a change in a link’s state (for example, a change in cost or a change in up/down status). It also broadcasts a link’s state periodically (at least once every 30 minutes), even if the link’s state has not changed. OSPF advertisements are contained in OSPF messages that are carried directly by IP, with an upper-layer protocol of 89 for OSPF. Thus, the OSPF protocol must itself implement functionality such as reliable message transfer and link-state broadcast. Some of the advances embodied in OSPF include the following: Security: Exchanges between OSPF routers (for example, link-state updates) can be authenticated. With authentication, only trusted routers can participate in the OSPF protocol within an AS. Multiple same-cost paths:When multiple paths to a destination have the same cost, OSPF allows multiple paths to be used Support for hierarchy within a single AS ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:13:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.3 Border Gateway Protocol In the Internet, all ASs run the same inter-AS routing protocol, called the Border Gateway Protocol, more commonly known as BGP In BGP, packets are not routed to a specific destination address, but instead to CIDRized prefixes, with each prefix representing a subnet or a collection of subnets. Thus, a router’s forwarding table will have entries of the form (x, I), where x is a prefix and I is an interface number for one of the router’s interfaces. As an inter-AS routing protocol, BGP provides each router a means to: Obtain prefix reachability information from neighboring ASs. In particular, BGP allows each subnet to advertise its existence to the rest of the Internet. Determine the “best” routes to the prefixes. For each AS, each router is either a gateway router or an internal router. A gateway router is a router on the edge of an AS that directly connects to one or more routers in other ASs. An internal router connects only to hosts and routers within its own AS. In BGP,pairs of routers exchange routing information over semi-permanent TCP connections using port 179.Each such TCP connection, along with all the BGP messages sent over the connection, is called a BGP connection Furthermore, a BGP connection that spans two ASs is called an external BGP (eBGP) connection, and a BGP session between routers in the same AS is called an internal BGP (iBGP) connection. In BGP jargon, a prefix along with its attributes is called a route. Two of the more important attributes are AS-PATH and NEXT-HOP. The AS-PATH attribute contains the list of ASs through which the advertisement has passed.To generate the AS-PATH value, when a prefix is passed to an AS, the AS adds its ASN to the existing list in the AS-PATH.BGP routers also use the AS-PATH attribute to detect and prevent looping advertisements; specifically, if a router sees that its own AS is contained in the path list, it will reject the advertisement. The NEXT-HOP is the IP address of the router interface that begins the AS-PATH. Hot Potato Algorithm BGP uses an algorithm that is more complicated than hot potato routing, but nevertheless incorporates hot potato routing: A route is assigned a local preference value as one of its attributes . The local preference of a route could have been set by the router or could have been learned from another router in the same AS. The value of the local preference attribute is a policy decision that is left entirely up to the AS’s network administrator. The routes with the highest local preference values are selected. From the remaining routes (all with the same highest local preference value), the route with the shortest AS-PATH is selected. From the remaining routes (all with the same highest local preference value and the same AS-PATH length), hot potato routing is used, that is, the route with the closest NEXT-HOP router is selected. If more than one route still remains, the router uses BGP identifiers to select the route; How Does IP-Anycast Work: the server-provider assigns the same IP address to each of its servers, and uses standard BGP to advertise this IP address from each of the servers. When configuring its routing table, each router will locally use the BGP route-selection algorithm to pick the “best” (for example, closest, as determined by AS-hop counts) route to that IP address. When a client requests the content on the server, it sends request to the common IP address used by the geographically dispersed servers, no matter where the client is located. Internet routers then forward the request packet to the “closest” server, as defined by the BGP route-selection algorithm. IP-anycast is extensively used by the DNS system to direct DNS queries to the closest root DNS server How To Prevent multi-homed access ISP from acting as an intermidiate AS:It advertises that it has no paths to any other destinations except itself ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:14:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.4 Software Defined Network Four key characteristics of an SDN architecture can be identified: Flow-based forwarding. Packet forwarding by SDN-controlled switches can be based on any number of header field values in the transport-layer, network-layer, or link-layer header. Separation of data plane and control plane Network control functions: external to data-plane switches A programmable network the SDN control plane divides broadly into two components—the SDN controller and the SDN network-control applications. A controller’s functionality can be broadly organized into three layers: A communication layer: communicating between the SDN controller and controlled network devices. A network-wide state-management layer The interface to the network-control application layer The OpenFlow protocol operates over TCP, with a default port number of 6653 Among the important messages flowing from the controller to the controlled switch are the following: Configuration: This message allows the controller to query and set a switch’s configuration parameters. Modify-State. This message is used by a controller to add/delete or modify entries in the switch’s flow table, and to set switch port properties. Read-State. This message is used by a controller to collect statistics and counter values from the switch’s flow table and ports. Send-Packet. This message is used by the controller to send a specific packet out of a specified port at the controlled switch. The message itself contains the packet to be sent in its payload. Among the messages flowing from the SDN-controlled switch to the controller are the following: Flow-Removed: This message informs the controller that a flow table entry has been removed, for example by a timeout or as the result of a received modify-state message. Port-status: This message is used by a switch to inform the controller of a change in port status. Packet-in: A packet arriving at a switch port and not matching any flow table entry is sent to the controller for additional processing. Matched packets may also be sent to the controller, as an action to be taken on a match. The packet-in message is used to send such packets to the controller. The SDN has two important differences from the earlier per-router-control scenario , where Dijkstra’s algorithm was implemented in each and every router .Dijkstra’s algorithm is executed as a separate application, outside of the packet switches. Packet switches send link updates to the SDN controller and not to each other. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:15:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.5 Internet Control Message Protocol The Internet Control Message Protocol (ICMP), specified in [RFC 792], is used by hosts and routers to communicate network-layer information to each other. ICMP messages are carried as IP payload. ICMP messages have a type and a code field, and contain the header and the first 8 bytes of the IP datagram that caused the ICMP message to be generated in the first place (so that the sender can determine the datagram that caused the error) ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:16:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.5.1 Ping How Does Ping Program Work: The well-known ping program sends an ICMP type 8 code 0 message to the specified host. The destination host, seeing the echo request, sends back a type 0 code 0 ICMP echo reply. Most TCP/IP implementations support the ping server directly in the operating system; that is, the server is not a process. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:16:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.5.2 Traceroute How Does Traceroute Program Work: Traceroute in the source sends aseries of ordinary IP datagrams to the destination. Each of these datagrams carries a UDP segment with an unlikely UDP port number. The first of these datagrams has a TTL of 1, the second of 2, the third of 3, and so on. The source also starts timers for each of the datagrams. When the nth datagram arrives at the nth router, the nth router observes that the TTL of the datagram has just expired. According to the rules of the IP protocol, the router discards the datagram and sends an ICMP warning message to the source (type 11 code 0). This warning message includes the name of the router and its IP address. When this ICMP message arrives back at the source, the source obtains the round-trip time from the timer and the name and IP address of the nth router from the ICMP message one of the datagrams will eventually make it all the way to the destination host. Because this datagram contains a UDP segment with an unlikely port number, the destination host sends a port unreachable ICMP message (type 3 code 3) back to the source. When the source host receives this particular ICMP message, it knows it does not need to send additional probe packets. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:16:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"5.6 Network Management the key components of network management: The managing server is an application, controls the collection, processing, analysis, and/or display of network management information. A managed device is a piece of network equipment (including its software) that resides on a managed network. Each managed object within a managed device associated information that is collected into a Management Information Base (MIB) Also resident in each managed device is a network management agent, a process running in the managed device that communicates with the managing server network ­management protocol The Simple Network Management Protocol version 2 (SNMPv2) [RFC 3416] is an application-layer protocol used to convey network-management control and information messages between a managing server and an agent executing on behalf of that managing server. SNMPv2 defines seven types of messages, known generically as protocol data units—PDUs: SNMPv2 PDU Type Sender-receiver Description GetRequest manager-to-agent get value of one or more MIB object instances GetNextRequest manager-to-agent get value of next MIB object instance in list or table GetBulkRequest manager-to-agent get values in large block of data, for example, values in a large table InformRequest manager-to-manager inform remote managing entity of MIB values remote to its access SetRequest manager-to- agent set value of one or more MIB object instances Response agent-to- manager or generated in response to manager-to-manager GetRequest GetNextRequest GetBulkRequest SetRequest PDU, or InformRequest SNMPv2-Trap agent-to- manager inform manager of an exceptional event # the SNMP PDU is preferrably carried in the payload of a UDP datagram Chapter 6 The Link Layer and LANs Any device that runs a link-layer protocol is a node. The communication channels that connect adjacent nodes along the communication path are links. Possible services that can be offered by a link-layer protocol include: Framing. Almost all link-layer protocols encapsulate each network-layer datagram within a link-layer frame before transmission over the link. A frame consists of a data field, in which the network-layer datagram is inserted, and a number of header fields. The structure of the frame is specified by the link-layer protocol. Link access. A medium access control (MAC) protocol specifies the rules by which a frame is transmitted onto the link. Reliable delivery. When a link-layer protocol provides reliable delivery service, it guarantees to move each network-layer datagram across the link without error. Similar to a transport-layer reliable delivery service, a link-layer reliable delivery service can be achieved with acknowledgments and retransmissions . A link-layer reliable delivery service is often used for links that are prone to high error rates, such as a wireless link, with the goal of correcting an error locally—on the link where the error occurs—rather than forcing an end-to-end retransmission of the data by a transport- or application-layer protocol. However, link-layer reliable delivery can be considered an unnecessary overhead for low bit-error links, including fiber, coax, and many twisted-pair copper links. For this reason, many wired link-layer protocols do not provide a reliable delivery service. Error detection and correction.This is done by having the transmitting node include error-detection bits in the frame, and having the receiving node perform an error check. Error correction is similar to error detection, except that a receiver not only detects when bit errors have occurred in the frame but also determines exactly where in the frame the errors have occurred (and then corrects these errors) Network Adapter:For the most part, the link layer is implemented in a network adapter, also sometimes known as a network interface card (NIC). At the heart of the network adapter is the link-layer controller, usually a single, special-purpose chip that implements many of the link-","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:17:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.1 Error-Detection and Correction At the sending node, data, D, to be protected against bit errors is augmented with error-detection and -correction bits (EDC).Both D and EDC are sent to the receiving node in a link-level frame. At the receiving node, a sequence of bits, D′ and EDC′ is received.The receiver’s challenge is to determine whether or not D′ is the same as the original D, given that it has only received D′ and EDC′. The ability of the receiver to both detect and correct errors is known as forward error correction (FEC) ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:18:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.1.1 Parity Check Suppose that the information to be sent, D , has d bits. In an even parity scheme, the sender simply includes one additional bit and chooses its value such that the total number of 1s in the bits (the original information plus a parity bit) is even. For odd parity schemes, the parity bit value is chosen such that there is an odd number of 1s. The receiver need only count the number of 1s in the received bits. If an odd number of 1-valued bits are found with an even parity scheme(or vice versa), the receiver knows that at least one bit error has occurred. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:18:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.1.2 Checksum Bytes of data are treated as 16-bit integers and summed. The 1s complement of this sum then forms the Internet checksum that is carried in the segment header. the receiver checks the checksum by taking the the sum of the received data (including the checksum) and checking whether the result is all 1 bits. If any of the bits are 0, an error is indicated. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:18:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.1.3 Cyclic Redundancy Check (CRC) Consider the d-bit piece of data, D, that the sending node wants to send to the receiving node. The sender and receiver must first agree on an bit pattern, known as a generator, which we will denote as G.We will require that the leftmost bit of G be a 1. For a given piece of data, D, the sender will choose r additional bits, R, and append them to D such that the resulting bit pattern is exactly divisible by G (i.e., has no remainder) using modulo-2 arithmetic.The sender calculate R like this:$R=remainder(D/(2^r\\times G))$ The receiver divides the d+r received bits by G. If the remainder is nonzero, the receiver knows that an error has occurred; otherwise the data is accepted as being correct ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:18:3","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.2 Multiple Access Links The multiple access problem:Because all nodes are capable of transmitting frames, more than two nodes can transmit frames at the same time. When this happens, all of the nodes receive multiple frames at the same time; that is, the transmitted frames collide at all of the receivers,which are useless. In order to ensure that the broadcast channel performs useful work when multiple nodes are active, it is necessary to somehow coordinate the transmissions of the active nodes. This coordination job is the responsibility of the multiple access protocol. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:19:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.2.1 Channel Partitioning Protocols 6.2.1.1 TDM TDM divides time into time frames and further divides each time frame into N time slots. Each time slot is then assigned to one of the N nodes. Whenever a node has a packet to send, it transmits the packet’s bits during its assigned time slot in the revolving TDM frame. Typically, slot sizes are chosen so that a single packet can be transmitted during a slot time. 6.2.1.2 FDM FDM divides the R bps channel into different frequencies (each with a bandwidth of R/N) and assigns each frequency to one of the N nodes. FDM thus creates N smaller channels of R/N bps out of the single, larger R bps channel. 6.2.1.3 Code Division Multiple Access CDMA assigns a different code to each node. Each node then uses its unique code to encode the data bits it sends.receivers correctly receive a sender’s encoded data bits (assuming the receiver knows the sender’s code) ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:19:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.2.2 Random Access Protocols In a random access protocol, a transmitting node always transmits at the full rate of the channel, namely, R bps. When there is a collision, each node involved in the collision repeatedly retransmits its frame (that is, packet) until its frame gets through without a collision. But when a node experiences a collision, it doesn’t necessarily retransmit the frame right away. Instead it waits a random delay before retransmitting the frame. 6.2.2.1 Slotted ALOHA Protocol In our description of slotted ALOHA, we assume the following: All frames consist of exactly L bits. Time is divided into slots of size L/R seconds (that is, a slot equals the time to transmit one frame). Nodes start to transmit frames only at the beginnings of slots. The nodes are synchronized so that each node knows when the slots begin. If two or more frames collide in a slot, then all the nodes detect the collision event before the slot ends. Slotted ALOHA: When the node has a fresh frame to send, it waits until the beginning of the next slot and transmits the entire frame in the slot. If there isn’t a collision, the node has successfully transmitted its frame and thus need not consider retransmitting the frame. (The node can prepare a new frame for transmission, if it has one.) If there is a collision, the node detects the collision before the end of the slot. The node retransmits its frame in each subsequent slot with probability p until the frame is transmitted without a collision. Concerns With Slotted ALOHA: a certain fraction of the slots will have collisions and will therefore be “wasted.” another fraction of the slots will be empty because all active nodes refrain from transmitting as a result of the probabilistic transmission policy. 6.2.2.2 ALOHA Protocol In pure ALOHA, when a frame first arrives , the node immediately transmits the frame in its entirety into the broadcast channel. If a transmitted frame experiences a collision with one or more other transmissions, the node will then immediately (after completely transmitting its collided frame) retransmit the frame with probability p. Otherwise, the node waits for a frame transmission time. After this wait, it then transmits the frame with probability p, or waits (remaining idle) for another frame time with probability 1 – p. 6.2.2.3 Carrier Sense Multiple Access (CSMA) Carrier sensing—a node listens to the channel before transmitting. If a frame from another node is currently being transmitted into the channel, a node then waits until it detects no transmissions for a short amount of time and then begins transmission Collision detection—a transmitting node listens to the channel while it is transmitting. If it detects that another node is transmitting an interfering frame, it stops transmitting and waits a random amount of time before repeating the sense-and-transmit-when-idle cycle. channel propagation delay of a broadcast channel:the time it takes for a signal to propagate from one of the nodes to another.will play a crucial role in determining its performance. The longer this propagation delay, the larger the chance that a carrier-sensing node is not yet able to sense a transmission that has already begun at another node in the network CSMA/CD from the perspective of an adapter (in a node) attached to a broadcast channel: The adapter obtains a datagram from the network layer, prepares a link-layer frame, and puts the frame adapter buffer. If the adapter senses that the channel is idle (that is, there is no signal energy entering the adapter from the channel), it starts to transmit the frame. If, on the other hand, the adapter senses that the channel is busy, it waits until it senses no signal energy and then starts to transmit the frame. While transmitting, the adapter monitors for the presence of signal energy coming from other adapters using the broadcast channel. If the adapter transmits the entire frame without detecting signal energy from other adapters, the adap","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:19:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.2.3 Taking-Turns Protocols polling protocol. The polling protocol requires one of the nodes to be designated as a master node. The master node polls each of the nodes in a round-robin fashion. In particular, the master node first sends a message to node 1, saying that it (node 1) can transmit up to some maximum number of frames. After node 1 transmits some frames, the master node tells node 2 it (node 2) can transmit up to the maximum number of frames. (The master node can determine when a node has finished sending its frames by observing the lack of a signal on the channel.) The procedure continues in this manner, with the master node polling each of the nodes in a cyclic manner. token-passing protocol. In this protocol there is no master node. A small, special-purpose frame known as a token is exchanged among the nodes in some fixed order. For example, node 1 might always send the token to node 2, node 2 might always send the token to node 3, and node N might always send the token to node 1. When a node receives a token, it holds onto the token only if it has some frames to transmit; otherwise, it immediately forwards the token to the next node. If a node does have frames to transmit when it receives the token, it sends up to a maximum number of frames and then forwards the token to the next node. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:19:3","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.3 Switched Local Area Networks In truth, it is not hosts and routers that have link-layer addresses but rather their adapters (that is, network interfaces) that have link-layer addresses. link-layer switches do not have link-layer addresses associated with their interfaces that connect to hosts and routers A link-layer address is variously called a LAN address, a physical address, or a MAC address. For most LANs (including Ethernet and 802.11 wireless LANs), the MAC address is 6 bytes long, giving $2^{48}$ possible MAC addresses. One interesting property of MAC addresses is that no two adapters have the same address. An adapter’s MAC address has a flat structure (as opposed to a hierarchical structure) and doesn’t change no matter where the adapter goes. Sometimes a sending adapter does want all the other adapters on the LAN to receive and process the frame it is about to send. In this case, the sending adapter inserts a special MAC broadcast address into the destination address field of the frame. For LANs that use 6-byte addresses (such as Ethernet and 802.11), the broadcast address is a string of 48 consecutive 1s (that is, FF-FF-FF-FF-FF-FF in hexadecimal notation) ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:20:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.3.1 Address Resolution Protocol (ARP) Address Resolution Protocol (ARP):translate between network-layer addresses (for example, Internet IP addresses) and link-layer addresses (that is, MAC addresses) ARP resolves IP addresses only for hosts and router interfaces on the same subnet. Each host and router has an ARP table in its memory, which contains mappings of IP addresses to MAC addresses. The ARP table also contains a time-to-live (TTL) value, which indicates when each mapping will be deleted from the table. A table does not necessarily contain an entry for every host and router on the subnet; some may have never been entered into the table, and others may have expired. How does ARP work: The sending host needs to obtain the MAC address of the destination given the IP address by consulting to ARP table. If the ARP table doesn’t currently have an entry for the destination,the sender constructs a special packet called an ARP packet,adapter along with an indication that the adapter should send the packet to the MAC broadcast address, namely, FF-FF-FF- FF-FF-FF. The adapter encapsulates the ARP packet in a link-layer frame, uses the broadcast address for the frame’s destination address, and transmits the frame into the subnet. The frame containing the ARP query is received by all the other adapters on the subnet, and (because of the broadcast address) each adapter passes the ARP packet within the frame up to its ARP module.Each of these ARP modules checks to see if its IP address matches the destination IP address in the ARP packet. The one with a match sends back to the querying host a response ARP packet with the desired mapping. The querying host can then update its ARP table and send its IP datagram, encapsulated in a link-layer frame whose destination MAC is that of the host or router responding to the earlier ARP query. Sending a Datagram off the Subnet: The sending host passes the datagram to its adapter Sending host adapter acquires the appropriate MAC address for the frame which is the address of the adapter for first hop router interface by using ARP Once the sending adapter has this MAC address, it creates a frame (containing the datagram with the target IP address of the router) and sends the frame into the Subnet . The router adapter on Subnet sees that the link-layer frame is addressed to it, and therefore passes the frame to the network layer of the router. The router now has to determine the correct interface on which the datagram is to be forwarded. This is done by consulting a forwarding table in the router. This interface then passes the datagram to its adapter, which encapsulates the datagram in a new frame and sends the frame into another Subnet. The destination MAC address is again acquired by ARP . ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:20:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.3.2 Ethernet Today,Ethernet mainly uses a switch-based star topology. switch is not only “collision-less” but is also a store-and-forward packet switch a switch operates only up through layer 2 Ethernet Frame Structure Data field (46 to 1,500 bytes). This field carries the IP datagram. Destination address (6 bytes) Source address (6 bytes). Type field (2 bytes): The type field permits Ethernet to multiplex and demultiplex network-layer protocols Cyclic redundancy check (CRC) (4 bytes). the purpose of the CRC field is to allow the receiving adapter, adapter B, to detect bit errors in the frame Preamble (8 bytes). For “waking up” the receiving adapters and to synchronize their clocks to that of the sender’s clock. All of the Ethernet technologies provide connectionless service to the network layer. That is, there is no handshaking. Ethernet technologies provide an unreliable service to the network layer. Specifically, when adapter B receives a frame from adapter A, it runs the frame through a CRC check, but doesn’t send ACK or NCK. When a frame fails the CRC check, adapter B simply discards the frame. Ethernet Acronyms Naming Order: The first part of the acronym refers to the speed of the standard “BASE” refers to baseband Ethernet, meaning that the physical media only carries Ethernet traffic The final part of the acronym refers to the physical media itself; 6.3.2.1 Filtering And Forwarding Filtering is the switch function that determines whether a frame should be forwarded to some interface or should just be dropped Forwarding is the switch function that determines the interfaces to which a frame should be directed, and then moves the frame to those interfaces Switch filtering and forwarding are done with a switch table. The switch table contains entries for some, but not necessarily all, of the hosts and routers on a LAN. An entry in the switch table contains A MAC address The switch interface that leads toward that MAC address The time at which the entry was placed in the table In a switch-based Ethernet LAN there are no collisions because a switch coordinates its transmissions and never forwards more than one frame onto the same interface at any time. and, therefore, there is no need for a MAC protocol such as CSMA/CD. The switch indexes its table with the MAC address. There are three possible cases: There is no entry in the table for the address. In this case, the switch forwards copies of the frame to the output buffers preceding all interfaces except for interface it came in. In other words, if there is no entry for the destination address, the switch broadcasts the frame There is an entry in the table, associating with interface it came in. In this case, the frame is coming from a LAN segment that contains adapter with the MAC address of the requested MAC address. There being no need to forward the frame to any of the other interfaces, the switch performs the filtering function by discarding the frame. There is an entry in the table, associating the requested MAC address with interface different from the one it came in. In this case, the frame needs to be forwarded to the LAN segment attached to interface mentioned. The switch performs its forwarding function by putting the frame in an output buffer that precedes the interface. How the switches implement Self-Learning ability: The switch table is initially empty. For each incoming frame received on an interface, the switch stores in its table: The MAC address in the frame’s source address field The interface from which the frame arrived The current time. The switch deletes an address in the table if no frames are received with that address as the source address after some period of time (the aging time). We can identify several advantages of using switches, rather than broadcast links such as buses or hub-based star topologies: Elimination of collisions:The switches buffer frames and never transmit more than one frame on a segment at any one time. Heterogeneous links:","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:20:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"6.3.3 Virtual Local Area Network(VLAN) VLAN:a switch that supports VLANs allows multiple virtual local area networks to be defined over a single physical local area network infrastructure. Hosts within a VLAN communicate with each other as if they (and no other hosts) were connected to the switch. VLAN trunking:In the VLAN trunking approach , a special port on each switch is configured as a trunk port to interconnect the two VLAN switches. The trunk port belongs to all VLANs, and frames sent to any VLAN are forwarded over the trunk link to the other switch. Chapter 7 Wireless and Mobile Networks When we say a wireless host is“associated” with a base station, we mean that the host is within the wireless communication distance of the base station. the host uses that base station to relay data between it (the host) and the larger network. Hosts associated with a base station are often referred to as operating in ­infrastructure mode,since all traditional network services (e.g., address assignment and routing) are provided by the network to which a host is connected via the base station. In ad hoc networks, wireless hosts have no such infrastructure with which to connect. In the absence of such infrastructure, the hosts themselves must provide for services such as routing, address assignment, DNS-like name translation, and more. When a mobile host moves beyond the range of one base station and into the range of another, it will change its point of attachment into the larger network,a process referred to as handoff. At the highest level we can classify wireless networks according to two criteria: Whether a packet in the wireless network crosses exactly one wireless hop or multiple wireless hops Whether there is infrastructure such as a base station in the network Single-hop, infrastructure-based. These networks have a base station that is connected to a larger wired network (e.g., the Internet). Furthermore, all communication is between this base station and a wireless host over a single wireless hop.eg:802.11 networks,4G LTE data networks. Single-hop, infrastructure-less. In these networks, there is no base station that is connected to a wireless network. However, as we will see, one of the nodes in this single-hop network may coordinate the transmissions of the other nodes.eg:Bluetooth,802.11 ad hoc mode. Multi-hop, infrastructure-based. In these networks, a base station is present that is wired to the larger network. However, some wireless nodes may have to relay their communication through other wireless nodes in order to communicate via the base station.eg: Wireless sensors,Wireless Mesh Networks. Multi-hop, infrastructure-less. There is no base station in these networks, and nodes may have to relay messages among several other nodes in order to reach a destination. Nodes may also be mobile, with connectivity changing among nodes Differences between a wired link and a wireless link: Decreasing signal strength Interference from other sources Multipath propagation The SNR(Signal Noise Ratio), measured in dB, is twenty times the ratio of the base-10 logarithm of the amplitude of the received signal to the amplitude of the noise. Several physical-layer characteristics that are important in understanding higher-layer wireless communication protocols: For a given modulation scheme, the higher the SNR, the lower the bit error rate (BER). For a given SNR, a modulation technique with a higher bit transmission rate (whether in error or not) will have a higher BER. Dynamic selection of the physical-layer modulation technique can be used to adapt the modulation technique to channel conditions. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:20:3","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.1 Code division multiple access (CDMA) Code division multiple access (CDMA) belongs to the family of channel partitioning protocols. In a CDMA protocol, each bit being sent is encoded by multiplying the bit by a signal (the code) that changes at a much faster rate (known as the chipping rate) than the original sequence of data bits How CDMA Works: Let $d_i$ be the value of the data bit for the $i$th bit slot. We represent a data bit with a 0 value as -1 . Each bit slot is further subdivided into M mini-slots; The CDMA code used by the sender consists of a sequence of M values, $c_m,m=1,2,3,…M$ ,each taking a +1 or -1 value. Focus on the ith data bit, $d_i$ .For the mth mini-slot of the bit- transmission time of $d_i$ , the output of the CDMA encoder,$Z_{i,m}$, is the value of $d_i$ multiplied by the mth bit in the assigned CDMA code, $c_m$; $$ Z_{i,m} = d_i\\times c_m $$ With no interfering senders, the receiver would receive the encoded bits, $Z$ , and recover the original data bit, $d$ , by computing: $$ d_{i}=\\frac{\\sum_{m=1}^{M} Z_{i,m} \\cdot c_{m} }{M} $$ In the presence of multiple senders, sender s computes its encoded transmissions,$Z_{i,m}$, in exactly the same manner.The value received at a receiver during the $m$th mini-slot of the ith bit slot, however, is now the sum of the transmitted bits from all N senders during that mini-slot: $$ Z_{i,m}^{*} =\\sum_{j=1}^{N} Z_{i,m}^{j} = \\sum_{j=1}^{N} d_{i}^{j}\\cdot c_{m}^{j} $$ If the senders’ codes are chosen carefully(each two combination is orthogonal), each receiver can recover the data sent by a given sender out of the aggregate signal simply by using the sender’s code in exactly the same manner as in Equation : $$ d_{i}^{j} = \\frac{\\sum_{m=1}^{M} Z_{i,m}^{*} \\cdot c_{m}^{j} }{M} $$ ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:21:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.2 WiFi: 802.11 Wireless LANs When a network administrator installs an AP, the administrator assigns a one- or two-word Service Set Identifier (SSID) to the access point. Within this 85 MHz band, 802.11 defines 11 partially overlapping channels. Any two channels are non-overlapping if and only if they are separated by four or more channels. In particular, the set of channels 1, 6, and 11 is the only set of three non-overlapping channels. The fundamental building block of the 802.11 architecture is the basic service set (BSS). A BSS contains one or more wireless stations and a central base station, known as an access point (AP) in 802.11 parlance. How A Wireless Device Associates With An AP: Detect The 802.11 standard requires that an AP periodically send beacon frames, each of which includes the AP’s SSID and MAC address. Wireless devices, scan the 11 channels, seeking beacon frames Request the wireless device sends an association request frame the AP responds with an association response frame Authenticate The host provides AP with some information.The AP typically communicates with an authentication server to verify these information, relaying information between the wireless device and the authentication server using a protocol such as RADIUS or DIAMETER. Assign IP The host is assigned an IP address following DHCP protocol ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:22:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.2.1 802.11 CSMA/CA Protocol If initially the station senses the channel idle, it transmits its frame after a short period of time known as the Distributed Inter-frame Space (DIFS); Otherwise, the station chooses a random backoff value using binary exponential backoff and counts down this value after DIFS when the channel is sensed idle. While the channel is sensed busy, the counter value remains frozen. When the counter reaches zero (note that this can only occur while the channel is sensed idle), the station transmits the entire frame and then waits for an acknowledgment. If an acknowledgment is received, the transmitting station knows that its frame has been correctly received at the destination station. If the station has another frame to send, it begins the CSMA/CA protocol at step 2. If the acknowledgment isn’t received, the transmitting station reenters the backoff phase in step 2, with the random value chosen from a larger interval. Because 802.11wireless LANs do not use collision detection, once a station begins to transmit a frame, it transmits the frame in its entirety regardless of collision. When the destination station receives a frame that passes the CRC, it waits a short period of time known as the Short Inter-frame Spacing (SIFS) and then sends back an acknowledgment frame. Why Does CSMA/CA Take Different Approach With CSMA/CD: The ability to detect collisions requires the ability to send (the station’s own ­signal) and receive (to determine whether another station is also transmitting) at the same time. Because the strength of the received signal is typically very small compared to the strength of the transmitted signal at the 802.11 adapter, it is costly to build hardware that can detect a collision. More importantly, even if the adapter could transmit and listen at the same time (and presumably abort transmission when it senses a busy channel), the adapter would still not be able to detect all collisions, due to the hidden terminal problem and fading. In 802.11, if the two stations sense the channel busy, they both immediately enter random backoff, hopefully choosing different backoff values. If these values are indeed different, once the channel becomes idle, one of the two stations will begin transmitting before the other, and the “losing station” will hear the “winning station’s” signal, freeze its counter, and refrain from transmitting until the winning station has completed its transmission Dealing With Hidden Terminals: RTS and CTS: the IEEE 802.11 protocol allows a station to use a short Request to Send (RTS) control frame and a short Clear to Send (CTS) control frame to reserve access to the channel: When a sender wants to send a DATA frame, it can first send an RTS frame to the AP, indicating the total time required to transmit the DATA frame and the acknowledgment (ACK) frame. When the AP receives the RTS frame, it responds by broadcasting a CTS frame. This CTS frame serves two purposes: It gives the sender explicit permission to send. Instructs the other stations not to send for the reserved duration. Although the RTS/CTS exchange can help reduce collisions, it also introduces delay and consumes channel resources. For this reason, the RTS/CTS exchange is only used (if at all) to reserve the channel for the transmission of a long DATA frame. In practice, each wireless station can set an RTS threshold such that the RTS/CTS sequence is used only when the frame is longer than the threshold. 802.11 frame has four address fields,each of which can hold a 6-byte MAC address, three address fields are needed for moving the network-layer datagram from a wireless station through an AP to a router interface. The fourth address field is used when APs ­forward frames to each other in ad hoc mode. Since we are only considering infrastructure networks here, let’s focus our attention on the first three address fields. The 802.11 standard defines these fields as follows: Address 1 is the MAC address of the wireles","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:22:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.3 Cellular Network In Cellular Network,The term cellular refers to the fact that the region covered by a cellular network is partitioned into a number of geographic coverage areas, known as cells. Each cell contains a base transceiver station (BTS) that transmits signals to and receives signals from the mobile stations in its cell. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:23:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.3.1 2G The GSM standard for 2G cellular systems uses combined FDM/TDM (radio) for the air interface.In combined FDM/TDM systems, the channel is partitioned into a number of frequency sub-bands; within each sub-band, time is partitioned into frames and slots. Thus, for a combined FDM/TDM system, if the channel is partitioned into F sub-bands and time is partitioned into T slots, then the channel will be able to support $F\\cdot T$ simultaneous calls. the mobile switching center (MSC) plays the central role in user authorization and accounting, call establishment and teardown, and handoff. The role of the base station controller (BSC) is to allocate BTS radio channels to mobile subscribers, perform paging (finding the cell in which a mobile user is resident), and perform handoff of mobile users. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:23:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.3.2 3G There are two types of nodes in the 3G core network: Serving GPRS Support Nodes (SGSNs) and Gateway GPRS Support Nodes (GGSNs): An SGSN is responsible for delivering datagrams to/from the mobile nodes in the radio access network where the SGSN is attached. The SGSN interacts with the cellular voice network’s MSC for that area, providing user authorization and handoff, maintaining location (cell) information about active mobile nodes, and performing datagram forwarding between mobile nodes in the radio access network and a GGSN. The GGSN acts as a gateway, connecting multiple SGSNs into the larger Internet. The Radio Network Controller (RNC) typically controls several cell base transceiver stations.The RNC connects to both the circuit-switched cellular voice network via an MSC, and to the packet-switched Internet via an SGSN. A significant change in 3G UMTS over 2G networks is that rather than using GSM’s FDMA/TDMA scheme, UMTS uses a CDMA technique known as Direct Sequence Wideband CDMA (DS-WCDMA) within TDMA slots:TDMA slots, in turn, are available on multiple frequencies ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:23:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.3.3 4G Changes in 4G over 3G network: All-IP network architecture:the 4G architecture carries both voice and data in IP datagrams.With 4G, the last vestiges of cellular networks’ roots in the telephony have disappeared. A clear separation of the 4G data plane and 4G control plane. A clear separation between the radio access network, and the all-IP-core ­network The principal components of the 4G architecture are as follows: The eNodeB is the logical descendant of the 2G base station and the 3G Radio Network Controller(a.k.a Node B) and again plays a central role here. Its data-plane role is to forward datagrams between UE (over the LTE radio access ­network) and the P-GW.UE datagrams are encapsulated at the eNodeB and tunneled to the P-GW through the 4G network’s all-IP enhanced packet core (EPC). The Packet Data Network Gateway (P-GW) allocates IP addresses to the UEs and performs QoS enforcement. As a tunnel endpoint it also performs datagram encapsulation/decapsulation when forwarding a datagram to/from a UE. The Serving Gateway (S-GW) is the data-plane mobility anchor point—all UE traffic will pass through the S-GW. The S-GW also performs charging/billing functions and lawful traffic interception. The Mobility Management Entity (MME) performs connection and mobility management on behalf of the UEs resident in the cell it controls. It receives UE subscription information from the HHS. The Home Subscriber Server (HSS) contains UE information including roaming access capabilities, quality of service profiles, and authentication information. LTE Radio Access Network:LTE uses a combination of frequency division multiplexing and time division multiplexing on the downstream channel, known as orthogonal frequency division multiplexing (OFDM):In LTE, each active mobile node is allocated one or more 0.5 ms time slots in one or more of the channel frequencies. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:23:3","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.4 Mobility The permanent home of a mobile node (such as a laptop or smartphone) is known as the home network The entity within the home network that performs the mobility management functions on behalf of the mobile node is known as the home agent The network in which the mobile node is currently residing is known as the foreign (or visited) network the entity within the foreign network that helps the mobile node with the mobility management functions discussed below is known as a foreign agent. A correspondent is the entity wishing to communicate with the mobile node ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:24:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.4.1 Indirect Routing the correspondent simply addresses the datagram to the mobile node’s permanent address and sends the datagram into the network Such datagrams are first routed, as usual, to the mobile node’s home network. The datagram is forwarded to the foreign agent, using the mobile node’s Care-Of-Address(COA) The datagram is forwarded from the foreign agent to the mobile node ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:24:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.4.2 Direct Routing We’ll identify the foreign agent in that foreign network where the mobile node was first found as the anchor ­foreign agent. How Direct Routing Works: A correspondent agent in the correspondent’s network querys the home agent to learn the COA of the mobile node. The correspondent agent then tunnels datagrams directly to the mobile node’s COA. When the mobile node moves to a new foreign network, the mobile node registers with the new foreign agent, and the new foreign agent provides the anchor foreign agent with the mobile node’s new COA. When the anchor foreign agent receives an encapsulated datagram for a departed mobile node, it can then re-encapsulate the datagram and forward it to the mobile node (step 5) using the new COA. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:24:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.4.3 Mobile-IP The mobile IP standard consists of three main pieces: Agent discovery Registration with the home agent Indirect routing of datagrams Agent Discovery:A mobile IP node arriving to a new network learn the identity of the corresponding foreign or home agent. Agent discovery can be accomplished in one of two ways: via agent advertisement or via agent solicitation. With agent advertisement, the agent periodically broadcasts an ICMP message with a type field of 9 (router discovery) on all links to which it is connected. The router discovery message contains the IP address of the router (that is, the agent), thus allowing a mobile node to learn the agent’s IP address.It also contains Care-of address (COA) fields providing a list of one or more care-of addresses mobile node to choose. With agent solicitation, a mobile node can broadcast an agent solicitation message, which is simply an ICMP message with type value 10. An agent receiving the solicitation will unicast an agent advertisement directly to the mobile node. Registration with the Home Agent: Following the receipt of a foreign agent advertisement, a mobile node sends a registration message to the foreign agent carrying a COA advertised by the foreign agent, the address of the home agent (HA), the permanent address of the mobile node (MA) The foreign agent receives the registration message and records the mobile node’s permanent IP address.The foreign agent then sends a registration message to the home agent. The home agent receives the registration request , binds the mobile node’s permanent IP address with the COA; The home agent sends a mobile IP registration reply. The foreign agent receives the registration reply and then forwards it to the mobile node.Registration is complete. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:24:3","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"7.4.4 Mobility in Cellular Networks How Routing Calls to a Mobile User Works In GSM: The correspondent dials the mobile user’s phone number.The call is routed from the correspondent through the PSTN to the home MSC in the mobile’s home network. The home MSC receives the call and interrogates the home location register (HLR) to determine the location of the mobile user. In the simplest case, the HLR returns the mobile station roaming number (MSRN),If HLR does not have the roaming number, it returns the address of the visitor location register (VLR) in the visited network. In this case , the home MSC will need to query the VLR to obtain the roaming number of the mobile node. Given the roaming number, the home MSC sets up the second leg of the call through the network to the MSC in the visited network. The call is completed, being routed from the correspondent to the home MSC, and from there to the visited MSC, and from there to the base station serving the mobile user. How the HLR obtains information about the location of the mobile user: When a mobile telephone is switched on or enters a part of a visited network that is covered by a new VLR, the mobile registers with the visited network. The visited VLR, in turn, sends a location update request message to the mobile’s HLR. This message informs the HLR of either the roaming number at which the mobile can be contacted, or the address of the VLR. As part of this exchange, the VLR also obtains subscriber information from the HLR about the mobile and determines what services (if any) should be accorded the mobile user by the visited network A handoff occurs when a mobile station changes its association from one base station to another during a call: The old base station (BS) informs the visited MSC that a handoff is to be performed and the BS (or possible set of BSs) to which the mobile is to be handed off. The visited MSC initiates path setup to the new BS, allocating the resources needed to carry the rerouted call, and signaling the new BS that a handoff is about to occur. The new BS allocates and activates a radio channel for use by the mobile. The new BS signals back to the visited MSC and the old BS that the visited-MSC-to-new-BS path has been established and that the mobile should be informed of the pending handoff. The mobile is informed that it should perform a handoff. The mobile and the new BS exchange one or more messages to fully activate the new channel in the new BS. The mobile sends a handoff complete message to the new BS, which is forwarded up to the visited MSC. The visited MSC then reroutes the ongoing call to the mobile via the new BS. The resources allocated along the path to the old BS are then released What happens when the mobile moves to a BS that is associated with a different MSC : GSM defines the notion of an anchor MSC. The anchor MSC is the MSC visited by the mobile when a call first begins; the anchor MSC thus remains unchanged during the call. Throughout the call’s duration, the call is routed from the home MSC to the anchor MSC, and then from the anchor MSC to the visited MSC where the mobile is currently located. Chapter 8 Network Security ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:24:4","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.1 Encryption ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:25:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.1.1 Symmetric Key Encryption Encrypted communication required that the two communicating parties share a common secret How Block Cipher Works: In a block cipher, the message to be encrypted is processed in blocks of k bits. Block cipher uses a function to break a k-bit block into n chunks, with each chunk consisting of k/n bits. Each k/n-bit chunk is processed by an k/n-bit to k/n-bit table Next, the n output chunks are reassembled into a new k-bit block. The positions of the k bits in the block are then scrambled (permuted) to produce a k-bit output. This output is fed back to the k-bit input, where another cycle begins. To avoid same ciphertext blocks originated from same cleartext blocks:The sender creates a random k-bit number r(i) for the ith block and calculates $c(i)=K_s( m(i) \\oplus r(i))$,where block-cipher encryption algorithm with key S as $K_{s}$ , m(i) denote the ith plaintext block. In order to save overhead of sending random bits, block ciphers typically use a technique called Cipher Block Chaining (CBC): Before encrypting the message (or the stream of data), the sender generates a random k-bit string, called the Initialization Vector (IV). Denote this initialization vector by c(0). The sender sends the IV to the receiver in cleartext. For the first block, the sender calculates the exclusive-or of the first block of cleartext with the IV. It then runs the result through the block-cipher algorithm to get the corresponding ciphertext block; that is,$c(1)=K_S(m(1)\\oplus c(0))$ . The sender sends the encrypted block c(1) to the receiver For the ith block, the sender generates the ith ciphertext block from $c(i)= K_S(m(i)\\oplus c(i−1))$ ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:25:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.1.2 Public Key Encryption Suppose Alice wants to communicate with Bob.We will use the notation $K_B^+$ and $K_B^-$ to refer to Bob’s public key and private keys,respectively. Alice first fetches Bob’s public key. Alice then encrypts her message, m, to Bob using Bob’s public key and a known (for example, standardized) encryption algorithm; that is, Alice computes $K_B^+(m)$ Bob receives Alice’s encrypted message and uses his private key and a known (for example, standardized) decryption algorithm to decrypt Alice’s encrypted message. That is, Bob computes $m=K_B^−(K_B^+(m))$ How Does RSA Work: Generate the public and private RSA keys: Choose two large prime numbers, p and q. Compute n=pq and z=(p-1)(q-1) Choose a number, e, less than n, that has no common factors (other than 1) with z. Find a number, d, such that is exactly divisible (that is, with no ­remainder) by z. . Put another way, given e, we choose d such that: $$ e^d \\ mod \\ z \\ = \\ 1 $$ The public key that Bob makes available to the world,$K_B^+$,, is the pair of numbers (n, e); his private key, $K_B^−$, is the pair of numbers (n, d). Encryption: Suppose Alice wants to send Bob a bit pattern represented by the integer number m . To encode, Alice calculates ciphertext c is sent to Bob: $$ c \\ = \\ m^e \\ mod \\ n $$ To decrypt the received ciphertext message, c, Bob computes $$ m=c^d \\ mod \\ n $$ RSA is often used in practice in combination with symmetric key cryptography to deliver symmetric key(refered to as session key). How does Session Key work? Alice encrypts her message, m, with the symmetric key Encrypts the symmetric key with Bob’s public key,$K_B^{+}$ Concatenates the encrypted message and the encrypted symmetric key to form a “package” Sends the package to Bob’s. He uses his private key,$K_B^−$ to obtain the symmetric key, $K_s$ Bob uses the symmetric key $K_s$ to decrypt the message m ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:25:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.2 Integrity A cryptographic hash function is required to have the following additional property: It is computationally infeasible to find any two different messages x and y such that $H(x)=H(y)$ ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:26:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.2.1 Message Authentication Code (MAC) Using the shared secret s, message integrity can be performed as follows: Alice creates message m, concatenates s with m to create $m+s$ , and calculates the hash $H(m+s)$ (for example with SHA-1). $H(m+s)$ is called the message authentication code (MAC) Alice then appends the MAC to the message m, creating an extended message $(m,H(m+s))$, and sends the extended message to Bob. Bob receives an extended message (m, h) and knowing s, calculates the MAC $H(m+s)$. If $H(m+s)=h$, Bob concludes that everything is fine. One nice feature of a MAC is that it does not require an encryption algorithm. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:26:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.2.2 Digital Signatures How Digital Signatures Work? Suppose that Bob wants to digitally sign a document, m.Bob simply uses his private key,$K_B^−$,to compute $K_B^−(H(m))$,where H is a cryptographic hash function. Alice takes Bob’s public key, $K_B^{+}$,and applies it to the digital signature,That is, she computes $K_B^+(K_B^−(H(m)))$,she produces $H(m)$. Alice runs the same cryptographic hash function on the original message m and gets $H’(m)$.She compares $H(m)$ with $H’(m)$ and if they are the same the signature is valid. If the original document, m, is ever modified to some alternate form, $m’$ , ́the signature that Bob created for m will not be valid for $m’$,since $H(m)$ and $H(m’)$ will be different. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:26:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.2.3 Certification Public key certification is certifying that a public key belongs to a specific entity. To verify that you have the actual public key of the entity (person, router, browser, and so on) with whom you want to communicate,Binding a public key to a Certification Authority (CA) and get a certificate. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:26:3","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.2.4 End-Point Authentication A nonce is a number that a protocol will use only once in a lifetime Authentication Protocol Alice sends the message to Bob. Bob chooses a nonce, R, and sends it to Alice. Alice encrypts the nonce using Alice and Bob’s symmetric secret key,$K_{A-B}$, and sends the encrypted nonce, $K_{A-B}^{-}(R)$, back to Bob. As in protocol ap3.1, it is the fact that Alice knows and uses it to encrypt a value that lets Bob know that the message he receives was generated by Alice. The nonce is used to ensure that Alice is live. Bob decrypts the received message. If the decrypted nonce equals the nonce he sent, then Alice is authenticated. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:26:4","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.3 Pretty Good Privacy (PGP) How Does PGP Work? Sender(Alice) Alice applies a hash function, H , to her message, m, to obtain a message digest. Alice signs the digest with her private key $K_A^-$ to create a digital signature. Alice concatenates the original (unencrypted) message with the signature to create a package. Alice selects a random symmetric session key, $K_S$. Alice encrypts her package with the symmetric key Alice encrypts the symmetric key with Bob’s public key,$K_B^+$. Alice concatenates the encrypted package and the encrypted symmetric key to form a “bigger package” Alice sends the “bigger package” to Bob. Receiver(Bob) When Bob receives the package, he uses his private key,$K_B^-$ to obtain the symmetric key, $K_S$. Bob uses the symmetric key $K_S$ to decrypt the package. Bob applies Alice’s public key, $K_A^+$ to the signature Bob compares the result of this operation with his own hash, H, of the message.If the two results are the same, Bob can be pretty confident that the message came from Alice and is unaltered. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:27:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.4 SSL SSL can be employed by any application that runs over TCP. SSL has three phases: handshake, key derivation, and data transfer. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:28:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.4.1 Handshake Bob needs to establish a TCP connection with Alice Bob sends Alice a list of cryptographic algorithms it supports, along with a ­client nonce. Alice chooses a symmetric algorithm (for example, AES), a public key algorithm (for example, RSA with a specific key length), and a MAC algorithm. then responds with her choices, as well as a certificate and a server nonce. Bob then generates a Pre Master Secret (PMS) , encrypts the PMS with Alice’s public key to create the Encrypted Master Secret (EMS), and sends the EMS to Alice. Alice decrypts the EMS with her private key to get the PMS. Using the same key derivation function (as specified by the SSL standard), Bob and Alice independently compute the Master Secret (MS) from the PMS and nonces. The MS is then sliced up to generate the two encryption and two MAC keys. The client sends a MAC of all the handshake messages. The server sends a MAC of all the handshake messages. Nonce The nonce is used to prevent connection replay attack, which is replaying the sent records.(sequence numbers are used to defend against replaying individual packets during an ongoing session) MS Alice and Bob use the MS to generate four keys: EB = session encryption key for data sent from Bob to Alice MB = session MAC key for data sent from Bob to Alice EA = session encryption key for data sent from Alice to Bob MA = session MAC key for data sent from Alice to Bob The two encryption keys will be used to encrypt data; the two MAC keys will be used to verify the integrity of the data. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:28:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.4.2 Data Transfer Suppose Bob is to send data. His data is represented by data streams in TCP . SSL breaks the data stream into records. Bob maintains a sequence number counter.To create the MAC, Bob inputs the record data along with the key $M_B$ and sequence number into a hash function.The result MAC is appended to each record. SSL encrypts the $record \\ + \\ MAC$ using his session encryption key $E_B$ This encrypted package is then passed to TCP for transport over the Internet 8.4.2.1 SSL Record The Fields In A SSL Record: Type Field:The type field indicates whether the record is a handshake message or a message that contains application data.It is also used to close the SSL connection. Length Field:SSL at the receiving end uses the length field to extract the SSL records out of the incoming TCP byte stream SSL does not mandate that Alice and Bob use a specific symmetric key algorithm, a specific public-key algorithm, or a specific MAC. Truncation Attack:The intruder ends the session early with a TCP FIN. How To Prevent Truncation Attack:indicate in the type field whether the record serves to terminate the SSL session. (Although the SSL type is sent in the clear, it is authenticated at the receiver using the record’s MAC.) ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:28:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.5 IP security(IPsec) protocol The IP security protocol, more commonly known as IPsec, provides security at the network layer Encapsulation Security Payload (ESP) protocol:The ESP protocol provides source authentication, data integrity, and confidentiality. Before sending IPsec datagrams from source entity to destination entity, the source and destination entities create a network-layer logical connection. This logical connection is called a security association (SA) An SA is unidirectional from source to destination. If both entities want to send secure datagrams to each other, then two SAs (that is, two logical connections) need to be established, one in each direction. SA State Information A 32-bit identifier for the SA, called the Security Parameter Index (SPI) The origin interface of the SA and the destination interface of the SA. The type of encryption The encryption key The type of integrity check The authentication key Whenever the gateway router needs to construct an IPsec datagram for forwarding over this SA, it accesses the state information mentioned above to determine how it should authenticate and encrypt or decrypt the datagram. An IPsec entity stores the state information for all of its SAs in its Security Association Database (SAD). Along with a SAD, the IPsec entity also maintains another data structure called the Security Policy Database (SPD). The SPD indicates which SA should be used for datagrams that are to be IPsec processed; IPsec Datagram Structure: The gateway router of the sending host uses the ­following recipe to convert “original IPv4 datagram” into an IPsec datagram: Appends to the back of the original IPv4 datagram an “ESP trailer” field Encrypts the result using the algorithm and key specified by the SA Appends to the front of this encrypted datagram a field called “ESP header”; the resulting package is called the “enchilada” Creates an authentication MAC over the whole enchilada using the algorithm and key specified in the SA Appends the MAC to the back of the enchilada forming the payload Finally, creates a brand new IP header with all the classic IPv4 header fields, which it appends before the payload The ESP header, which is sent in the clear and consists of two fields: the SPI and the sequence number field. IP addresses that are in the new IP header are set to the source and destination router interfaces at the two ends of the tunnels which is the gateway router of the sending host and receiving host. the protocol number in this new IPv4 header field is 50, designating that this is an IPsec datagram using the ESP protocol. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:29:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.6 Wired Equivalent Privacy (WEP) The IEEE 802.11 WEP protocol uses a symmetric shared key approach. WEP does not specify a key management algorithm. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:30:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.6.1 WEP Authentication Authentication is carried out as ­follows: A wireless host requests authentication by an access point. The access point responds to the authentication request with a 128-byte nonce value. The wireless host encrypts the nonce using the symmetric key that it shares with the access point. The access point decrypts the host-encrypted nonce. If the decrypted nonce matches the nonce value originally sent to the host, then the host is authenticated by the access point ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:30:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.6.2 WEP Data Encryption The WEP data encryption algorithm:A secret 40-bit symmetric key, $K_S$, is assumed to be known by both a host and the access point. In addition, a 24-bit Initialization Vector (IV) is appended to the 40-bit key to create a 64-bit key that will be used to encrypt a single frame: First a 4-byte CRC value is computed for the data payload The payload and the four CRC bytes are then encrypted using the RC4 stream cipher:XOR-ing the ith byte of data, $d_i$ , with the ith key $K_i^{IV}$ to produce the ith byte of ciphertext, $c_i$ : $$ ci=di \\oplus k_i^{IV} $$ The receiver takes the secret 40-bit symmetric key that it shares with the sender, appends the IV, and uses the resulting 64-bit key (which is identical to the key used by the sender to perform encryption) to decrypt the frame: $$ di=ci \\oplus k_i^{IV} $$ ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:30:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.7 Operational Security ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:31:0","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.7.1 Firewalls Firewalls can be classified in three categories: traditional packet filters, stateful filters, and application gateways. 8.7.1.1 Traditional Packet Filters A traditional packet filter examines each datagram in isolation, determining whether the datagram should be allowed to pass or should be dropped based on package structure. 8.7.1.2 Stateful filters Stateful filters actually track TCP connections, and use this knowledge to make ­filtering decisions: Create a connection table to track all ongoing TCP connections.(This is possible because the firewall can observe the beginning of a new connection by observing a three-way handshake (SYN, SYNACK, and ACK); and it can observe the end of a connection when it sees a FIN packet for the connection. ) the stateful filter includes a new column, “check connection” in its access control list to indicate that such connection should be checked by connection table. When a user sends a TCP SYN segment, the user’s TCP connection gets recorded in the connection table On receiving a TCP packet, the firewall checks the connection table to see if this packet is part of an ongoing TCP connection, to decide whether to reject or accept the packet. 8.7.1.3 Application Gateway An application gateway is an application-specific server through which specific application data must pass.Such a policy can be accomplished by implementing a combination of a packet filter (in a router) and a application gateway server: A filter configuration forces all outbound connections concernd with specific application to pass through the application gateway. Consider an internal user wants to use the application to connect to the outside world. The user must first set up a session with the application gateway. An application running in the gateway, which listens for incoming sessions, prompts the user for a user ID and password. When the user supplies this information, the application gateway checks to see if the user has permission . If not, the connection from the internal user to the gateway is terminated by the gateway. If the user has permission, then the gateway acts as a proxy server to relay messages between the user and the external host. ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:31:1","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":"8.7.2 Deep packet inspection Deep packet inspection:look beyond the header fields and into the actual application data that the packets carry. A device that generates alerts when it observes potentially malicious traffic is called an intrusion detection system (IDS) IDS systems are broadly classified as either signature-based systems or ­anomaly-based systems: A signature-based IDS sniffs every packet passing by it, comparing each sniffed packet with the signatures in its database. If a packet (or series of packets) matches a signature in the database, the IDS generates an alert. An anomaly-based IDS creates a traffic profile as it observes traffic in normal operation. It then looks for packet streams that are statistically unusual ","date":"2023-10-21","objectID":"/computer_networking_topdownapproach/:31:2","tags":null,"title":"Computer Networking Top Down Approach","uri":"/computer_networking_topdownapproach/"},{"categories":["college"],"content":" 1 实验内容 底层用 Verilog HDL 语言实现简单的处理器模块设计。 调用存储器模块设计 64×8 的存储器模块。 顶层用原理图方式将简单的处理器模块和存储器模块连接形成简单的计算机核心 部件组成的系统。 将指令序列存入存储器，然后分析指令执行流程 2 代码/原理图 Warning 由于本次使用modelsim-altera仿真，仿真时顶层不能用原理图，必须要转换为Verilog文件。 ","date":"2023-06-16","objectID":"/computer_organization_course_design/:0:0","tags":null,"title":"西南交通大学计组实验-课程设计","uri":"/computer_organization_course_design/"},{"categories":["college"],"content":"2.1 顶层文件 ","date":"2023-06-16","objectID":"/computer_organization_course_design/:1:0","tags":null,"title":"西南交通大学计组实验-课程设计","uri":"/computer_organization_course_design/"},{"categories":["college"],"content":"2.1.1 设计用原理图 ","date":"2023-06-16","objectID":"/computer_organization_course_design/:1:1","tags":null,"title":"西南交通大学计组实验-课程设计","uri":"/computer_organization_course_design/"},{"categories":["college"],"content":"2.1.2 仿真用Verilog代码 // Copyright (C) 1991-2013 Altera Corporation // Your use of Altera Corporation's design tools, logic functions // and other software and tools, and its AMPP partner logic // functions, and any output files from any of the foregoing // (including device programming or simulation files), and any // associated documentation or information are expressly subject // to the terms and conditions of the Altera Program License // Subscription Agreement, Altera MegaCore Function License // Agreement, or other applicable license agreement, including, // without limitation, that your use is for the sole purpose of // programming logic devices manufactured by Altera and sold by // Altera or its authorized distributors. Please refer to the // applicable agreement for further details. // PROGRAM \"Quartus II 64-Bit\" // VERSION \"Version 13.1.0 Build 162 10/23/2013 SJ Full Version\" // CREATED \"Fri Jun 09 00:49:29 2023\" module computer( reset, clk, Write_read, overflow, M_addr, M_data_out, M_q, PC, R0, R1, R2, R3, state ); input wire reset; input wire clk; output wire Write_read; output wire overflow; output wire [11:0] M_addr; output wire [7:0] M_data_out; output wire [7:0] M_q; output wire [7:0] PC; output wire [7:0] R0; output wire [7:0] R1; output wire [7:0] R2; output wire [7:0] R3; output wire [2:0] state; wire [11:0] M_addr_ALTERA_SYNTHESIZED; wire [7:0] M_data_in; wire [7:0] M_data_out_ALTERA_SYNTHESIZED; wire we; cpu b2v_inst2( .clk(clk), .reset(reset), .M_data_in(M_data_in), .Write_read(we), .overflow(overflow), .M_addr(M_addr_ALTERA_SYNTHESIZED), .M_data_out(M_data_out_ALTERA_SYNTHESIZED), .PC(PC), .R0(R0), .R1(R1), .R2(R2), .R3(R3), .state(state)); defparam b2v_inst2.Add = 4'b0011; defparam b2v_inst2.And = 4'b0101; defparam b2v_inst2.Idle = 4'b0000; defparam b2v_inst2.Jmp = 4'b1011; defparam b2v_inst2.Jz = 4'b1100; defparam b2v_inst2.Load = 4'b0001; defparam b2v_inst2.Move = 4'b0010; defparam b2v_inst2.Or = 4'b0110; defparam b2v_inst2.Read = 4'b1101; defparam b2v_inst2.Shl = 4'b1001; defparam b2v_inst2.Shr = 4'b1000; defparam b2v_inst2.st_0 = 3'b000; defparam b2v_inst2.st_1 = 3'b001; defparam b2v_inst2.st_2 = 3'b010; defparam b2v_inst2.st_3 = 3'b011; defparam b2v_inst2.st_4 = 3'b100; defparam b2v_inst2.Stop = 4'b1111; defparam b2v_inst2.Sub = 4'b0100; defparam b2v_inst2.Swap = 4'b1010; defparam b2v_inst2.Write = 4'b1110; defparam b2v_inst2.Xor = 4'b0111; mif2 b2v_inst3( .clock(clk), .wren(we), .address(M_addr_ALTERA_SYNTHESIZED[5:0]), .data(M_data_out_ALTERA_SYNTHESIZED), .q(M_data_in)); assign Write_read = we; assign M_addr = M_addr_ALTERA_SYNTHESIZED; assign M_data_out = M_data_out_ALTERA_SYNTHESIZED; assign M_q = M_data_in; endmodule ","date":"2023-06-16","objectID":"/computer_organization_course_design/:1:2","tags":null,"title":"西南交通大学计组实验-课程设计","uri":"/computer_organization_course_design/"},{"categories":["college"],"content":"2.2 RAM初始化内容（mif2.mem） addr +0 +1 +2 +3 +4 +5 +6 +7 0 00 15 24 D0 1F 94 31 E0 8 1E 41 A1 61 84 51 28 2D 16 7B D0 1E C0 19 D0 1D B0 24 13 F0 00 00 00 00 00 39 32 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 ","date":"2023-06-16","objectID":"/computer_organization_course_design/:2:0","tags":null,"title":"西南交通大学计组实验-课程设计","uri":"/computer_organization_course_design/"},{"categories":["college"],"content":"2.3 cpu模块 module cpu( clk, reset, M_data_in, Write_read, M_addr, M_data_out, overflow, R0,R1,R2,R3,PC,state ); //wire [15:0]IR; //wire [7:0] A,R0,R1,R2,R3,PC,RX,RY; //choose_rx_ry crr(clk,IR,R0,R1,R2,R3,RX,RY); //status_machine sm(M_data_in,clk,reset,Write_read,M_addr,M_data_out); //assign M_addr=MAR; //assign M_data_out=MDR; parameter Idle =4'b0000; parameter Load =4'b0001; parameter Move =4'b0010; parameter Add =4'b0011; parameter Sub =4'b0100; parameter And =4'b0101; parameter Or =4'b0110; parameter Xor =4'b0111; parameter Shr =4'b1000; parameter Shl =4'b1001; parameter Swap =4'b1010; parameter Jmp =4'b1011; parameter Jz =4'b1100; parameter Read =4'b1101; parameter Write=4'b1110; parameter Stop =4'b1111; parameter st_0 = 3'b000; parameter st_1 = 3'b001; parameter st_2 = 3'b010; parameter st_3 = 3'b011; parameter st_4 = 3'b100; input clk,reset; input [7:0] M_data_in; output reg [7:0] R0=8'h00,R1=8'h00,R2=8'h00,R3=8'h00,PC=8'h00; output reg overflow; reg [7:0]A=8'h00,RX,RY; //reg [7:0] MDR; reg [15:0] IR=8'h00; //reg[11:0] MAR; output reg Write_read; output reg[11:0]M_addr=12'h000; output reg[7:0]M_data_out=8'h00; output reg [2:0] state=st_0; wire [3:0]OP; reg [2:0] step_counter=3'b000; reg flag1=1'b1; assign OP=IR[15:12]; always@(posedge clk or negedge reset) begin if(!reset) begin R0\u003c=0; R1\u003c=0; R2\u003c=0; R3\u003c=0; RX\u003c=0; RY\u003c=0; PC\u003c=0; M_addr\u003c=0; M_data_out\u003c=0; A\u003c=0; state\u003c=st_0; flag1\u003c=1'b1; end else if(clk) begin //按照步长划分状态，而每个状态又有子状态 //步长为0时执行取指令操作 if(step_counter==3'b000) begin IR\u003c={M_data_in,8'h00}; Write_read\u003c=0; PC\u003c=PC+1; flag1\u003c=1'b1; step_counter\u003c=step_counter+1; end //步长为2时执行取操作数和运算 else if(step_counter==3'b001) begin case(state) //根据寄存器选择RX，RY st_0: begin if(flag1) begin case(IR[11:10]) 2'b00:begin RX\u003c=R0; end 2'b01:begin RX\u003c=R1; end 2'b10:begin RX\u003c=R2; end 2'b11:begin RX\u003c=R3; end endcase case(IR[9:8]) 2'b00:begin RY\u003c=R0; end 2'b01:begin RY\u003c=R1; end 2'b10:begin RY\u003c=R2; end 2'b11:begin RY\u003c=R3; end endcase flag1\u003c=0; end else begin A\u003c=RY; M_addr\u003c=PC; state\u003c=st_1; flag1\u003c=1; end end //以下内容参照实验参考书的表3 st_1: begin if(flag1) begin Write_read\u003c=0; case(OP) Load: R0\u003c={4'h0,IR[11:8]}; Move: RX\u003c=A; Shr: RX\u003c={1'b0,RX[7:1]}; Shl: RX\u003c={RX[6:0],1'b0}; Add: RX\u003c=RX+A; Sub: RX\u003c=RX-A; And: RX\u003c=RX\u0026A; Or: RX\u003c=RX|A; Xor: RX\u003c=RX^A; Swap: RY\u003c=RX; endcase flag1\u003c=0; end else begin if(OP==Stop) begin state\u003c=st_1; end else if(OP==Swap||OP==Jmp||OP==Jz||OP==Read||OP==Write) begin state\u003c=st_2; end else begin if(OP==Load) step_counter\u003c=0; else step_counter\u003c=step_counter+1; state\u003c=st_0; end flag1\u003c=1; end end st_2: begin if(flag1) begin Write_read\u003c=0; case(OP) Swap:RX\u003c=A; Jmp: begin IR[7:0]\u003c=M_data_in; end Read: begin IR[7:0]\u003c=M_data_in; end Write: begin IR[7:0]\u003c=M_data_in; end Jz: begin if(R0==0) begin IR[7:0]\u003c=M_data_in; end end endcase flag1\u003c=0; if(OP!=Swap) PC\u003c=PC+1; end else begin M_data_out\u003c=R0; if(OP==Swap) begin state\u003c=st_0; step_counter\u003c=step_counter+1; end else begin if(OP==Jmp||OP==Read||OP==Write) M_addr\u003c=IR[11:0]; else if(OP==Jz \u0026\u0026 R0==0) M_addr\u003c=IR[11:0]; else M_addr\u003c=PC; state\u003c=st_3; end flag1\u003c=1; end end st_3: begin if(flag1) begin if(OP==Jmp) PC\u003c=IR[11:0]; else if(OP==Jz\u0026\u0026R0==0) PC\u003c=IR[11:0]; else if(OP==Read) Write_read\u003c=0; else if(OP==Write) Write_read\u003c=1; flag1\u003c=0; end else begin if(OP==Read||OP==Write) M_addr\u003c=PC; if(OP==Jmp||OP==Jz) begin state\u003c=st_0; step_counter\u003c=step_counter+1; end else state\u003c=st_4; Write_read\u003c=0; flag1\u003c=1; end end st_4: begin if(flag1) begin if(OP==Read) R0\u003c=M_data_in; flag1\u003c=0; end else begin Write_read\u003c=0; state\u003c=st_0; if(OP==Read) step_counter\u003c=3'b000; else step_counter\u003c=step_counter+1; flag1\u003c=1; end end endcase end //将RX,RY的值赋值回通用寄存器 else if(step_counter==3'b010) begin case(IR[11:10]) 2'b00:begin R0\u003c=RX; end 2'b01:begin R1\u003c=RX; end 2'b10:begin R2\u003c=RX; end 2'b11:begin R3\u003c=RX; end endcase case(IR[9:8]) 2'b00:begin R0\u003c=RY; end 2'b01:begin R1\u003c=RY; end 2'b10:begin R2\u003c=RY; end 2'b11:begin R3\u003c=RY; end endcase step_counter\u003c=3'b000; end end end endmodule 3 仿真波形 4 源码已上传github github仓库：  swjtu_computer_organization_cours","date":"2023-06-16","objectID":"/computer_organization_course_design/:3:0","tags":null,"title":"西南交通大学计组实验-课程设计","uri":"/computer_organization_course_design/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课。 Success 代码和输出已经过助教验收。 Success 2023年录制的操作视频已失效，视频已重新于2025年5月14日录制上传 Frequency 使用时必须将clk频率设置成1M Special thanks👍🏿 感谢何同学提供的参考代码和实验要求！ Special thanks👍🏿 感谢李同学和舍友为重新录制视频提供的帮助！ 0 完结撒花🏵️ 🎉恭喜你已完成所有的计组实验，很有幸被你发现我的博客，我在校的时间里会一直维护计组实验的相关内容并进行答疑。也欢迎大家提出更好的改进建议！ ⭐如果你喜欢我的设计的话，可以在github上follow我并对我的仓库点star，这会让它们被更多的校友发现，你的支持是我最大的动力！ 🧠我在学习过程中也会发布其他技术相关的文章，如果你感兴趣欢迎关注！ 👩🏿‍🎓最后祝各位同学学习顺利，前程似锦！ 1 实验内容 利用quartus提供的IP Core和FPGA内部存储器，完成指令存储器与取指部分设计。 2 代码/原理图 ","date":"2023-05-29","objectID":"/computer_organization_exp8/:0:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.1 顶层文件 ","date":"2023-05-29","objectID":"/computer_organization_exp8/:1:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.2 PC寄存器 此处防抖参考了咕咕与瓜的博客： https://blog.csdn.net/yck1716/article/details/124656502 module pc_function(input clk,input pc_clr,input manual_plus,output reg[7:0]PC ); parameter S1 = 2'b00, //松开稳定时 S2 = 2'b01, //按下毛刺时 S3 = 2'b10, //按下稳定时 S4 = 2'b11; //松开毛刺时 /*===============================================================20ms计数器=============================================================*/ reg en_counter; //计数使能 reg [19:0] cnt; //计数 reg cnt_full; //只有当计数使能为高电平的时候，计数器才会计数 always@(posedge clk or negedge pc_clr) begin if(!pc_clr) cnt \u003c= 0; else if(en_counter) cnt \u003c= cnt + 1'b1; else cnt \u003c= 0; end //计数满信号（数数到1000000计数满时间到。1000000是1M，当基于clk信号频率进行计数时，cnt_full走过(1/50M)s*1M的时间，即20ms） always@(posedge clk or negedge pc_clr) //当clk接50MHz的信号时，相当于clk在1s内进行了50M次计数，相邻上升沿相间(1/50M)s begin if(!pc_clr) cnt_full \u003c= 1'b0; else if(cnt == 20'd10000) cnt_full \u003c= 1'b1; else cnt_full \u003c= 1'b0; end /*==============================================================判断边沿模块=============================================================*/ reg key_tmp0,key_tmp1; always@(posedge clk or negedge pc_clr) begin if(!pc_clr) begin key_tmp0 \u003c= 1'b1; key_tmp1 \u003c= 1'b1; end else begin key_tmp0 \u003c= manual_plus; //manual_plus按键输入 key_tmp1 \u003c= key_tmp0; end end wire pedge,nedge; assign nedge = (!key_tmp0) \u0026 key_tmp1; //下降沿（下一clk时为0，上一clk时为1） assign pedge = key_tmp0 \u0026 (!key_tmp1); //上升沿（下一clk时为1，上一clk时为0） /*=============================================================状态机模块================================================================*/ reg [1:0] state; reg key_flag; //经消抖后可确认的按下动作 reg key_state; //按键状态，高电平为未按下，低电平为按下状态 always@(posedge clk or negedge pc_clr) begin if(!pc_clr) begin state \u003c= S1; en_counter \u003c= 1'b0; //计数器归零 key_state \u003c= 1'b1; //按键未按下 key_flag \u003c= 1'b0; end else begin case(state) S1: //高电平（松开稳定） begin key_flag \u003c= 1'b0; //按键未按下，不计 key_state \u003c= 1'b1; //按键松开状态 en_counter \u003c= 1'b0; //计数器归零 if(nedge) //检测到下降沿，进入下一个状态同时打开计数器 begin state \u003c= S2; en_counter \u003c= 1'b1; //计数器使能 end else state \u003c= state; //保持目前状态 end S2: //下降沿抖动（按下毛刺） if(cnt_full) //计数满，说明达到稳定状态，关闭计数器，进入下一个状态 begin state \u003c= S3; en_counter \u003c= 1'b0; //计数器归零 key_flag \u003c= 1'b1; //按键可确认已按下 key_state \u003c= 1'b0; //按键按下状态 end else if(pedge) //检测到上升沿（毛刺），跳回S1状态同时关闭计数器 begin en_counter \u003c= 1'b0; //计数器归零 state \u003c= S1; end else state \u003c= state; //保持目前状态 S3: //低电平（按下稳定） begin key_flag \u003c= 1'b0; //一个按键周期测到一次就行，现在可清零了（后面代码编写只在意其posedge） if(pedge) //检测到上升沿，进入下一个状态同时打开计数器 begin state \u003c= S4; en_counter \u003c= 1'b1; //计数器使能 end else state \u003c= state; //保持目前状态 end S4: //上升沿抖动（松开毛刺） if(cnt_full) begin state \u003c= S1; key_state \u003c= 1'b1; end else if(nedge) begin en_counter \u003c= 1'b0; //计数器归零 state \u003c= S3; end else state \u003c= state; //保持目前状态 default: state \u003c= S1; endcase end end always@(posedge key_flag,negedge pc_clr) //key_flag：经消抖后可确认的按下动作 begin if(!pc_clr) PC \u003c= 0; else PC\u003c=PC+1; end endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:2:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.3 数码管 module segment_displays(clk,N,seg,sel); input clk; input [31:0] N; output reg [7:0] seg; output reg [2:0] sel; reg [3:0]num; always@(posedge clk) begin sel\u003c=sel+1; case(sel) 3'b110:num\u003c=N[3:0]; 3'b101:num\u003c=N[7:4]; 3'b100:num\u003c=N[11:8]; 3'b011:num\u003c=N[15:12]; 3'b010:num\u003c=N[19:16]; 3'b001:num\u003c=N[23:20]; 3'b000:num\u003c=N[27:24]; 3'b111:num\u003c=N[31:28]; endcase end always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00000000; //\"dark\" endcase end endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:3:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.4 矩阵键盘 module keymodule( input clk, input [3:0] KEY_R, output reg[3:0] KEY_C = 4'b0111, output reg[7:0] out= 8'hxx, input key_clr // output reg[2:0] press_times=3'b000 ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin // if(S==3'b000) // begin // out\u003c=16'h0000; // end // else if(!key_clr) begin out\u003c=16'h0000; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase end begin if(num == 5'b1_0000) begin if(count_num == 32'b0)begin count_num = 32'd100001;end count_num = count_num + 1'b1; end else if(count_num \u003e 32'd100000) begin count_num = 32'b1; //移位 begin out=out\u003c\u003c4; out[3:0] = num[3:0]; end end end end end endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:4:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.5 ROM的内容 addr +0 +1 +2 +3 +4 +5 +6 +7 0 7600 8300 7340 0000 0000 0000 0000 0000 8 0000 0000 0000 0000 0000 0000 0000 0000 16 0000 0000 0000 0000 0000 0000 0000 0000 24 0000 0000 0000 0000 0000 0000 0000 0000 32 0000 0000 0000 0000 0000 0000 0000 0000 40 0000 0000 0000 0000 0000 0000 0000 0000 48 0000 0000 0000 0000 0000 0000 0000 0000 56 0000 0000 0000 0000 0000 0000 0000 0000 64 0000 0000 0000 0000 0000 0000 0000 0000 72 0000 0000 0000 0000 0000 0000 0000 0000 80 0000 0000 0000 0000 0000 0000 0000 0000 88 0000 0000 0000 0000 0000 0000 0000 0000 96 0000 0000 0000 0000 0000 0000 0000 0000 104 0000 0000 0000 0000 0000 0000 0000 0000 112 0000 0000 0000 0000 0000 0000 0000 0000 120 0000 0000 0000 0000 0000 0000 0000 0000 128 0000 0000 0000 0000 0000 0000 0000 0000 136 0000 0000 0000 0000 0000 0000 0000 0000 144 0000 0000 0000 0000 0000 0000 0000 0000 152 0000 0000 0000 0000 0000 0000 0000 0000 160 0000 0000 0000 0000 0000 0000 0000 0000 168 0000 0000 0000 0000 0000 0000 0000 0000 176 0000 0000 0000 0000 0000 0000 0000 0000 184 0000 0000 0000 0000 0000 0000 0000 0000 192 0000 0000 0000 0000 0000 0000 0000 0000 200 0000 0000 0000 0000 0000 0000 0000 0000 208 0000 0000 0000 0000 0000 0000 0000 0000 216 0000 0000 0000 0000 0000 0000 0000 0000 224 0000 0000 0000 0000 0000 0000 0000 0000 232 0000 0000 0000 0000 0000 0000 0000 0000 240 0000 0000 0000 0000 0000 0000 0000 0000 248 0000 0000 0000 0000 0000 0000 0000 0000 ","date":"2023-05-29","objectID":"/computer_organization_exp8/:5:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.6 选择ALU的操作数 module choose_opts( input clk, input [7:0]R0, input [7:0]R1, input [7:0]R2, input [7:0]R3, input [3:0]choose_reg, output [15:0] res ); reg [7:0]opt1,opt2; initial begin opt1\u003c=8'b0000_0000; opt2\u003c=8'b0000_0000; end always@(posedge clk) begin case(choose_reg[3:2]) 2'b00:opt1\u003c=R0; 2'b01:opt1\u003c=R1; 2'b10:opt1\u003c=R2; 2'b11:opt1\u003c=R3; endcase case(choose_reg[1:0]) 2'b00:opt2\u003c=R0; 2'b01:opt2\u003c=R1; 2'b10:opt2\u003c=R2; 2'b11:opt2\u003c=R3; endcase end assign res={opt1,opt2}; endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:6:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.7 寄存器组 module exp5( input clk, input [1:0]RA, input wr, input rd, input [1:0]M, input clr, input manual_plus, input [7:0] key_out, input [7:0] res_alu, input [1:0] res_dest, input enact, output [7:0] R0, output [7:0] R1, output [7:0] R2, output [7:0] R3, output [7:0] PC ); wire [7:0] DATA_INPUT; assign DATA_INPUT=key_out; pc_function pf (clk,clr,manual_plus,PC); reg_function rf (clk,wr,rd,RA,DATA_INPUT,R0,R1,R2,R3,res_alu,res_dest,enact); endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:7:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.8 通用寄存器 module reg_function( input clk, input wr, input rd, input [1:0] RA, input [7:0] DATA_INPUT, output reg[7:0]R0, output reg[7:0]R1, output reg[7:0]R2, output reg[7:0]R3, input [7:0] res_alu, input [1:0] res_dest, input enact ); always@(negedge clk) begin if(res_dest==2'b00\u0026\u0026!enact) begin R0\u003c=res_alu; end else if(res_dest==2'b01\u0026\u0026!enact) begin R1\u003c=res_alu; end else if(res_dest==2'b10\u0026\u0026!enact) begin R2\u003c=res_alu; end else if(res_dest==2'b11\u0026\u0026!enact) begin R3\u003c=res_alu; end else begin case(RA) 2'b00: begin if(wr==0\u0026\u0026rd==1) begin R0\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R0\u003c=res_alu; end end 2'b01: begin if(wr==0\u0026\u0026rd==1) begin R1\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R1\u003c=res_alu; end end 2'b10: begin if(wr==0\u0026\u0026rd==1) begin R2\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R2\u003c=res_alu; end end 2'b11: begin if(wr==0\u0026\u0026rd==1) begin R3\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R3\u003c=res_alu; end end endcase end end endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:8:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.9 运算器 module exp4( input clk, input [2:0]S, input cin, input [15:0] operators, output exceed, output [15:0] ans, output [7:0] X, output [7:0] Y, output [7:0] alu_res ); midware mw(operators,X,Y,clk); assign alu_res=ans[7:0]; manipulate man(clk,S,X,Y,cin,ans,exceed); endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:9:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.10 运算器的计算功能 module manipulate( input clk, input [2:0]S, input [7:0]X, input [7:0]Y, input cin, output reg[15:0]ans, output reg exceed ); initial begin ans\u003c=8'h00; end always@(posedge clk) begin case(S) 3'b000:ans\u003c=16'b0000_0000_0000_0000; 3'b001:ans\u003c={8'b0000_0000,X\u0026Y}; 3'b010:ans\u003c={8'b0000_0000,X|Y}; 3'b011:ans\u003c={8'b0000_0000,X^Y}; 3'b100: begin ans\u003c=X+Y+(cin?1'b0:1'b1); end 3'b101:ans\u003c={8'b0000_0000,X[6:0],1'b0}; 3'b110:ans\u003c={8'b0000_0000,1'b0,X[7:1]}; 3'b111:ans\u003c={8'b0000_0000,((X\u003e\u003e7)\u00261)?1:0,X[7:1]}; endcase end always@(posedge clk) begin if(S==3'b100) begin if( ans[8]^ans[7] ) exceed\u003c=1; else exceed\u003c=0; end else exceed\u003c=0; end endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:10:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.11 运算器的中间件 module midware( input [15:0]key_out, output reg [7:0] X, output reg [7:0] Y, input clk ); always@(posedge clk) begin X\u003c=key_out[15:8]; Y\u003c=key_out[7:0]; end endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:11:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.12 取指令并向各模块发送信号 module execute( input clk, input [15:0] order, input manual_plus, output reg[3:0] choose_reg, output reg[2:0] S, output reg[1:0] res_dest ); always@(posedge clk) begin case(order[15:12]) 4'b0111: begin S\u003c=3'b011; choose_reg\u003c=order[11:8]; res_dest\u003c=order[7:6]; end 4'b1000: begin S\u003c=3'b110; choose_reg\u003c={order[11:10],2'b00}; res_dest\u003c=order[9:8]; end default: begin S\u003c=S; choose_reg\u003c=choose_reg; res_dest\u003c=res_dest; end endcase end endmodule ","date":"2023-05-29","objectID":"/computer_organization_exp8/:12:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":"2.14 页面切换 module page_switch( input clk, input [2:0]switch_buttons, input [7:0]R0, input [7:0]R1, input [7:0]R2, input [7:0]R3, input [7:0]pc, input [15:0] order, input [31:0]alu_N, output reg[31:0] N, output reg[1:0] status ); //reg status[1:0]=2'b00; initial begin status\u003c=2'b00; end always@(posedge clk) begin //N\u003c={R0,R1,R2,R3}; casex(switch_buttons) 3'bxx0: status\u003c=2'b00; 3'bx01: status\u003c=2'b01; 3'b011: status\u003c=2'b10; default: status\u003c=status; endcase case(status) 2'b00:N\u003c={R0,R1,R2,R3}; 2'b01:N\u003c={order,8'h00,pc}; 2'b10:N\u003c=alu_N; endcase end endmodule 3 引脚分配 4 仿真波形 5 源码已上传github github仓库：  swjtu_computer_organization_exp8_cmd_rdexec 6 上机操作视频 ","date":"2023-05-29","objectID":"/computer_organization_exp8/:13:0","tags":null,"title":"西南交通大学计组实验8-指令分析与执行","uri":"/computer_organization_exp8/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课。 Success 代码和输出已通过助教验收。 Frequency 使用时必须将clk频率设置成100k Special thanks👍🏿 感谢何同学提供的参考代码和实验要求！ 1 实验内容 利用quartus提供的IP Core和FPGA内部存储器，完成指令存储器与取指部分设计。 2 代码/原理图 ","date":"2023-05-23","objectID":"/computer_organization_exp7/:0:0","tags":null,"title":"西南交通大学计组实验7-指令存储器与取指令部分的设计","uri":"/computer_organization_exp7/"},{"categories":["college"],"content":"2.1 顶层文件 ","date":"2023-05-23","objectID":"/computer_organization_exp7/:1:0","tags":null,"title":"西南交通大学计组实验7-指令存储器与取指令部分的设计","uri":"/computer_organization_exp7/"},{"categories":["college"],"content":"2.2 PC寄存器 module pc_function(input clk,input pc_clr,input [7:0]DATA_INPUT,input [1:0]M,output reg[7:0]PC ); wire [31:0] second_counter; count_second cs (clk,second_counter); always@(negedge clk or negedge pc_clr) begin if(!pc_clr) begin PC\u003c=8'h00; end else if(!clk) begin case(M) 2'b00: begin if(!second_counter) PC\u003c=PC+1; end 2'b01: begin if(!second_counter) PC\u003c=PC-1; end 2'b10: begin PC\u003c=PC; end 2'b11: begin PC\u003c=DATA_INPUT; end endcase end end endmodule ","date":"2023-05-23","objectID":"/computer_organization_exp7/:2:0","tags":null,"title":"西南交通大学计组实验7-指令存储器与取指令部分的设计","uri":"/computer_organization_exp7/"},{"categories":["college"],"content":"2.3 计时器 module count_second(input clk,output reg[31:0] second_counter=32'h0000_0000); always@(negedge clk) begin if(second_counter==32'd100000) //if(second_counter==32'd1) second_counter \u003c= 0; else second_counter\u003c=second_counter+1; end endmodule ","date":"2023-05-23","objectID":"/computer_organization_exp7/:3:0","tags":null,"title":"西南交通大学计组实验7-指令存储器与取指令部分的设计","uri":"/computer_organization_exp7/"},{"categories":["college"],"content":"2.4 数码管 module segment_displays(clk,N,seg,sel); input clk; input [31:0] N; output reg [7:0] seg; output reg [2:0] sel; reg [3:0]num; always@(posedge clk) begin sel\u003c=sel+1; case(sel) 3'b110:num\u003c=N[3:0]; 3'b101:num\u003c=N[7:4]; 3'b100:num\u003c=N[11:8]; 3'b011:num\u003c=N[15:12]; 3'b010:num\u003c=N[19:16]; 3'b001:num\u003c=N[23:20]; 3'b000:num\u003c=N[27:24]; 3'b111:num\u003c=N[31:28]; endcase end always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00000000; //\"dark\" endcase end endmodule ","date":"2023-05-23","objectID":"/computer_organization_exp7/:4:0","tags":null,"title":"西南交通大学计组实验7-指令存储器与取指令部分的设计","uri":"/computer_organization_exp7/"},{"categories":["college"],"content":"2.5 矩阵键盘 module keymodule( input clk, input [3:0] KEY_R, output reg[3:0] KEY_C = 4'b0111, output reg[7:0] out= 8'hxx, input key_clr // output reg[2:0] press_times=3'b000 ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin // if(S==3'b000) // begin // out\u003c=16'h0000; // end // else if(!key_clr) begin out\u003c=16'h0000; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase end begin if(num == 5'b1_0000) begin if(count_num == 32'b0)begin count_num = 32'd100001;end count_num = count_num + 1'b1; end else if(count_num \u003e 32'd100000) begin count_num = 32'b1; //移位 begin out=out\u003c\u003c4; out[3:0] = num[3:0]; end end end end end endmodule ","date":"2023-05-23","objectID":"/computer_organization_exp7/:5:0","tags":null,"title":"西南交通大学计组实验7-指令存储器与取指令部分的设计","uri":"/computer_organization_exp7/"},{"categories":["college"],"content":"2.6 ROM的内容 addr +0 +1 +2 +3 +4 +5 +6 +7 0 0002 0017 002C 0041 0056 006B 0080 0095 8 00AA 00BF 00D4 00E9 00FE 0113 0128 013D 16 0152 0167 017C 0191 01A6 01BB 01D0 01E5 24 01FA 020F 0224 0239 024E 0263 0278 028D 32 02A2 02B7 02CC 02E1 02F6 030B 0320 0335 40 034A 035F 0374 0389 039E 03B3 03C8 03DD 48 03F2 0407 041C 0431 0446 045B 0470 0485 56 049A 04AF 04C4 04D9 04EE 0503 0518 052D 64 0542 0557 056C 0581 0596 05AB 05C0 05D5 72 05EA 05FF 0614 0629 063E 0653 0668 067D 80 0692 06A7 06BC 06D1 06E6 06FB 0710 0725 88 073A 074F 0764 0779 078E 07A3 07B8 07CD 96 07E2 07F7 080C 0821 0836 084B 0860 0875 104 088A 089F 08B4 08C9 08DE 08F3 0908 091D 112 0932 0947 095C 0971 0986 099B 09B0 09C5 120 09DA 09EF 0A04 0A19 0A2E 0A43 0A58 0A6D 128 0A82 0A97 0AAC 0AC1 0AD6 0AEB 0B00 0B15 136 0B2A 0B3F 0B54 0B69 0B7E 0B93 0BA8 0BBD 144 0BD2 0BE7 0BFC 0C11 0C26 0C3B 0C50 0C65 152 0C7A 0C8F 0CA4 0CB9 0CCE 0CE3 0CF8 0D0D 160 0D22 0D37 0D4C 0D61 0D76 0D8B 0DA0 0DB5 168 0DCA 0DDF 0DF4 0E09 0E1E 0E33 0E48 0E5D 176 0E72 0E87 0E9C 0EB1 0EC6 0EDB 0EF0 0F05 184 0F1A 0F2F 0F44 0F59 0F6E 0F83 0F98 0FAD 192 0FC2 0FD7 0FEC 1001 1016 102B 1040 1055 200 106A 107F 1094 10A9 10BE 10D3 10E8 10FD 208 1112 1127 113C 1151 1166 117B 1190 11A5 216 11BA 11CF 11E4 11F9 120E 1223 1238 124D 224 1262 1277 128C 12A1 12B6 12CB 12E0 12F5 232 130A 131F 1334 1349 135E 1373 1388 139D 240 13B2 13C7 13DC 13F1 1406 141B 1430 1445 248 145A 146F 1484 1499 14AE 14C3 14D8 14ED 3 引脚分配 4 仿真波形 5 源码已上传github github仓库：  swjtu_computer_organization_exp7_cmd_reader 6 上机操作视频 Special thanks👍🏿 感谢何同学拍摄了以下这段操作视频！🤗 ","date":"2023-05-23","objectID":"/computer_organization_exp7/:6:0","tags":null,"title":"西南交通大学计组实验7-指令存储器与取指令部分的设计","uri":"/computer_organization_exp7/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课。 Success 代码和输出已通过助教验收。 Frequency 使用时必须将clk频率设置成100k Apr22th bugfixed_1 感谢钦同学和唐同学指出问题，加法部分结果存在问题，我已更正。但至于为什么不能写成ans\u003c=X+Y+~cin原因我不清楚。 1 实验内容 设计运算器，将算术逻辑单元和寄存器组集成 2 代码/原理图 ","date":"2023-05-14","objectID":"/computer_organization_exp6/:0:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.1 顶层文件 ","date":"2023-05-14","objectID":"/computer_organization_exp6/:1:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.2 ALU模块 module exp4( input clk, input [2:0]S, input cin, input [15:0] operators, output exceed, output [15:0] ans, output [7:0] X, output [7:0] Y, output [7:0] alu_res ); midware mw(operators,X,Y,clk); assign N={X,Y,ans}; assign alu_res=ans[7:0]; manipulate man(clk,S,X,Y,cin,ans,exceed); endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:2:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.3 ALU的运算功能 module manipulate( input clk, input [2:0]S, input [7:0]X, input [7:0]Y, input cin, output reg[15:0]ans, output reg exceed ); initial begin ans\u003c=8'h00; end always@(posedge clk) begin case(S) 3'b000:ans\u003c=16'b0000_0000_0000_0000; 3'b001:ans\u003c={8'b0000_0000,X\u0026Y}; 3'b010:ans\u003c={8'b0000_0000,X|Y}; 3'b011:ans\u003c={8'b0000_0000,X^Y}; 3'b100: begin ans\u003c=X+Y+(cin?0:1); end 3'b101:ans\u003c={8'b0000_0000,X[6:0],1'b0}; 3'b110:ans\u003c={8'b0000_0000,1'b0,X[7:1]}; 3'b111:ans\u003c={8'b0000_0000,((X\u003e\u003e7)\u00261)?1:0,X[7:1]}; endcase end always@(posedge clk) begin if(S==3'b100) begin if( ans[8]^ans[7] ) exceed\u003c=1; else exceed\u003c=0; end else exceed\u003c=0; end endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:3:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.4 ALU的中间件 module midware( input [15:0]key_out, output reg [7:0] X, output reg [7:0] Y, input clk ); always@(posedge clk) begin X\u003c=key_out[15:8]; Y\u003c=key_out[7:0]; end endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:4:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.5 寄存器组 module exp5( input clk, input [1:0]RA, input wr, input rd, input [1:0]M, input clr, input [7:0] key_out, input [7:0] res_alu, output [7:0] R0, output [7:0] R1, output [7:0] R2, output [7:0] R3, output [7:0] PC ); wire [7:0] DATA_INPUT; assign DATA_INPUT=key_out; wire [31:0]second_counter; wire [7:0] X,Y; count_second cs (clk,second_counter); pc_function pf (clk,clr,second_counter,DATA_INPUT,M,PC,Y,res_alu); reg_function rf (clk,wr,rd,RA,DATA_INPUT,R0,R1,R2,R3,X,res_alu); endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:5:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.6 寄存器组的计时器 module count_second(input clk,output reg[31:0] second_counter=32'h0000_0000); always@(negedge clk) begin if(second_counter==32'd100000) second_counter \u003c= 0; else second_counter\u003c=second_counter+1; end endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:6:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.7 寄存器组的通用寄存器 module reg_function( input clk, input wr, input rd, input [1:0] RA, input [7:0] DATA_INPUT, output reg[7:0]R0, output reg[7:0]R1, output reg[7:0]R2, output reg[7:0]R3, output reg[7:0]X, input [7:0] res_alu ); always@(negedge clk) begin case(RA) 2'b00: begin X\u003c=R0; if(wr==0\u0026\u0026rd==1) begin R0\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R0\u003c=res_alu; end end 2'b01: begin X\u003c=R1; if(wr==0\u0026\u0026rd==1) begin R1\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R1\u003c=res_alu; end end 2'b10: begin X\u003c=R2; if(wr==0\u0026\u0026rd==1) begin R2\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R2\u003c=res_alu; end end 2'b11: begin X\u003c=R3; if(wr==0\u0026\u0026rd==1) begin R3\u003c=DATA_INPUT; end else if(wr==1\u0026\u0026rd==1) begin R3\u003c=res_alu; end end endcase end endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:7:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.8 PC寄存器 module pc_function(input clk,input clr,input [31:0]second_counter,input [7:0]DATA_INPUT,input [1:0]M,output reg[7:0]PC,output reg[7:0] Y ,input [7:0] res_alu ); always@(negedge clk or negedge clr) begin if(!clr) begin PC\u003c=8'h00; end else if(!clk) begin case(M) 2'b00: begin if(!second_counter) PC\u003c=PC+1; end 2'b01: begin if(!second_counter) PC\u003c=PC-1; end 2'b10: begin PC\u003c=DATA_INPUT; end 2'b11: begin PC\u003c=res_alu; end endcase Y\u003c=PC; end end endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:8:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.9 数码管 module segment_displays(clk,N,seg,sel); input clk; input [31:0] N; output reg [7:0] seg; output reg [2:0] sel; reg [3:0]num; always@(posedge clk) begin sel\u003c=sel+1; case(sel) 3'b110:num\u003c=N[3:0]; 3'b101:num\u003c=N[7:4]; 3'b100:num\u003c=N[11:8]; 3'b011:num\u003c=N[15:12]; 3'b010:num\u003c=N[19:16]; 3'b001:num\u003c=N[23:20]; 3'b000:num\u003c=N[27:24]; 3'b111:num\u003c=N[31:28]; endcase end always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00000000; //\"dark\" endcase end endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:9:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.10 矩阵键盘 module keymodule( input clk, input [3:0] KEY_R, output reg[3:0] KEY_C = 4'b0111, output reg[7:0] out= 8'hxx, input key_clr // output reg[2:0] press_times=3'b000 ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin // if(S==3'b000) // begin // out\u003c=16'h0000; // end // else if(!key_clr) begin out\u003c=16'h0000; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase end begin if(num == 5'b1_0000) begin if(count_num == 32'b0)begin count_num = 32'd100001;end count_num = count_num + 1'b1; end else if(count_num \u003e 32'd100000) begin count_num = 32'b1; //移位 begin out=out\u003c\u003c4; out[3:0] = num[3:0]; end end end end end endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:10:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.11 操作数选择器 module choose_opts( input clk, input [7:0]R0, input [7:0]R1, input [7:0]R2, input [7:0]R3, input [7:0]PC, input flag, input [4:0] choose_reg, output [15:0] res ); reg [7:0]opt1,opt2; initial begin opt1\u003c=8'b0000_0000; opt2\u003c=8'b0000_0000; end always@(posedge clk) begin if(!flag) begin case(choose_reg) 5'b11110:opt1\u003c=R0; 5'b11101:opt1\u003c=R1; 5'b11011:opt1\u003c=R2; 5'b10111:opt1\u003c=R3; 5'b01111:opt1\u003c=PC; default: opt1\u003c=opt1; endcase end else begin case(choose_reg) 5'b11110:opt2\u003c=R0; 5'b11101:opt2\u003c=R1; 5'b11011:opt2\u003c=R2; 5'b10111:opt2\u003c=R3; 5'b01111:opt2\u003c=PC; default: opt2\u003c=opt2; endcase end end assign res={opt1,opt2}; endmodule ","date":"2023-05-14","objectID":"/computer_organization_exp6/:11:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":"2.12 选择数码管要显示的内容 module page_switch( input clk, input [2:0]switch_buttons, input [7:0]R0, input [7:0]R1, input [7:0]R2, input [7:0]R3, input [7:0]pc, input [31:0]alu_N, output reg[31:0] N, output reg[1:0] status ); //reg status[1:0]=2'b00; initial begin status\u003c=2'b00; end always@(posedge clk) begin //N\u003c={R0,R1,R2,R3}; casex(switch_buttons) 3'bxx0: status\u003c=2'b00; 3'bx01: status\u003c=2'b01; 3'b011: status\u003c=2'b10; default: status\u003c=status; endcase case(status) 2'b00:N\u003c={R0,R1,R2,R3}; 2'b01:N\u003c={24'h000000,pc}; 2'b10:N\u003c=alu_N; endcase end endmodule 3 引脚分配 4 仿真波形 5 源码已上传github github仓库：  swjtu_computer_organization_exp6_calculator 6 上机操作视频 Special thanks👍🏿 感谢何同学拍摄了以下这段操作视频！🤗 May31st bugfixed_2 视频中加法操作需要按下cin绑定的按钮，此处已经修改，松开的时候是不进位，按下后才是进位，避免了视频中需要按住按钮的情况。 ","date":"2023-05-14","objectID":"/computer_organization_exp6/:12:0","tags":null,"title":"西南交通大学计组实验6-运算器设计","uri":"/computer_organization_exp6/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课。 Success 代码和输出已通过助教验收。 Frequency 使用时必须将clk频率设置成100k 1 实验内容 CPU寄存器组设计 2 代码/原理图 ","date":"2023-05-04","objectID":"/computer_organization_exp5/:0:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.1 顶层文件 module exp5( input clk, input [1:0]RA, input wr, input rd, input [1:0]M, input clr, input [3:0] KEY_R, input key_clr, output [3:0] KEY_C = 4'b0111, output [7:0] R0, output [7:0] R1, output [7:0] R2, output [7:0] R3, output [7:0] PC, output [2:0] sel, output [31:0] N, output [7:0]codeout ); wire [7:0] DATA_INPUT; wire [7:0] key_out; keymodule km(.clk(clk),.KEY_R(KEY_R),.KEY_C(KEY_C),.out(key_out),.clr(key_clr)); segment_displays sd(.clk(clk),.N(N),.seg(codeout),.sel(sel)); assign DATA_INPUT=key_out; wire [31:0]second_counter; wire [7:0] X,Y; assign N={X,16'h0000,Y}; count_second cs(clk,second_counter); pc_function pf(clk,clr,second_counter,DATA_INPUT,M,PC,Y); reg_function rf(clk,wr,rd,RA,DATA_INPUT,R0,R1,R2,R3,X); endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:1:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.2 根据键盘获取输入 module keymodule( input clk, input [3:0] KEY_R, output reg[3:0] KEY_C = 4'b0111, output reg[7:0] out= 8'hxx, input clr // output reg[2:0] press_times=3'b000 ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin // if(S==3'b000) // begin // out\u003c=16'h0000; // end // else if(clr) begin out\u003c=16'h0000; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase end begin if(num == 5'b1_0000) begin if(count_num == 32'b0)begin count_num = 32'd100001;end count_num = count_num + 1'b1; end else if(count_num \u003e 32'd100000) begin count_num = 32'b1; //移位 begin out=out\u003c\u003c4; out[3:0] = num[3:0]; end end end end end endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:2:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.3 计时器 module count_second(input clk,output reg[31:0] second_counter=32'h0000_0000); always@(negedge clk) begin if(second_counter==32'd100000) second_counter \u003c= 0; else second_counter\u003c=second_counter+1; end endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:3:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.4 8位7段数码管 module segment_displays(clk,N,seg,sel); input clk; input [31:0] N; output reg [7:0] seg; output reg [2:0] sel; reg [3:0]num; always@(posedge clk) begin sel\u003c=sel+1; case(sel) 3'b110:num\u003c=N[3:0]; 3'b101:num\u003c=N[7:4]; 3'b100:num\u003c=N[11:8]; 3'b011:num\u003c=N[15:12]; 3'b010:num\u003c=N[19:16]; 3'b001:num\u003c=N[23:20]; 3'b000:num\u003c=N[27:24]; 3'b111:num\u003c=N[31:28]; endcase end always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00000000; //\"dark\" endcase end endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:4:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.5 PC功能 module pc_function(input clk,input clr,input [31:0]second_counter,input [7:0]DATA_INPUT,input [1:0]M,output reg[7:0]PC,output reg[7:0] Y); always@(negedge clk or posedge clr) begin if(clr) begin PC\u003c=8'h00; end else if(!clk) begin case(M) 2'b00: begin if(!second_counter) PC\u003c=PC+1; end 2'b01: begin if(!second_counter) PC\u003c=PC-1; end 2'b10: begin PC\u003c=DATA_INPUT; end default: begin if(!second_counter) PC\u003c=PC+1; end endcase Y\u003c=PC; end end endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:5:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.6 寄存器功能 module reg_function( input clk, input wr, input rd, input [1:0] RA, input [7:0] DATA_INPUT, output reg[7:0]R0, output reg[7:0]R1, output reg[7:0]R2, output reg[7:0]R3, output reg[7:0]X ); always@(negedge clk) begin case(RA) 2'b00: begin X\u003c=R0; if(wr==0\u0026\u0026rd==1) begin R0\u003c=DATA_INPUT; end end 2'b01: begin X\u003c=R1; if(wr==0\u0026\u0026rd==1) begin R1\u003c=DATA_INPUT; end end 2'b10: begin X\u003c=R2; if(wr==0\u0026\u0026rd==1) begin R2\u003c=DATA_INPUT; end end 2'b11: begin X\u003c=R3; if(wr==0\u0026\u0026rd==1) begin R3\u003c=DATA_INPUT; end end endcase end endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:6:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.7 仿真用顶层文件 module exp5( input clk, input [1:0]RA, input wr, input rd, input [1:0]M, input clr, input [3:0] KEY_R, input key_clr, output [3:0] KEY_C = 4'b0111, output [7:0] R0, output [7:0] R1, output [7:0] R2, output [7:0] R3, output [7:0] PC, output [2:0] sel, output [31:0] N, output [7:0]codeout ); wire [7:0] DATA_INPUT; wire [7:0] key_out; keymodule km(.clk(clk),.KEY_R(KEY_R),.KEY_C(KEY_C),.out(key_out),.clr(key_clr)); segment_displays sd(.clk(clk),.N(N),.seg(codeout),.sel(sel)); assign DATA_INPUT=key_out; // wire [31:0]second_counter; wire [7:0] X,Y; assign N={X,16'h0000,Y}; // count_second cs(clk,second_counter); pc_function pf(clk,clr,DATA_INPUT,M,PC,Y); reg_function rf(clk,wr,rd,RA,DATA_INPUT,R0,R1,R2,R3,X); endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:7:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.8 仿真用key_module module keymodule( input clk, input [3:0] KEY_R, output reg[3:0] KEY_C = 4'b0111, output reg[7:0] out= 8'hxx, input clr // output reg[2:0] press_times=3'b000 ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin // if(S==3'b000) // begin // out\u003c=16'h0000; // end // else if(clr) begin out\u003c=16'h0000; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase out=out\u003c\u003c4; out[3:0] = num[3:0]; end // begin // if(num == 5'b1_0000) // begin // if(count_num == 32'b0)begin // count_num = 32'd100001;end // count_num = count_num + 1'b1; // end // else if(count_num \u003e 32'd100000) // begin // count_num = 32'b1; // // //移位 // begin // out=out\u003c\u003c4; // out[3:0] = num[3:0]; // end // end // end end end endmodule ","date":"2023-05-04","objectID":"/computer_organization_exp5/:8:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":"2.9 仿真用pc_function module pc_function(input clk,input clr,input [7:0]DATA_INPUT,input [1:0]M,output reg[7:0]PC,output reg[7:0] Y); always@(negedge clk or posedge clr) begin if(clr) begin PC\u003c=8'h00; end else if(!clk) begin case(M) 2'b00: begin PC\u003c=PC+1; end 2'b01: begin PC\u003c=PC-1; end 2'b10: begin PC\u003c=DATA_INPUT; end default: begin PC\u003c=PC+1; end endcase Y\u003c=PC; end end endmodule 3 引脚分配 4 仿真波形 5 源码已上传github github仓库：  swjtu_computer_organization_exp5_cpureg ","date":"2023-05-04","objectID":"/computer_organization_exp5/:9:0","tags":null,"title":"西南交通大学计组实验5-CPU寄存器组设计","uri":"/computer_organization_exp5/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课。 Success 代码和输出已通过助教验收。 Frequency 使用时必须将clk频率设置成100k 1 实验内容 8位算术逻辑单元设计 2 代码/原理图 ","date":"2023-04-27","objectID":"/computer_organization_exp4/:0:0","tags":null,"title":"西南交通大学计组实验4-算术逻辑单元（ALU）设计","uri":"/computer_organization_exp4/"},{"categories":["college"],"content":"2.1 顶层文件 module exp4( input clk, input [2:0]S, input cin, input [3:0] KEY_R, output [3:0] KEY_C = 4'b0111, output [15:0] ans, output [31:0] N, output [7:0] codeout, output [2:0] sel, output [7:0] X, output [7:0] Y ); wire clr; wire [15:0] key_out; keymodule km(.clk(clk),.KEY_R(KEY_R),.KEY_C(KEY_C),.out(key_out),.clr(clr)); midware mw(key_out,X,Y,clk); assign N={X,Y,ans}; assign clr=( (S==3'b000)?1:0 ); segment_displays sd(.clk(clk),.N(N),.seg(codeout),.sel(sel),.clr(clr)); manipulate man(clk,S,X,Y,cin,ans); endmodule ","date":"2023-04-27","objectID":"/computer_organization_exp4/:1:0","tags":null,"title":"西南交通大学计组实验4-算术逻辑单元（ALU）设计","uri":"/computer_organization_exp4/"},{"categories":["college"],"content":"2.2 根据键盘获取输入 module keymodule( input clk, input [3:0] KEY_R, output reg[3:0] KEY_C = 4'b0111, output reg[15:0] out= 16'hxxxx, input clr // output reg[2:0] press_times=3'b000 ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin // if(S==3'b000) // begin // out\u003c=16'h0000; // end // else if(clr) begin out\u003c=16'h0000; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase end begin if(num == 5'b1_0000) begin if(count_num == 32'b0)begin count_num = 32'd100001;end count_num = count_num + 1'b1; end else if(count_num \u003e 32'd100000) begin count_num = 32'b1; //移位 begin out=out\u003c\u003c4; out[3:0] = num[3:0]; end end end end end endmodule ","date":"2023-04-27","objectID":"/computer_organization_exp4/:2:0","tags":null,"title":"西南交通大学计组实验4-算术逻辑单元（ALU）设计","uri":"/computer_organization_exp4/"},{"categories":["college"],"content":"2.3 将键盘输入转换为操作数的中间键 module midware( input [15:0]key_out, output reg [7:0] X, output reg [7:0] Y, input clk ); always@(posedge clk) begin X\u003c=key_out[15:8]; Y\u003c=key_out[7:0]; end endmodule ","date":"2023-04-27","objectID":"/computer_organization_exp4/:3:0","tags":null,"title":"西南交通大学计组实验4-算术逻辑单元（ALU）设计","uri":"/computer_organization_exp4/"},{"categories":["college"],"content":"2.4 8位7段数码管 module segment_displays(clk,N,seg,sel,clr); input clk; input [31:0] N; output reg [7:0] seg; output reg [2:0] sel; input clr; reg [3:0]num; always@(posedge clk) begin sel\u003c=sel+1; case(sel) 3'b110:num\u003c=N[3:0]; 3'b101:num\u003c=N[7:4]; 3'b100:num\u003c=N[11:8]; 3'b011:num\u003c=N[15:12]; 3'b010:num\u003c=N[19:16]; 3'b001:num\u003c=N[23:20]; 3'b000:num\u003c=N[27:24]; 3'b111:num\u003c=N[31:28]; endcase end always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00000000; //\"dark\" endcase end endmodule ","date":"2023-04-27","objectID":"/computer_organization_exp4/:4:0","tags":null,"title":"西南交通大学计组实验4-算术逻辑单元（ALU）设计","uri":"/computer_organization_exp4/"},{"categories":["college"],"content":"2.5 运算功能 module manipulate( input clk, input [2:0]S, input [7:0]X, input [7:0]Y, input cin, output reg[15:0]ans ); initial begin ans\u003c=8'h00; end always@(posedge clk) begin case(S) 3'b000:ans\u003c=16'b0000_0000_0000_0000; 3'b001:ans\u003c={8'b0000_0000,X\u0026Y}; 3'b010:ans\u003c={8'b0000_0000,X|Y}; 3'b011:ans\u003c={8'b0000_0000,X^Y}; 3'b100:ans\u003c=X+Y+cin; 3'b101:ans\u003c={8'b0000_0000,X[6:0],1'b0}; 3'b110:ans\u003c={8'b0000_0000,1'b0,X[7:1]}; 3'b111:ans\u003c={8'b0000_0000,((X\u003e\u003e7)\u00261)?1:0,X[7:1]}; endcase end endmodule ","date":"2023-04-27","objectID":"/computer_organization_exp4/:5:0","tags":null,"title":"西南交通大学计组实验4-算术逻辑单元（ALU）设计","uri":"/computer_organization_exp4/"},{"categories":["college"],"content":"2.6 仿真用key_module module keymodule( input clk, input [3:0] KEY_R, output reg[3:0] KEY_C = 4'b0111, output reg[15:0] out= 16'hxxxx, input clr // output reg[2:0] press_times=3'b000 ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; // reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin // if(S==3'b000) // begin // out\u003c=16'h0000; // end // else if(clr) begin out\u003c=16'h0000; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase out=out\u003c\u003c4; out[3:0] = num[3:0]; end // begin //// if(num == 5'b1_0000) //// begin //// if(count_num == 32'b0)begin //// count_num = 32'd100001;end //// count_num = count_num + 1'b1; //// end //// else if(count_num \u003e 32'd100000) //// begin //// count_num = 32'b1; //// //// //移位 //// begin //// out=out\u003c\u003c4; //// out[3:0] = num[3:0]; //// end //// end // out=out\u003c\u003c4; // out[3:0] = num[3:0]; // end end end endmodule 3 引脚分配 4 仿真波形 5 源码已上传github github仓库：  swjtu_computer_organization_exp4_alu ","date":"2023-04-27","objectID":"/computer_organization_exp4/:6:0","tags":null,"title":"西南交通大学计组实验4-算术逻辑单元（ALU）设计","uri":"/computer_organization_exp4/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课。 Apr22th bugfixed_1 感谢keaidebeibei和陶同学指出问题，仿真需要注释掉防抖模块并移动赋值语句的位置。已在github添加分支for_simulate专用于仿真。 Apr22th bugfixed_2 做仿真时发现F8*4A计算错误，发现是没有处理溢出，于是将a改成了9位。 Apr22th update 实现了动态刷新结果，不再需要来回拨动en。 Success 代码和输出已通过助教验收。 Frequency 使用时必须将clk频率设置成100k 1 实验内容 用verilog设计一个8位原码一位乘法运算器。乘数和被乘数均为8位原码，被乘数存放在B寄存器中；C寄存器的初始值存放乘数，运算结束后存放乘积的低位部分；A寄存器用于存放部分积，其初始值是0，运算结束后存放乘积的高位部分。A寄存器和C寄存器可级联在一起右移，CR为乘法步数计数器，在每个时钟信号上升沿处理一位乘法的累加和右移，根据乘数的最低位是否为1决定是加被乘数还是0，乘积的符号位由被乘数和乘数的符号位异或得到 2 代码/原理图 ","date":"2023-04-18","objectID":"/computer_organization_exp3/:0:0","tags":null,"title":"西南交通大学计组实验3-8位原码一位乘法器设计","uri":"/computer_organization_exp3/"},{"categories":["college"],"content":"2.1 顶层文件 module exp3_2( input clk, input [3:0] KEY_R, input clr, input flag1, input flag2, input en, output wire flag3, output [3:0] KEY_C = 4'b0111, output reg[15:0]ans, output reg[8:0] a, output reg[7:0] b, output reg[7:0] c, output reg[3:0] cr_reg, output wire[31:0] N, output [7:0] codeout, output [2:0] sel =3'b000 ); wire [7:0] X,Y; wire [15:0] key_out; keymodule km(.clk(clk),.KEY_R(KEY_R),.clr(clr),.KEY_C(KEY_C),.out(key_out) ); midware (key_out,X,Y); assign flag3=flag1^flag2; assign N={X,Y,ans}; segment_displays sd(.clk(clk),.N(N),.seg(codeout),.sel(sel)); initial begin cr_reg\u003c=4'b0000; end always @(posedge clk) begin if(en) begin if(cr_reg==4'b0000) begin a\u003c=0; b\u003c=X[7:0]; c\u003c=Y[7:0]; cr_reg\u003c=4'b0001; end else begin if(cr_reg==4'b1001) begin ans\u003c={a[7:0],c}; cr_reg\u003c=4'b0000; end else begin if(c\u00261) begin a=a+{1'b0,b}; end c={a\u00261,c[7:1]}; a=a\u003e\u003e1; cr_reg\u003c=cr_reg+1; end end end end endmodule ","date":"2023-04-18","objectID":"/computer_organization_exp3/:1:0","tags":null,"title":"西南交通大学计组实验3-8位原码一位乘法器设计","uri":"/computer_organization_exp3/"},{"categories":["college"],"content":"2.2 根据键盘获取输入 module keymodule( input clk, input [3:0] KEY_R, input clr, output reg[3:0] KEY_C = 4'b0111, output reg[15:0] out= 16'hxxxx ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk,posedge clr) begin if(clr) begin cnt\u003c=2'b0; out\u003c=16'hxxxx; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase end begin if(num == 5'b1_0000) begin if(count_num == 32'b0)begin count_num = 32'd100001;end count_num = count_num + 1'b1; end else if(count_num \u003e 32'd100000) begin count_num = 32'b1; //移位 begin out=out\u003c\u003c4; out[3:0] = num[3:0]; end end end end end endmodule ","date":"2023-04-18","objectID":"/computer_organization_exp3/:2:0","tags":null,"title":"西南交通大学计组实验3-8位原码一位乘法器设计","uri":"/computer_organization_exp3/"},{"categories":["college"],"content":"2.2.1 仿真用key_module module keymodule( input clk, input [3:0] KEY_R, input clr, output reg[3:0] KEY_C = 4'b0111, output reg[15:0] out= 16'hxxxx ); reg [1:0] cnt = 2'b0; reg[4:0] num=5'd16; reg[31:0] count_num=32'b1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk,posedge clr) begin if(clr) begin cnt\u003c=2'b0; out\u003c=16'hxxxx; end else begin cnt = cnt + 1'b1; case (cnt) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase if(KEY_R==4'b1111) begin num=5'd16; end else begin case ({KEY_C, KEY_R}) 8'b1011_1110: num = 5'd0; 8'b0111_0111: num = 5'd1; 8'b1011_0111: num = 5'd2; 8'b1101_0111: num = 5'd3; 8'b0111_1011: num = 5'd4; 8'b1011_1011: num = 5'd5; 8'b1101_1011: num = 5'd6; 8'b0111_1101: num = 5'd7; 8'b1011_1101: num = 5'd8; 8'b1101_1101: num = 5'd9; 8'b1110_0111: num = 5'd10; 8'b1110_1011: num = 5'd11; 8'b1110_1101: num = 5'd12; 8'b1110_1110: num = 5'd13; 8'b0111_1110: num = 5'd14; 8'b1101_1110: num = 5'd15; endcase begin out=out\u003c\u003c4; out[3:0] = num[3:0]; end //我不知道为什么必须要用begin end把赋值语句框住。我做的时候没有框住就出不来。 end end end endmodule ","date":"2023-04-18","objectID":"/computer_organization_exp3/:2:1","tags":null,"title":"西南交通大学计组实验3-8位原码一位乘法器设计","uri":"/computer_organization_exp3/"},{"categories":["college"],"content":"2.3 将键盘输入转换为操作数的中间键 module midware( input [15:0]key_out, output wire [7:0] X, output wire [7:0] Y ); assign X=key_out[15:8]; assign Y=key_out[7:0]; endmodule ","date":"2023-04-18","objectID":"/computer_organization_exp3/:3:0","tags":null,"title":"西南交通大学计组实验3-8位原码一位乘法器设计","uri":"/computer_organization_exp3/"},{"categories":["college"],"content":"2.4 8位7段数码管 module segment_displays(clk,N,seg,sel); input clk; input [31:0] N; output reg [7:0] seg; output reg [2:0] sel; reg [3:0]num; always@(posedge clk) begin sel\u003c=sel+1; case(sel) 3'b110:num\u003c=N[3:0]; 3'b101:num\u003c=N[7:4]; 3'b100:num\u003c=N[11:8]; 3'b011:num\u003c=N[15:12]; 3'b010:num\u003c=N[19:16]; 3'b001:num\u003c=N[23:20]; 3'b000:num\u003c=N[27:24]; 3'b111:num\u003c=N[31:28]; endcase end always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00000000; //\"dark\" endcase end endmodule 3 引脚分配 4 仿真波形 5 源码已上传github github仓库：  swjtu_computer_organization_exp3_multiply ","date":"2023-04-18","objectID":"/computer_organization_exp3/:4:0","tags":null,"title":"西南交通大学计组实验3-8位原码一位乘法器设计","uri":"/computer_organization_exp3/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课 Success 代码和输出已通过助教验收 update Apr20th 更新：实现了滚动显示数字 Frequency 使用时必须将clk频率设置成100k 1 实验内容 矩阵键盘值扫描读取及显示电路的设计 2 代码/原理图 ","date":"2023-04-12","objectID":"/computer_organization_exp2/:0:0","tags":null,"title":"西南交通大学计组实验2-矩阵键盘设计","uri":"/computer_organization_exp2/"},{"categories":["college"],"content":"2.1 顶层文件 module EXP2( clk, KEY_R, KEY_C, out, ins_num, codeout, sel ); input clk; input [3:0] KEY_R; output reg[3:0] KEY_C = 4'b0111; output reg[31:0] out= 32'h0000_0000; output [3:0] ins_num; output [6:0] codeout; output wire[2:0] sel; reg [31:0]timer = 32'b1; reg [1:0] state_machine = 2'b0; reg valid_input=1; //根据按钮的列扫描信号和行输入信号判断按钮是否被按下 always @(posedge clk) begin state_machine = state_machine + 1'b1; case (state_machine) 2'b00: KEY_C \u003c= 4'b1110; 2'b01: KEY_C \u003c= 4'b1101; 2'b10: KEY_C \u003c= 4'b1011; 2'b11: KEY_C \u003c= 4'b0111; endcase valid_input=!(KEY_R == 4'b1111); begin if(!valid_input) begin if(timer == 32'b0) begin timer = 32'd100001; end timer = timer + 1'b1; end else if(timer \u003e 32'd100000) begin timer = 32'b1; //置数没有在冷却阶段 out=out\u003c\u003c4; out[3:0] = ins_num[3:0]; end end end key2num k2n(clk,KEY_R,KEY_C,ins_num); segment_displays sg(clk,out,codeout,sel); endmodule ","date":"2023-04-12","objectID":"/computer_organization_exp2/:1:0","tags":null,"title":"西南交通大学计组实验2-矩阵键盘设计","uri":"/computer_organization_exp2/"},{"categories":["college"],"content":"2.2 根据键盘按键获得输入的值 module key2num(clk,KEY_R,KEY_C,ins_num); input clk; input [3:0] KEY_R,KEY_C; output reg [3:0] ins_num=0; always@(*) case ({KEY_C, KEY_R}) 8'b1011_1110: ins_num = 4'd0; 8'b0111_0111: ins_num = 4'd1; 8'b1011_0111: ins_num = 4'd2; 8'b1101_0111: ins_num = 4'd3; 8'b0111_1011: ins_num = 4'd4; 8'b1011_1011: ins_num = 4'd5; 8'b1101_1011: ins_num = 4'd6; 8'b0111_1101: ins_num = 4'd7; 8'b1011_1101: ins_num = 4'd8; 8'b1101_1101: ins_num = 4'd9; 8'b1110_0111: ins_num = 4'd10; 8'b1110_1011: ins_num = 4'd11; 8'b1110_1101: ins_num = 4'd12; 8'b1110_1110: ins_num = 4'd13; 8'b0111_1110: ins_num = 4'd14; 8'b1101_1110: ins_num = 4'd15; endcase endmodule ","date":"2023-04-12","objectID":"/computer_organization_exp2/:2:0","tags":null,"title":"西南交通大学计组实验2-矩阵键盘设计","uri":"/computer_organization_exp2/"},{"categories":["college"],"content":"2.3 7段数码管译码器 module segment_displays(clk,N,seg,sel); input clk; input [31:0] N; output reg [7:0] seg; output reg [2:0] sel; reg [3:0]num; always@(posedge clk) begin sel\u003c=sel+1; case(sel) 3'b110:num\u003c=N[3:0]; 3'b101:num\u003c=N[7:4]; 3'b100:num\u003c=N[11:8]; 3'b011:num\u003c=N[15:12]; 3'b010:num\u003c=N[19:16]; 3'b001:num\u003c=N[23:20]; 3'b000:num\u003c=N[27:24]; 3'b111:num\u003c=N[31:28]; endcase end always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00000000; //\"dark\" endcase end endmodule ","date":"2023-04-12","objectID":"/computer_organization_exp2/:3:0","tags":null,"title":"西南交通大学计组实验2-矩阵键盘设计","uri":"/computer_organization_exp2/"},{"categories":["college"],"content":"2.4 仿真用testbench `timescale 1ns/1ns module exp2_tb; reg clk; reg [3:0] key_r=4'b0111; wire [3:0] key_c,out,ins_num; wire [7:0] codeout; initial begin clk=1'b0; end always #50 clk=~clk; always@(posedge clk) begin case(key_r) 4'b0111:key_r=4'b1011; 4'b1011:key_r=4'b1101; 4'b1101:key_r=4'b1110; 4'b1110:key_r=4'b0111; endcase end EXP2 U( .clk(clk), .KEY_R(key_r), .KEY_C(key_c), .out(out), .ins_num(ins_num), .codeout(codeout) ); endmodule 3 引脚分配 4 仿真波形 Note 由于设计的防抖模块会造成out和codeout信号延迟输出，此处仅关注ins_num的值 5 源码已上传github github仓库：  swjtu_computer_organization_exp2_matrixkeyboard ","date":"2023-04-12","objectID":"/computer_organization_exp2/:4:0","tags":null,"title":"西南交通大学计组实验2-矩阵键盘设计","uri":"/computer_organization_exp2/"},{"categories":["college"],"content":" Note 此笔记针对西南交通大学2023-2024学年上半学期开设的计组实验课。 Success 代码和输出已通过助教验收。 1 实验内容 设计四位加法器 2 代码/原理图 ","date":"2023-04-11","objectID":"/computer_organization_exp1/:0:0","tags":null,"title":"西南交通大学计组实验1-四位全加器设计","uri":"/computer_organization_exp1/"},{"categories":["college"],"content":"2.1 顶层文件 ","date":"2023-04-11","objectID":"/computer_organization_exp1/:1:0","tags":null,"title":"西南交通大学计组实验1-四位全加器设计","uri":"/computer_organization_exp1/"},{"categories":["college"],"content":"2.2 全加器 module full_adder(a,b,c0,s,c1); input a,b,c0; output wire s,c1; wire tmp1,tmp2,tmp3; half_adder ha1(a,b,tmp1,tmp2); half_adder ha2(tmp1,c0,s,tmp3); assign c1=tmp2|tmp3; endmodule ","date":"2023-04-11","objectID":"/computer_organization_exp1/:2:0","tags":null,"title":"西南交通大学计组实验1-四位全加器设计","uri":"/computer_organization_exp1/"},{"categories":["college"],"content":"2.3 半加器 module half_adder(a,b,s,c); input a,b; output wire s,c; assign s=a^b; assign c=a\u0026b; endmodule ","date":"2023-04-11","objectID":"/computer_organization_exp1/:3:0","tags":null,"title":"西南交通大学计组实验1-四位全加器设计","uri":"/computer_organization_exp1/"},{"categories":["college"],"content":"2.4 7段数码管译码器 module segment_displays(num,seg); input [3:0] num; output reg [7:0] seg; always@(num) begin case(num) 4'b0000:seg\u003c=8'b00111111; //\"0\" 4'b0001:seg\u003c=8'b00000110; //\"1\" 4'b0010:seg\u003c=8'b01011011; //\"2\" 4'b0011:seg\u003c=8'b01001111; //\"3” 4'b0100:seg\u003c=8'b01100110; //\"4\" 4'b0101:seg\u003c=8'b01101101; //\"5\" 4'b0110:seg\u003c=8'b01111101; //\"6\" 4'b0111:seg\u003c=8'b00000111; //\"8\" 4'b1000:seg\u003c=8'b01111111; //\"8\" 4'b1001:seg\u003c=8'b01101111; //\"9\" 4'b1010:seg\u003c=8'b01110111; //\"A\" 4'b1011:seg\u003c=8'b01111100; //\"b\" 4'b1100:seg\u003c=8'b00111001; //\"c\" 4'b1101:seg\u003c=8'b01011110; //\"d\" 4'b1110:seg\u003c=8'b01111001; //\"E\" 4'b1111:seg\u003c=8'b01110001; //\"F\" default:seg\u003c=8'b00111111; //\"0\" endcase end endmodule 3 引脚分配 4 仿真波形 5 源码已上传github github仓库：  swjtu_computer_organization_exp_1_4digit_adder ","date":"2023-04-11","objectID":"/computer_organization_exp1/:4:0","tags":null,"title":"西南交通大学计组实验1-四位全加器设计","uri":"/computer_organization_exp1/"},{"categories":["college"],"content":" Warning 此笔记由我个人整理，因此相比教材可能有出入，如果您发现有错误，欢迎和我联系！ Note 此笔记针对西南交通大学2022-2023学年上半学期开设的数电理论课。 1 数字逻辑概论 ","date":"2023-01-14","objectID":"/math_electronic/:0:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.1 数字信号和数字电路 ","date":"2023-01-14","objectID":"/math_electronic/:1:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.1.1 模拟信号和数字信号 1.1.1.1 模拟信号 模拟信号是时间和数值均连续变化的电信号，如正弦波、三角波等 1.1.1.2 数字信号 数字信号是在时间上和数值上均是离散的信号。 1.1.1.3 模拟信号转换为数字信号 处理过程包括：采样、量化、编码。 ","date":"2023-01-14","objectID":"/math_electronic/:1:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.1.2 数字信号的描述方法 周期 (T) —- 表示两个相邻脉冲之间的时间间隔 脉冲宽度 ($t_{w}$)—- 脉冲幅值的50%的两个时间所跨越的时间 占空比 Q —– 表示脉冲宽度占整个周期的百分比 上升时间$t_{r}$ 和下降时间$t_{f}$ —-从脉冲幅值的10%到90% 上升 ","date":"2023-01-14","objectID":"/math_electronic/:1:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.2 数制 ","date":"2023-01-14","objectID":"/math_electronic/:2:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.2.1 二进制数和十进制数转换 1.2.1.1 辗转相除法 将十进制数连续不断地除以2 , 直至商为零，所得余数由低位到高位排列，即为所求二进制数。 1.2.1.2 从高到低比较大小 1.2.1.3 小数的转换 对于二进制的小数部分可写成 $$N_{D} = b_{-1} \\times 2^{-1} + b_{-2} \\times 2^{-2} + \\cdots + b_{-(n-1)} \\times 2^{-(n-1)} + b_{-n} \\times 2^{-n} \\tag{1} $$ 将上式两边分别乘以2，得 $$2 \\times N_{D} = b_{-1} \\times 2^{0} + b_{-2} \\times 2^{-1} + \\cdots + b_{-(n-1)} \\times 2^{-(n-2)} + b_{-n} \\times 2^{-(n-1)} \\tag{2} $$ 由此可见，将十进制小数乘以2，所得乘积的整数即为 $b_1$,不难推知，将十进制小数每次减掉上次所得积中的整数再乘以2，直到满足误差要求进行“四舍五入\"为止，就可完成由十进制小数转换成二进制小数。 Info 对于八进制和十六进制小数，转换时，由小数点开始，整数部分自右向左，小数部分自左向右，三/四位一组，不够三/四位的添零补齐，则每三/四位二进制数表示一位八/十六进制数 ","date":"2023-01-14","objectID":"/math_electronic/:2:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.3 算数运算 ","date":"2023-01-14","objectID":"/math_electronic/:3:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.3.1 原码、反码、补码 1.3.1.1 原码 原码表示办法：正数符号位是0，负数符号位是1，数值用其绝对值的二进制数表示。例如 $$ +5 = \\boxed{0}101 \\tag{1}$$ $$ -5 = \\boxed{1}101 \\tag{2}$$ 1.3.1.2 反码 反码又称为“1的补码”，正数的反码与正码相同。求二进制负数的反码的简单办法是，符号位不变，将原码的数值逐位求反得到。 1.3.1.3 补码 补码即为反码的最低位加1所得的数 ","date":"2023-01-14","objectID":"/math_electronic/:3:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.4 二进制代码 编码:以一定的规则编制代码来区分和表示不同的数值、字母、符号等信息的过程。 二进制代码的位数(n),与需要编码的事件（或信息）的个数(N)之间应满足以下关系： $$2^{n-1}≤N≤2^{n}$$ ","date":"2023-01-14","objectID":"/math_electronic/:4:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.4.1 BCD码 从4 位二进制数16种代码中,选择10种来表示0~9个数码的方案有很多种。每种方案产生一种BCD码。 BCD码十进制数码 8421码 2421 码 5421 码 余3码 余3循环码 格雷码 0 0000 0000 0000 0011 0010 0000 1 0001 0001 0001 0100 0110 0001 2 0010 0010 0010 0101 0111 0011 3 0011 0011 0011 0110 0101 0010 4 0100 0100 0100 0111 0100 0110 5 0101 1011 1000 1000 1100 0111 6 0110 1100 1001 1001 1101 0101 7 0111 1101 1010 1010 1111 0100 8 1000 1110 1011 1011 1110 1100 9 1001 1111 1100 1100 1010 1101 10 \\ \\ \\ \\ \\ 1111 11 \\ \\ \\ \\ \\ 1110 12 \\ \\ \\ \\ \\ 1010 13 \\ \\ \\ \\ \\ 1011 14 \\ \\ \\ \\ \\ 1001 15 \\ \\ \\ \\ \\ 1000 1.4.1.1 各编码特点 有权码：编码的每一位有固定的权值 无权码：编码没有固定的权值 余3码的特点:当两个十进制的和是10时，相应的二进制和正 好是16，于是可自动产生进位信号,而不需修正.1和9, 2和8,…..6和 4的余3码。便于求10的补码。（本质上一个数的余3码就是这个数加上3的8421码） 格雷码：任何两个相邻代码之间仅有一位不同。 余3码循环码：相邻的两个代码之间仅一位的状态不同。按余3 码循环码组成计数器时，每次转换过程只有一个触发器翻转，译 码时不会发生竞争－冒险现象。（本质上一个数的余3循环码就是这个数加上3的格雷码） 1.4.1.2 用BCD码表示十进制数 对于一个多位的十进制数，需要有与十进制位数相同的几组BCD代码来表示。例如： 1.4.1.3 二进制码与格雷码的转换 二进制码$\\rightarrow$格雷码 格雷码的最高位（最左边）与二进制码的最高位相同。 从左到右，逐一将二进制码相邻的两位相加（舍去进位），作为格雷码的下一位。 格雷码$\\rightarrow$二进制码 二进制码的最高位（最左边）与格雷码的最高位相同。 将产生的每一位二进制码，与下一位相邻的格雷码相加（舍去进位），作为二进制码的下一位。 ","date":"2023-01-14","objectID":"/math_electronic/:4:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.5 二值逻辑变量与基本逻辑运算 逻辑运算的描述方式:逻辑代数表达式、真值表、逻辑图、卡诺图、波形图和硬件描述语言（HDL) 等。 ","date":"2023-01-14","objectID":"/math_electronic/:5:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.5.1 各逻辑门 ","date":"2023-01-14","objectID":"/math_electronic/:5:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.6 逻辑函数 描述输入变量和输出变量之间的因果关系称为逻辑函数 ","date":"2023-01-14","objectID":"/math_electronic/:6:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.6.1 表示办法 1.6.1.1 真值表 1.6.1.2 表达式 逻辑表达式是用与、或、非等运算组合起来，表示逻辑函数与逻辑变量之间关系的逻辑代数式。 只写使输出变量为1的项 每项之中，变量之间是与的关系 变量为1的用原变量，变量为0的用反变量 项与项之间是或的关系 1.6.1.3 逻辑图 用与、或、非等逻辑符号表示逻辑函数中各变量之间的逻辑关系所得到的图形称为逻辑图 思路：将逻辑函数式中所有的与、或、非运算符号用相应的逻辑符号代替，并按照逻辑运算的先后次序将这些逻辑符号连接起来，就得到图电路所对应的逻辑图 1.6.1.4 波形图 用输入端在不同逻辑信号作用下所对应的输出信号的波形图，表示电路的逻辑关系 ","date":"2023-01-14","objectID":"/math_electronic/:6:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"1.6.2 转换 1.6.2.1 真值表$\\rightarrow$逻辑图 根据真值表写出逻辑表达式 化简逻辑表达式 根据表达式画出逻辑图 1.6.2.1 逻辑图$\\rightarrow$真值表 根据逻辑图逐级写出表达式 化简变换求最简与或式 将输入变量的所有取值逐一代入表达式得真值表 2 逻辑代数与硬件描述语言 ","date":"2023-01-14","objectID":"/math_electronic/:6:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.1 逻辑代数的基本定理和恒等式 ","date":"2023-01-14","objectID":"/math_electronic/:7:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.1.1 逻辑代数的基本定律和恒等式 ","date":"2023-01-14","objectID":"/math_electronic/:7:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.1.2 逻辑代数的基本规则 Info 对偶和反演的区别在于对偶不会把原变量换成反变量 2.1.2.1 对偶规则 对于任何逻辑函数式，若将其中的与（•）换成或（+），或（+）换成与（•）；并将1换成0，0换成1；那么，所得的新的函数式就是L的对偶式，记作$L’$。 当某个逻辑恒等式成立时，则该恒等式两侧的对偶式也相等。这就是对偶规则。利用对偶规则，可从已知公式中得到更多的运算公式. 2.1.2.2 反演规则 对于任意一个逻辑表达式L，若将其中所有的与（•）换成或（+），或（+）换成与（•）；原变量换为反变量，反变量换为原变量；将1换成0，0换成1；则得到的结果就是原函数的反函数。 ","date":"2023-01-14","objectID":"/math_electronic/:7:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2 逻辑函数表达式的形式 ","date":"2023-01-14","objectID":"/math_electronic/:8:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.1 基本形式 2.2.1.1 与-或表达式 若干与项进行或逻辑运算构成的表达式。由与运算符和或运算符连接起来。如： $$ L = A \\cdot C + \\bar{C} \\cdot D $$ 2.2.1.2 或-与表达式 若干或项进行与逻辑运算构成的表达式。由或运算符和与运算符连接起来。如： $$ L = ( A + C ) \\cdot ( B + \\bar{C} ) \\cdot D $$ 2.2.1.3 其他表达式 ","date":"2023-01-14","objectID":"/math_electronic/:8:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.2 最小项与最小项表达式 2.2.2.1 最小项的定义 n个变量$X_{1}, X_{2}, …, X_{n}$的最小项是n个因子的乘积，乘积中包含了全部n个变量，每个变量都以它的原变量或非变量的形式在乘积项中出现，且仅出现一次。一般n个变量的最小项应有$2^{n}$个 2.2.2.2 最小项的性质 对于任意一个最小项，只有一组变量取值使得它的值为1 任意两个最小项的乘积为0 全体最小项之和为1 使最小项为1的一组二进制数所对应的十进制数即为最小项的编号值。 若干个最小项的和等于其余最小项和的反。 两个最小式表达式的与的结果是他们的公共项的并。 2.2.2.3 最小项的表示 通常用$m_i$表示最小项，m 表示最小项,下标i为最小项编号。 ","date":"2023-01-14","objectID":"/math_electronic/:8:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.3 最大项与最大项表达式 2.2.3.1 最大项的定义 n个变量$X_1, X_2, …, X_n$的最大项是n个因子或项，每个变量都以它的原变量或非变量的形式在或项中出现，且仅出现一次。一般n个变量的最大项应有$2^n$个 2.2.3.2 最大项的性质 对于任意一个最大项，只有一组变量取值使得它的值为0 任意两个最大项的之和为1 全体最大项之积为0 2.2.3.3 最大项的表示 通常用$M_i$表示最大项，M 表示最大项,下标i为最大项号。 ","date":"2023-01-14","objectID":"/math_electronic/:8:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.2.4 最小项和最大项的关系 两者之间为互补关系：$m_i = \\overline{M_i} ，或者M_i = \\overline{m_i}$ ","date":"2023-01-14","objectID":"/math_electronic/:8:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.3 逻辑函数的代数化简法 ","date":"2023-01-14","objectID":"/math_electronic/:9:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.3.1 逻辑函数的最简形式 逻辑函数有不同形式，将其中包含的与项数最少，且每个与项中变量数最少的与-或表达式称为最简与-或表达式 ","date":"2023-01-14","objectID":"/math_electronic/:9:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.3.2 代数化简法 运用逻辑代数的基本定律和恒等式进行化简的方法 2.3.2.1 并项 $$ A + \\bar{A} = 1 $$ $$ L = \\bar{A} \\bar{B} C + \\bar{A} \\bar{B} \\bar{C} = \\bar{A} \\bar{B} ( C + \\bar{C} ) = \\bar{A} \\bar{B} $$ 2.3.2.2 吸收 $$ A + AB = A $$ $$ L = \\bar{A} B + \\bar{A} BCD ( E + F ) = AB $$ 2.3.2.3 消去 $$ A + \\bar{A} B = A + B $$ $$ L = AB + \\bar{A}C + \\bar{B}C = AB + ( \\bar{A} + \\bar{B} ) C = AB + \\overline{AB} C = AB + C $$ 2.3.3 形式变化 通常在一片集成电路芯片中只有一种门电路，为了减少门电路的种类，需要对逻辑函数表达式进行变换。一般通过两次取反可变化。 ","date":"2023-01-14","objectID":"/math_electronic/:9:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4 逻辑函数的卡诺图化简法 ","date":"2023-01-14","objectID":"/math_electronic/:10:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4.1 用卡诺图表示逻辑函数 2.4.1.1 引出原理 逻辑函数可以表达为若干最小项相“或”的形式； 逻辑相邻的最小项：如果两个最小项只有一个变量互为反变量，那么，就称这两个最小项在逻辑上相邻; 2.4.1.2 形式 卡诺图：将n变量的全部最小项都填在小方格阵中，并使具有逻辑相邻的最小项在几何位置上也相邻地排列起来，这样,所得到的图形叫n变量的卡诺图。 各小方格对应于各变量不同的组合，而且上下左右在几何上相邻的方格内只有一个因子有差别，这个重要特点成为卡诺图化简逻辑函数的主要依据。 2.4.1.3 画法 当逻辑函数为最小项表达式时，在卡诺图中找出和表达式中最小项对应的小方格填上1，其余的小方格填上0（有时也可用空格表示），就可以得到相应的卡诺图。任何逻辑函数都等于其卡诺图中为1的方格所对应的最小项之和。 ","date":"2023-01-14","objectID":"/math_electronic/:10:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4.2 化简 2.4.2.1 步骤 将逻辑函数写成最小项表达式 按最小项表达式填卡诺图，凡式中包含了的最小项，其对应方格填1，其余方格填0，如果是无关项填d或x。 合并最小项，即将相邻的1方格圈成一组(包围圈)，每一组含$2^n$个方格，对应每个包围圈写成一个新的乘积项。 将所有包围圈对应的乘积项相加。 2.4.2.2 原则 包围圈内的方格数一定是$2^n$个，且包围圈必须呈矩形。 循环相邻特性包括上下底相邻，左右边相邻和四角相邻。 同一方格可以被不同的包围圈重复包围多次，但新增的包围圈中一定要有原有包围圈未曾包围的方格。 一个包围圈的方格数要尽可能多,包围圈的数目要可能少 当卡诺图中1的个数明显多于0的个数时，可以采取圈0的方式化简，得到原逻辑函数L的反函数，然后再求反，得到L。 ","date":"2023-01-14","objectID":"/math_electronic/:10:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.4.3 无关项 在真值表内对应于变量的某些取值下， 函数的值可以是任意的，或者这些变量的取值根本不会出现，这些变量取值所对应的最小项称为无关项。 Info 在含有无关项逻辑函数的卡诺图化简中，它的值可以取0或取1，具体取什么值，可以根据使函数尽量得到简化而定。 ","date":"2023-01-14","objectID":"/math_electronic/:10:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5 硬件描述语言Verilog HDL基础 ","date":"2023-01-14","objectID":"/math_electronic/:11:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.1 基本语法规则 2.5.1.1 间隔符 Verilog 的间隔符主要起分隔文本的作用，可以使文本错落有致，便于阅读与修改。间隔符包括空格符（\\b）、TAB 键（\\t）、换行符（\\n）及换页符。 2.5.1.2 注释符 注释只是为了改善程序的可读性,在编译时不起作用。多行注释符(用于写多行注释): /* — */；单行注释符 :以//开始到行尾结束为注释文字 2.5.1.3 标识符 给对象（如模块名、电路的输入与输出端口、变量等）取名所用的字符串。以英文字母或下划线开始如，clk、counter8、_net、bus_A 。 2.5.1.4 关键字 是Verilog语言本身规定的特殊字符串，用来定义语言的结构。例如，module、endmodule、input、output、wire、reg、and等都是关键词。关键词都是小写，关键词不能作为标识符使用 。 2.5.1.5 逻辑值集合 为了表示数字逻辑电路的逻辑状态，Verilog语言规定了4种基本的逻辑值。 val 含义 0 逻辑0、逻辑假 1 逻辑1、逻辑真 x/X 不确定 z/Z 高阻态 2.5.1.6 常量 Verilog允许用参数定义语句定义一个标识符来代表一个常量，称为符号常量。定义的格式为：parameter 参数名1＝常量表达式1，参数名2＝常量表达式2，……；如 parameter BIT=1, BYTE=8, PI=3.14; 2.5.1.7 变量的数据类型 线网类型:是指输出始终根据输入的变化而更新其值的变量,它一般指的是硬件电路中的各种物理连接,常用的网络类型由关键词wire定义wire型变量的定义格式如下：wire [n-1:0] 变量名1，变量名2，…，变量名n； 例: wire L; //将上述电路的输出信号L声明为网络型变量 wire [7:0] data bus; //声明一个8-bit宽的网络型总线变量 Info wire型变量未赋值的话缺省值为高阻态Z。 寄存器类型:寄存器型变量对应的是具有状态保持作用的电等路元件,如触发器寄存器。寄存器型变量只能在initial或always内部被赋值 寄存器类型(不对应具体硬件) 功能说明 reg 常用的寄存器型变量 integer 32位带符号的整数型变量 real 64位带符号的实数型变量 time 64位无符号的时间变量 例: reg clock;//定义一个1位寄存器变量 reg [3:0] counter; //定义一个4位寄存器变量 ","date":"2023-01-14","objectID":"/math_electronic/:11:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.3 运算符及优先级 ","date":"2023-01-14","objectID":"/math_electronic/:11:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.4 门级元件 元件符号 功能说明 元件符号 功能说明 and 多输入端的与门 nand 多输入端的与非门 or 多输入端的或门 nor 多输入端的或非门 xor 多输入端的异或门 xnor 多输入端的异或非门 buf 多输出端的缓冲器 not 多输出端的反相器 bufif1 控制信号高电平有效的三态缓冲器 notif1 控制信号高电平有效的三态反相器 bufif0 控制信号低电平有效的三态缓冲器 notif0 控制信号低电平有效的三态反相器 ","date":"2023-01-14","objectID":"/math_electronic/:11:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"2.5.5 程序的基本结构 模块是Verilog描述电路的基本单元。对数字电路建模时，用一个或多个模块。不同模块之间通过端口进行连接。 每个模块以关键词module开始，以endmodule结束。 每个模块先要进行端口的定义，并说明输入（input)和输出（output),然后对模块功能进行描述。 除了endmodule语句外，每个语句后必须有分号。 可以用/* — */和//…..对程序的任何部分做注释。 逻辑功能的描述方式有三种不同风格：结构描述方式（门级描述方式,元件列表）、数据流描述方式(assign)，行为描述方式(always) 2.5.5.1 电路模块定义的一般结构 module 模块名（端口名1, 端口名2, 端口名3,…）； 端口类型说明(input, output, inout)； 参数定义(可选)； 数据类型定义(wire, reg等)； 实例化低层模块和基本门级元件； 连续赋值语句（assign）； 过程块结构（initial和always） 行为描述语句； endmodule 2.5.5.2 描述风格 4 组合逻辑电路 ","date":"2023-01-14","objectID":"/math_electronic/:11:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1 组合逻辑电路的分析 ","date":"2023-01-14","objectID":"/math_electronic/:12:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1.1 定义 其输出状态在任何时刻只取决于同一时刻的输入状态，而与电路原来的状态无关的逻辑电路。 ","date":"2023-01-14","objectID":"/math_electronic/:12:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1.2 结构特征 输出、输入之间没有反馈延迟通路， 不含记忆单元 ","date":"2023-01-14","objectID":"/math_electronic/:12:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.1.3 分析步骤 由逻辑图写出各输出端的逻辑表达式； 化简和变换逻辑表达式； 列出真值表； 根据真值表或逻辑表达式，经分析最后确定其功能。 ","date":"2023-01-14","objectID":"/math_electronic/:12:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.2 组合逻辑电路的设计 ","date":"2023-01-14","objectID":"/math_electronic/:13:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.2.1 步骤 逻辑抽象：根据实际逻辑问题的因果关系确定输入、输出变量，并定义逻辑状态的含义； 根据逻辑描述列出真值表； 由真值表写出逻辑表达式; 简化和变换逻辑表达式，画出逻辑图。 ","date":"2023-01-14","objectID":"/math_electronic/:13:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3 组合逻辑电路中的竞争和冒险 ","date":"2023-01-14","objectID":"/math_electronic/:14:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3.1 原因 ","date":"2023-01-14","objectID":"/math_electronic/:14:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3.2 检查方法 4.3.2.1 代数法 对具备竞争条件的某变量，将除该变量外其他变量取0或1，若原函数可化成 A+$\\bar{A}$或A$\\cdot \\bar{A}$的形式,则A存在冒险。 4.3.2.2 卡诺图 画出卡诺图，若存在两个相切的卡诺圈，且这个相切的部分没有被另外的卡诺圈包围，则必定存在冒险。 ","date":"2023-01-14","objectID":"/math_electronic/:14:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.3.3 消除办法 4.3.3.1 发现并消除互补变量 4.3.3.2 增加乘积项 4.3.3.3 输出端并联电容器 如果逻辑电路在较慢速度下工作，为了消去竞争冒险，可以在输出端并联一电容器，致使输出波形上升沿和下降沿变化比较缓慢，可对于很窄的负跳变脉冲起到平波的作用。 4.3.3.4 引入选通/封锁脉冲 加封锁脉冲/选通脉冲。在输入信号产生竞争冒险的时间内，1在输出端引入一个逻辑封锁/选通门和控制信号，对脉冲将1可能产生的尖峰干扰脉冲进行屏蔽。1控制信号可由one shot电路产生。 4.3.3.5 接入滤波电路 ","date":"2023-01-14","objectID":"/math_electronic/:14:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4 若干典型的组合逻辑电路 ","date":"2023-01-14","objectID":"/math_electronic/:15:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.1 编码器 能将每一个编码输入信号变换为不同的二进制的代码输出。 Warning 普通编码器不能有两个或以上有效输入。 4.4.1.1 分类 普通编码器：任何时候只允许输入一个有效信号，否则输出就会发生混乱。 优先编码器：允许同时输入两个以上的有效编码信号。当同时输入几个有效编码信号时，优先编码器能按预先设定的优先级别，只对其中优先权最高的一个进行编码。 4.4.1.2 典型 4线─2线普通二进制编码器 键盘电路图 键盘真值表 cd4532优先编码器示意图 cd4532优先编码器真值表 用二片CD4532构成16线-4线优先编码器 74HC147真值表 ","date":"2023-01-14","objectID":"/math_electronic/:15:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.2 译码器/数据分配器 译码：译码是编码的逆过程，它能将二进制码翻译成代表某一特定含义的信号.(高低电平信号) 译码器：具有译码功能的逻辑电路称为译码器。 4.4.2.1 2线-4线译码器（74HC139） 4.4.2.2 3线-8线译码器（74HC138) 4.4.2.3 应用 Info $D_i$是$A_i$和$B_i+C_{i-1}$的差关于2的模。 $C_i$是借位标志。 4.4.2.4 七段显示译码器(74HC4511) ","date":"2023-01-14","objectID":"/math_electronic/:15:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.3 数据选择器 数据选择器：能实现数据选择功能的逻辑电路。它的作用相当于多个输入的单刀多掷开关，又称“多路开关” 。 数据选择的功能：在通道选择信号的作用下，将多个通道的数据分时传送到公共的数据通道上去的。 4.4.3.1 2选1数据选择器 4.4.3.2 4选1数据选择器 4.4.3.3 8选1数据选择器(74HC151) Info L是低电平。 H是高电平。 4.4.3.4 数据选择器构成查找表LUT 4.4.3.5 利用数据选择器实现函数的一般步骤:（变量数=选通端数） 将函数变换成最小项表达式 选择输入信号S2、S1、S0作为函数的输入变量 处理数据输入D0~D7信号电平。逻辑表达式中有$m_i$ ,则相应$D_i$ =1，其他的数据输入端均为0。当变量数\u003e选通端数，考虑如何将某些变量接入数据端。 ","date":"2023-01-14","objectID":"/math_electronic/:15:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.4 数值比较器 4.4.4.1 一位数值比较器 4.4.4.1.1 真值表 A B $F_{A\u003eB}$ $F_{A=B}$ $F_{A\u003cB}$ 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 1 0 0 1 4.4.4.1.2 表达式 $$ F_{A\u003eB}=A\\overline{B} $$ $$ F_{A\u003cB}=\\overline{A}B $$ $$ F_{A=B}=A\\odot B $$ 4.4.4.1.3 逻辑图 4.4.4.2 两位数值比较器 4.4.4.2.1 真值表 A1 B1 A0 B0 $F_{A\u003eB}$ $F_{A\u003cB}$ $F_{A=B}$ A1\u003eB1 X 1 0 0 A1\u003cB1 X 0 1 0 A1=B1 A0\u003eB0 1 0 0 A1=B1 A0=B0 0 0 1 A1=B1 A0\u003cB0 0 1 0 4.4.4.2.2 表达式 $$ F_{A\u003eB}=F_{A1\u003eB1}+F_{A1=B1} \\cdot F_{A0\u003eB0} $$ $$ F_{A\u003cB}=F_{A1\u003cB1}+F_{A1=B1} \\cdot F_{A0\u003cB0} $$ $$ F_{A=B}=F_{A1=B1} \\cdot F_{A0=B0} $$ 4.4.4.2.3 逻辑图 4.4.4.3 四位数据比较器 原理和二位比较器相同，从最高位到最低位一次比较。 74HC85还有3个拓展输入端:$ I_{A\u003eB},I_{A\u003cB},I_{A=B} $,可以与低位输出连接组成位数更多的比较器。 ","date":"2023-01-14","objectID":"/math_electronic/:15:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.4.4 拓展 4.4.4.4.1 串联 有I端 先对低位进行比较，将比较结果输给高位的I端。再在高位进行比较。 无I端 4.4.4.4.2 并联 ","date":"2023-01-14","objectID":"/math_electronic/:15:5","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.4.5 算术运算电路 4.4.5.1 半加器 只考虑了两个加数本身，而没有考虑低位进位的加法运算叫做半加。 4.4.5.1.1 真值表 A B C S 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 0 4.4.5.1.2 表达式 $$ S=A\\oplus B $$ $$ C=AB $$ 4.4.5.1.3 逻辑图 4.4.5.2 全加器 4.4.5.2.1 真值表 A B $C_i$ S $C_O$ 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 4.4.5.2.2 表达式 $$ S=A\\oplus B \\oplus C_i $$ $$ C_o=AB+(A\\oplus B)C_i $$ 4.4.5.2.3 逻辑图 4.4.5.3 串行进位多位加法器 4.4.5.4 减法器 ","date":"2023-01-14","objectID":"/math_electronic/:15:6","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6 组合逻辑电路的行为级建模 ","date":"2023-01-14","objectID":"/math_electronic/:16:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.1 if-else语句 module chooser_4(S,D,Y); input [1:0]S; input [3:0]D; output reg Y; always@(D,S) begin if(S==2'b00) Y=D[0]; else if(S==2'b01) Y=D[1]; else if(S==2'b10) Y=D[2]; else Y=D[3]; end endmodule Warning 注意，过程赋值语句只能给寄存器型变量赋值，因此，输出变量Y的数据类型定义为reg。 ","date":"2023-01-14","objectID":"/math_electronic/:16:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.2 case语句 Info 用关键词casex和casez表示含有无关项x和高阻z的情况。 Warning 当分支项中的语句是多条语句，必须在最前面写上关键词begin，在最后写上关键词end，成为顺序语句块。 4.6.2.1 对具有使能端$E_n$的4选1数据选择器行为进行Verilog描述。当$E_n$=0时，数据选择器工作，$E_n$=1时，禁止工作，输出为0。 module choose_4(S,D,Y,E); input [1:0] S; input [3:0] D; output reg Y; input E; always@(S,D,E) begin if(E==1'b1) begin case(S) 2'b00:Y\u003c=D[0]; 2'b01:Y\u003c=D[1]; 2'b10:Y\u003c=D[2]; 2'b11:Y\u003c=D[3]; endcase end else Y\u003c=1'b0 end endmodule 4.6.2.2 对基本的4线-2线优先编码器的行为进行Verilog描述。 module coder_4_2(I,Y); input [3:0]I; output reg[1:0]Y; always@(I) begin casex(I) 4'b1xxx:Y\u003c=2'b11; 4'b01xx:Y\u003c=2'b10; 4'b001x:Y\u003c=2'b01; 4'b0001:Y\u003c=2'b00; default:Y\u003c=2'bx; endcase end endmodule ","date":"2023-01-14","objectID":"/math_electronic/:16:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.3 for语句 试用Verilog语言描述具有高电平使能的3线-8线译码器. module trans_3_8(I,Y,E); input [2:0]I; input E; output reg[7:0]Y; integar k; always@(I,E) begin Y=8'b1111_1111; for(k=0;k\u003c8;k=k+1) begin if(k==I\u0026\u0026E) Y[k]=0; else Y[k]=1; end end endmodule ","date":"2023-01-14","objectID":"/math_electronic/:16:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.4 条件运算符 例：用条件运算符描述了一个2选1的数据选择器 module chooser_2_1( input [1:0]D; input sel; output reg Y; ); always@(D,sel) begin Y\u003c=sel?D[1]:D[0]; end endmodule module choose_2_1( input [1:0]D; input sel; output Y; ); assign Y\u003c=sel?D[1]:D[0]; endmodule ","date":"2023-01-14","objectID":"/math_electronic/:16:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"4.6.5 模块化设计方法 分层次的电路设计:在电路设计中，将两个或多个模块组合起来描述电路逻辑功能的设计方法。 设计方法：自顶向下和自底向上两种常用的设计方法。 4.6.5.1 四位全加器 4.6.5.1.1 半加器 module half_adder(A,B,S,C); input A,B; output reg S,C; always@(A,B) begin S\u003c=A^B; C\u003c=A\u0026B; end endmodule 4.6.5.1.2 全加器 module full_adder(A,B,Ci,S,C0); input A,B,Ci; output S,C0; wire S1,D1,D2; half_adder HA1(A,B,S1,D1); half_adder HA2(S1,Ci,S,D2); or(C0,D1,D2); endmodule 4.6.5.1.3 四位全加器 module adder_4_dig( input [3:0]A,B; input CI; output [3:0]S, output CO ) wire [2:0]C; full_adder fa0(A[0],B[0],CI,S[0],C[0]); full_adder fa1(A[1],B[1],C[0],S[1],C[1]); full_adder fa2(A[2],B[2],C[1],S[2],C[2]); full_adder fa3(A[3],B[3],C[2],S[3],CO); endmodule 5 锁存器和触发器 ","date":"2023-01-14","objectID":"/math_electronic/:16:5","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.1 双稳态电路 ","date":"2023-01-14","objectID":"/math_electronic/:17:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.1.1 基本的双稳态电路 双稳态电路是锁存器和触发器的结构组成、功能实现的基础. ","date":"2023-01-14","objectID":"/math_electronic/:17:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.2 SR锁存器 ","date":"2023-01-14","objectID":"/math_electronic/:18:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.2.1 基本SR锁存器 5.2.1.1 工作原理 5.2.1.2 真值表 5.2.1.3 变种 5.2.1.4 规律 5.2.1.5 运用 运用基本SR锁存器消除机械开关触点抖动引起的脉冲输出。 ","date":"2023-01-14","objectID":"/math_electronic/:18:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.2.2 门控SR锁存器 ","date":"2023-01-14","objectID":"/math_electronic/:18:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.3 D锁存器 ","date":"2023-01-14","objectID":"/math_electronic/:19:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.3.1 电路结构 Info 没有圆圈的一侧是高电平的时候TG就是通路。 ","date":"2023-01-14","objectID":"/math_electronic/:19:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.3.2 逻辑功能 ","date":"2023-01-14","objectID":"/math_electronic/:19:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4 触发器的电路结构和工作原理 Tip 在逻辑图中触发器的时钟信号接口处有三角 共同点： 具有0 和1两个稳定状态，一旦状态被确定，就能自行保持。一个锁存器或触发器能存储一位二进制码。 不同点： 锁存器—对脉冲电平敏感的存储电路，在特定输入脉冲电平作用下改变状态。 触发器—对脉冲边沿敏感的存储电路，在时钟脉冲的上升沿或下降沿的变化瞬间改变状态 ","date":"2023-01-14","objectID":"/math_electronic/:20:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.1 D触发器 5.4.1.1 电路结构 两个D锁存器级联构成一个主从D触发器 主锁存器与从锁存器结构相同(但使能信号相反) TG1和TG4的工作状态相同 TG2和TG3的工作状态相同 5.4.1.2 D触发器工作原理 CP=0时： TG1导通，TG2断开——输入信号D 送入主锁存器。 Q’跟随D端的状态变化，使Q’=D TG3断开，TG4导通——从锁存器维持在原来的状态不变。 CP=1时： TG1断开，TG2导通——输入信号D 不能送入主锁存器。主锁存器维持原态不变。 TG3导通，TG4断开——主锁存器Q’的信号送从锁存器Q端。使Q=D。 触发器的状态仅仅取决于CP信号上升沿到达前瞬间的D信号！ 5.4.1.2.1 特性表 D $Q_n$ $Q_{n+1}$ 0 0 0 0 1 0 1 0 1 1 1 1 5.4.1.2.2 特性方程 $$ Q^{n+1} = D $$ 5.4.1.2.3 状态图 ","date":"2023-01-14","objectID":"/math_electronic/:20:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.2 JK触发器 Tip 本质上JK触发器就是升级版的SR触发器，多了个翻转功能。 5.4.2.1 工作原理 5.4.2.1.1 特性表 J K $Q_n$ $Q_{n+1}$ 说明 0 0 0 0 保持 0 0 1 1 保持 0 1 0 0 置0 0 1 1 0 置0 1 0 0 1 置1 1 0 1 1 置1 1 1 0 1 翻转 1 1 1 0 翻转 5.4.2.1.2 特性方程 $$ Q_{n+1} = J\\overline{ Q_{n} } + \\overline{K}Q_{n} $$ 5.4.2.1.2 状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:20:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.3 T触发器 5.4.3.1 工作原理 5.4.3.1.1 特性表 T Qn Qn+1 0 0 0 0 1 1 1 0 1 1 1 0 5.4.3.1.2 特性方程 $$ Q_{n+1} = T\\overline{ Q_{n} } + \\overline{T}Q_{n} $$ 5.4.3.1.3 状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:20:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.4.4 SR触发器 5.4.4.1 特性表 Qn S R Qn+1 0 0 0 0 1 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 1 1 x 1 1 1 x 5.4.4.2 特性方程 $$Q_{n+1} = S + R\\overline{ Q_{n} }$$ $$ SR = 0 $$ 5.4.4.3 状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:20:4","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.5 D触发器转换 ","date":"2023-01-14","objectID":"/math_electronic/:21:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.5.1 D触发器构成JK触发器 ","date":"2023-01-14","objectID":"/math_electronic/:21:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"5.5.2 D触发器构成T触发器 6 时序逻辑电路 时序逻辑电路的工作特点是任意时刻的输出状态不仅与该当前的输入信号有关，而且与此前电路的状态有关。 ","date":"2023-01-14","objectID":"/math_electronic/:21:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.1 时序逻辑电路的基本概念 ","date":"2023-01-14","objectID":"/math_electronic/:22:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.1.1 时序逻辑电路的模型与分类 6.1.1.1 时序电路的基本结构 6.1.1.2 时序逻辑电路的分类 按状态变化分类： 同步时序电路:电路状态的变化在同一时钟脉冲作用下发生，即存储电路里所有触发器有一个统一的时钟源，它们的状态在同一时刻更新。 异步时序电路:没有统一的时钟脉冲或没有时钟脉冲，电路的状态更新不是同时发生的。 按输出信号分类： 米利（Mealy）型时序电路:电路的输出是输入变量及触发器输出Q1、Q0 的函数，这类时序电路亦称为米利型电路 穆尔（ Moore）型时序电路:电路输出仅仅取决于各触发器的状态，而不受电路当时的输入信号影响或没有输入变量，这类电路称为穆尔型电路 ","date":"2023-01-14","objectID":"/math_electronic/:22:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.2 同步 时序逻辑电路的分析 ","date":"2023-01-14","objectID":"/math_electronic/:23:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.2.1 逻辑方程组 输出方程: $O＝f_1(I,S)$ 表达输出信号与输入信号、状态变量的关系式 激励方程: $E＝f_2(I,S)$ 表达了激励信号与输入信号、状态变量的关系式 状态方程: $S^{n+1}＝f_3(E,S^n)$ 表达存储电路从现态到次态的转换关系式 Note 状态方程是由激励方程和所用的触发器的类型决定的 6.2.2 表达过程 列出逻辑方程组 根据方程组列出状态转换真值表 将状态转换真值表化为转换表 根据转换表得状态表 根据状态表画状态转移图 6.2.2.1 例 列出逻辑方程组： 输出方程：$$X = Q_0\\overline{ Q_1 }$$ $$Y = \\overline{A} ( Q_0 + Q_1 ) $$ 激励方程：$$ D_0 = A ( Q_0 + Q_1 ) $$ $$ D_1 = A \\overline{Q_0} $$ 状态方程： $$ Q^{n+1}_{0} = A ( Q^{n}_0 + Q^{n}_1 ) $$ $$ Q_{1}^{n+1} = A \\overline{ Q_{0}^{n} } $$ 根据方程组列出状态转换真值表: A $Q_0^n$ $Q_1^n$ $Q_0^{n+1}$ $Q_1^{n+1}$ X Y 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 1 0 0 1 0 1 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 0 将状态转换真值表化为转换表 根据转换表得状态表 令$S^n$为$Q_0^nQ_1^n$，$S^{n+1}$为$Q_0^{n+1}Q_0^{n+1}$，4个状态为00=a，01=b，10=c，11=d，得： 根据状态表画状态转移图 ","date":"2023-01-14","objectID":"/math_electronic/:23:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.3 同步 时序逻辑电路的设计 Note 同步时序逻辑电路的设计是分析的逆过程,其任务是根据实际逻辑问题的要求，设计出能实现给定逻辑功能的电路。 ","date":"2023-01-14","objectID":"/math_electronic/:24:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.3.1 设计同步时序逻辑电路的一般步骤 6.3.1.1 根据给定的逻辑功能建立原始状态图和原始状态表 明确电路的输入条件和相应的输出要求，分别确定输入变量和输出变量的数目和符号。 找出所有可能的状态和状态转换之间的关系。 根据原始状态图建立原始状态表。 6.3.1.2 状态化简—–求出最简状态图 合并等价状态，消去多余状态的过程称为状态化简 Info 等价状态：在相同的输入下有相同的输出，并转换到同一个次态去的两个状态称为等价状态。 6.3.1.3 状态编码（状态分配） 给每个状态赋以二进制代码的过程。 $2^{n-1}$ \u003c M $\\leq 2^n$ （M:状态数;n:触发器的个数） Info 状态编码的位数即为触发器的个数 6.3.1.4 选择触发器的类型 6.3.1.5 求出电路的激励方程和输出方程 6.3.1.6 画出逻辑图并检查自启动能力 ","date":"2023-01-14","objectID":"/math_electronic/:24:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.5 若干典型的时序逻辑电路 ","date":"2023-01-14","objectID":"/math_electronic/:25:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.5.1 寄存器和移位寄存器 在数字电路系统中，把需要处理的二进制数据或代码暂时存储起来，以便在需要的时候随时取用，这样的操作叫做寄存 6.5.1.1 8位CMOS寄存器74HC374 6.5.1.2 移位寄存器 移位寄存器是既能寄存数码，又能在时钟脉冲的作用下使数码在高低位之间移动的逻辑功能部件。 6.5.1.2.1 基本移位寄存器 6.5.1.2.2 多功能双向移位寄存器 ","date":"2023-01-14","objectID":"/math_electronic/:25:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.5.2 计数器 计数器的基本功能是对输入时钟脉冲进行计数。它也可用于分频、定时、产生节拍脉冲和脉冲序列及进行数字运算等等。 6.5.2.1 二进制计数器 Note $Q_0$在每个CP都翻转一次，$FF_0$可采用T=1的T触发器。 $Q_1$仅在$Q_0$=1后的下一个CP到来时翻转，$FF_1$可采用T= $Q_0$的T触发器。 $Q_2$仅在$Q_0$=$Q_1$=1后的下一个CP到来时翻转。$FF_2$可采用T= $Q_0Q_1$的T触发器。 $Q_3$仅在$Q_0$=$Q_1$=$Q_2$=1后的下一个CP到来时翻转。$FF_3$可采用T= $Q_0Q_1Q_2$的T触发器。 6.5.2.1.1 74LVC161 Info 一个变量与0异或等于本身，与1异或等于它的取反。 用74LVC161构成九进制加计数器: 反馈清零法：利用异步置零输入端，在M进制计数器的计数过程中，跳过M-N个状态，得到N进制计数器的方法。 反馈置数法:利用同步置数端，在M进制计数器的计数过程中，跳过M-N个状态，得到N进制计数器的方法。 用74VC161组成256进制计数器: 并行进位：低位片的进位作为高位片的使能 串行进位：低位片的进位作为高位片的时钟 Info 如果不加反相器，00001110的下个状态不再是00001111而是00011111。加了反相器使得00001110的下个状态时00001111，然后00001111的下个状态是00010000。 ","date":"2023-01-14","objectID":"/math_electronic/:25:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.7 用Verilog HDL描述时序逻辑电路 ","date":"2023-01-14","objectID":"/math_electronic/:26:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.7.1 移位寄存器 用行为级描述always描述一个４位双向移位寄存器，有异步清零、同步置数、左移、右移和保持。功能同74HC194。 module reg4(clk,clr,S,data,left0,right0,en,Q); input clk,clr,left0,right0,en; input [1:0] S; input [3:0] data; output reg [3:0] Q; always@(posedge clk or posedge clr) begin if(clr) Q\u003c=4'b0000; else if(en) begin case(S) 2'b00: Q\u003c=Q; 2'b01: Q\u003c={Q[2:0],right0}; 2'b10: Q\u003c={left0,Q[3:1]}; 2'b11: Q\u003c=data; endcase end end endmodule ","date":"2023-01-14","objectID":"/math_electronic/:26:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.7.2 计数器 用Verilog描述带使能端和同步置数端的可逆4位二进制计数器 module counter(clk,en,set,data,Q,flag); input en,set,flag; input [3:0] data; output reg [3:0] Q; always@(posedge clk) begin if(!en) Q\u003c=Q; else if(set) Q\u003c=data; else if(flag==1) Q\u003c=Q+1; else Q\u003c=Q-1; end endmodule ","date":"2023-01-14","objectID":"/math_electronic/:26:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"6.7.3 状态转换图 module loop(A,Y,clk,clr); parameter S0=2'b00,S1=2'b01,S2=2'b11; input A,clk; reg [1:0] cur,next; output reg Y; always@(posedge clk,negedge clr) begin if(clr) cur\u003c=S0; else if(clk) cur\u003c=next; end always@(posedge clk) begin Y\u003c=0; case(cur) S0: next\u003c=A?S1:S2; S1: next\u003c=A?S0:S2; S2: if(A) next\u003c=S2; else begin next\u003c=S0;Y\u003c=1; default: next\u003c=S0; endcase end endmodule 7 半导体存储器 ","date":"2023-01-14","objectID":"/math_electronic/:26:3","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"7.1 只读存储器 (ROM） ROM是一种永久性数据存储器，其中的数据一般由专用的装置写入，数据一旦写入，不能随意改写，在切断电源之后，数据也不会消失。 ROM主要由地址译码器、存储矩阵和输出控制电路三部分组成。 ","date":"2023-01-14","objectID":"/math_electronic/:27:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"7.1.1 基本概念 存储容量（M)：存储单元的数目。 字：存储器中作为一个整体被存取传送处理的一组数据 。 字长：一个字所含的位数称为字长。 字数：字的总量。 地址线个数/地址码位数n：字数=$2^n$ 数据位数=位数。 例：容量为64K ×1的存储系统有多少个存储单元？其地址码需要几位？数据位是几位？ 存储单元数=字数×位数=64K×1=64K个=$2^{16}$个 地址线数： 因为字数为64K=$2^{16}$个，即n=16，所以地址线数为16位而数据线数等于位数，故数据线为1位 Info 1K=1024=$2^{10}$ 1M=1024K=$2^{20}$ 1G=1024M=$2^{30}$ ","date":"2023-01-14","objectID":"/math_electronic/:27:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"7.2 随机存取存储器 (RAM) 在正常工作状态只能读出信息。断电后信息不会丢失，常用于存放固定信息(如程序、常数等)。 ","date":"2023-01-14","objectID":"/math_electronic/:28:0","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"7.2.1 静态随机存取存储器(SRAM) ","date":"2023-01-14","objectID":"/math_electronic/:28:1","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":["college"],"content":"7.2.3 动态随机存取存储器(DRAM) 7.2.3.1 写操作 X=1 $\\overline{WE}$=0 T导通，电容器C与位线B连通。 输入缓冲器被选通，数据$D_I$经缓冲器和位线写入存储单元如果$D_I$为1，则向电容器充电，C存1;反之电容器放电,C存0 。 7.2.3.2 读操作 X=1 $\\overline{WE}$=1 T导通，电容器C与位线B连通 输出缓冲器/灵敏放大器被选通，C中存储的数据通过位线和缓冲器由D0输出 每次读出后，必须及时对读出单元刷新，即此时刷新控制R也为高电平，则读出的数据又经刷新缓冲器和位线对电容器C进行刷新。 ","date":"2023-01-14","objectID":"/math_electronic/:28:2","tags":null,"title":"数字电子技术理论笔记","uri":"/math_electronic/"},{"categories":null,"content":" Hello World! ","date":"2023-01-11","objectID":"/about/:0:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":null,"content":"Thanks for these friends 😍 ! SuperSASS My mentor 风倾 ACMer#1 Cymbospondylus Master Wei ","date":"2023-01-11","objectID":"/about/:1:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":null,"content":"Who Am I I am particularly interested in Roman history,in which Caesar Augustus is my favorite character.I was born in September,so i named myself as Septemus.I’m just a college student and i use this site to keep my notes,that’s all. ","date":"2023-01-11","objectID":"/about/:2:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":null,"content":"How Old Is This Blog? 🤗 Loading days… Loading secs… ","date":"2023-01-11","objectID":"/about/:3:0","tags":null,"title":"Welcome to my Blog!","uri":"/about/"},{"categories":["college"],"content":" Attention 由于2022年考核形式特殊，不具备普适性，本文对试卷原题略有修改，使其与一般情况下OJ模式吻合。 Warning1 本人能力有限，代码可能有错误。若读者发现欢迎联系我指出！ Warning2 机考和ACM、蓝桥杯之类的编程比赛有差别，不是通过了测试点就得分。改卷老师会参考代码的具体书写情况。极不推荐考生使用qsort、bsearch等库函数图方便！ ","date":"2022-09-12","objectID":"/jikao/:0:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"1.序列生成 ","date":"2022-09-12","objectID":"/jikao/:1:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 写程序,在屏奉上打印出如下序列的前100项。(20 分) 序列的第一、二项分别为2和3: 序列后继项如下生成: 若序列的最后两项的乘积为一位数,则该一位数即为后续项: 若序列的最后两项的乘积为两位数,则该两位数的十位数字和个位数字分别为后续项的连续两项。 要求输出格式为\"%2d\",每行输出 10 个数,共10 行 解决思路：建立一个一位数组，从第三个元素开始遍历，每个元素的值都取决于前两个元素的乘积。 测试输入： 无 测试输出： 2 3 6 1 8 8 6 4 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 2 6 1 2 2 4 8 3 Source Code: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) int main(void) { int arr[105] = { 2,3 },i,t; _for(i, 2, 100) { t = arr[i - 1] * arr[i - 2]; if (t \u003c 10) arr[i] = t; else arr[i] = t / 10,arr[++i]=t%10; } _for(i, 1, 101) { printf(\"%2d\", arr[i - 1]); if ( !(i % 10)) putchar('\\n'); } return 0; } ","date":"2022-09-12","objectID":"/jikao/:1:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"2.字符串除重 ","date":"2022-09-12","objectID":"/jikao/:2:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 从键盘输入一个字符串(长度不超过80个字符),将串中连续相同的字符只保留一个并生成新的字符串,最后输出生成的新字符串,要求定义函数 void cvt(char* s,char* t)实现操作输入输出格式 %s”。(20 分) 测试输入: aabbcccstbbbba 测试输出: abcstba 解决思路：定义前置字符ch=s[0],从i=1开始遍历，若s[i]!=ch则t的最后一项=s[i]同时ch=s[i]，否则略过 Source Code: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) #define MAXN 85 void cvt(char* s, char* t); int main(void) { //freopen(\"d:\\\\test.txt\", \"r\", stdin); char str[2][MAXN] = { 0 }; scanf(\"%s\", str[0]); cvt(str[0], str[1]); printf(\"%s\", str[1]); return 0; } void cvt(char* s, char* t) { char ch =*(t++) =*(s++); while (*s) { if (ch != *s) { ch = *s; *(t++) = ch; } ++s; } } ","date":"2022-09-12","objectID":"/jikao/:2:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"3.矩阵排序 ","date":"2022-09-12","objectID":"/jikao/:3:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 给定m行n列整数矩阵,编写函数,以该矩阵作为参数(假定m,n 己用define 定义为整型常量),实现如下要求:(20 分) 每行元素按由小到大顺序存储; 各行以第1列元素为关键字,按该关键字由小到大次序存储各行； 要求只写出函数(不要求实现矩阵的输入与输出),可以定义其它辅助函数。 示例矩阵:3-5 12 -7 函数处理后矩阵:19 0 5 5 8 2 10 6 153 12 49 550 2 68 10 测试输入: 无 测试输出: -9 0 5 5 -7 -5 3 12 -2 6 8 10 解决思路：先单独对数组的每一行排序，再根据每行首元素大小对行排序（通过交换两行中每个相同位置的元素实现行的交换）。 裁判程序: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) #define m 3 #define n 4 void reshape(int matrix[m][n]); void prtma(int matrix[m][n]) { int i, j; _for(i, 0, m) { _for(j, 0, n) { printf(\"%2d\", matrix[i][j]); if (j \u003c n - 1) putchar(' '); else putchar('\\n'); } } } int main(void) { //freopen(\"d:\\\\test.txt\", \"r\", stdin); int matrix[m][n] = { 3,-5,12,-7,8,-2,10,6,-9,5,5,0 }; reshape(matrix); prtma(matrix); return 0; } //your source code here: Source Code: void reshape(int matrix[][n]) { int i,j,k; _for(k, 0, m) { _for(i, 1, n) { int t = matrix[k][i]; for (j = i - 1; j \u003e= 0; --j) { if (matrix[k][j] \u003e t) matrix[k][j + 1] = matrix[k][j]; else break; } matrix[k][j + 1] = t; } } _for(i, 1, m) { int t = matrix[i][0]; for (j = i - 1; j \u003e= 0; --j) { if (matrix[j][0] \u003e t) { int t1; _for(k, 0, n) { t1 = matrix[j][k]; matrix[j][k] = matrix[j + 1][k]; matrix[j + 1][k] = t1; } } else break; } } } ","date":"2022-09-12","objectID":"/jikao/:3:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"4.递归计算 ","date":"2022-09-12","objectID":"/jikao/:4:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 给定自然数n,函数f(n)定义如下： f(0)=0, f(1)=1, f(2n)=f(n) f(2n+1)=f(n)+f(2n-1) 定义递归函数，计算f(n).(10分) 定义非递归函数，计算f(n).(10分) 测试输入： 1984 测试输出： 69 解决思路： 递归函数按照题目要求即可，非递归函数可建立一个数组从i=2开始递推。 裁判程序： #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) long long func(int n); int main(void) { //freopen(\"d:\\\\test.txt\", \"r\", stdin); int n; scanf(\"%d\", \u0026n); printf(\"%lld\", func(n)); return 0; } //your source code here: Source Code: long long func(int n) { if(n\u003c2) return n; if (n % 2) return func(n / 2) + func(n - 2); else return func(n / 2); } Source Code: long long func(int n) { static long long dp[10005] = { 0,1 }; if (n \u003c 2) return n; else { int i; _for(i, 2, n + 1) { if (i % 2) dp[i] = dp[i / 2] + dp[i - 2]; else dp[i] = dp[i / 2]; } return dp[n]; } } ","date":"2022-09-12","objectID":"/jikao/:4:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"5.处理学生成绩文件 ","date":"2022-09-12","objectID":"/jikao/:5:0","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":"题目要求 通过文件\"a.txt\"输入若干行学号、姓名、成绩，将每个学生信息存储于单向链表结点，要求节点连接次序为成绩由大到小次序。将结点按连接次序输出到文件\"b.txt\"。 测试输入文件\"a.txt\"（数据的分隔符为空格和换行）： 1001 张三 72 1002 王晓华 80 1003 Alice 55 1004 欧阳文修 95 测试输出文件\"b.txt\": 1004 欧阳文修 95 1002 王晓华 80 1001 张三 72 1003 Alice 55 解题思路：输入完一个结点，就把这个结点插入到链表的正确位置，这样输入完后链表就是有序的，就可以直接输出到b文件。 Wrong answer 据改卷老师说法，此题不能采用先把结点排好序再连成链表，或者先连成链表再在链表上排序的做法。 Source Code: #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #pragma warning(disable:4996) #define _for(a,b,c) for(a=b;a\u003cc;++a) typedef struct node { int id, grd; char name[25]; struct node* next, * last; }node; typedef struct list { node* head; }list; list* crtl(); node* crtn(int id, int grd, char* n); void clear(list* l); int main(void) { FILE* fp = fopen(\"d:\\\\a.txt\", \"r\"); list* L = crtl(); int id, grd; char tn[25]; node* p; while (fscanf(fp, \"%d %s %d\", \u0026id, tn, \u0026grd) != EOF) { node* newn = crtn(id, grd, tn); for (p = L-\u003ehead; p-\u003enext \u0026\u0026 p-\u003enext-\u003egrd \u003e grd; p = p-\u003enext); newn-\u003enext = p-\u003enext; p-\u003enext = newn; } fclose(fp);fp = fopen(\"d:\\\\b.txt\", \"w\"); p = L-\u003ehead-\u003enext; while (p) { fprintf(fp, \"%d %s %d\\n\", p-\u003eid, p-\u003ename, p-\u003egrd); p = p-\u003enext; } fclose(fp);clear(L); return 0; } list* crtl() { list* L = (list*)malloc(sizeof(list)); L-\u003ehead = crtn(0, 0, \"H\"); return L; } node* crtn(int id, int grd, char* n) { node* ret = (node*)malloc(sizeof(node)); ret-\u003eid = id, ret-\u003egrd = grd; strcpy(ret-\u003ename, n); ret-\u003enext = ret-\u003elast = NULL; return ret; } void clear(list* l) { node* p = l-\u003ehead, * t; while (p) { t = p; p = p-\u003enext; free(t); } free(l); } ","date":"2022-09-12","objectID":"/jikao/:5:1","tags":null,"title":"2022年西南交通大学计算机与人工智能学院转专业机考试题","uri":"/jikao/"},{"categories":["college"],"content":" Warning 本文信息来自个人经历、部分同学分享、学院公告，无法涵盖有关转专业的所有内容。由于未进行全面调查，文中的观点主观性较强。欢迎各位读者指正谬误或遗漏之处，本文也将逐渐更新完善！ Note 暂时不深入涉及转专业成功以后流程。 ","date":"2022-09-12","objectID":"/changemajor/:0:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"前言 高考失利后，我不出意外的和CS相关的专业失之交臂，那时我便做好了转专业的打算。转专业的难度和压力不亚于高考，经历一年的考验我已转入软件工程专业。转专业的过程充满了各种不确定性，信息的匮乏经常使我感到迷茫。因此我趁着目前较为充裕的时间，将关于转专业（特别是计院）的信息进行汇总，并分享自己的心得体会。希望这篇文章对想转入计算机学院的同学有所帮助。 ","date":"2022-09-12","objectID":"/changemajor/:1:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"个人介绍 年级：2021级 原专业：数学与应用数学 转入专业：软件工程 ","date":"2022-09-12","objectID":"/changemajor/:2:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"利弊 我想，既然打开了此篇文章的同学，大部分做好了充分的思想准备，但是不是每一名同学都具备转计院成功的精力和能力，并且即使具备也不能断言转计院就是全局最优解，或是适合进行计算机方面的学习和工作。同时我也面向思想正在动摇，对于自己是否应该转计院犹豫不决的同学，说不定你看下去会觉得这是个宝贵的机会。 ","date":"2022-09-12","objectID":"/changemajor/:3:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"好处： 行业前景： 以下是19-21年国家统计局发布的各行业就业人员平均工资： 可见IT行业在具有最高平均工资水平的同时，依然维持较高增速。而计院专业主要面向IT行业中最热门的互联网行业。 计院三个专业虽上层建筑不同，但都以CS为基础，因此认真完成本科阶段学习的同学在进入IT行业工作时具备了其他专业同学所望尘莫及的编程能力和牢固基础。三个专业毕业后就业方向主要分为：前端，后端，全栈，算法，嵌入式，每一个方向都有很高的技术要求，面试官更注重应聘者的编程实力而不是文凭或者交际能力，一般来说本科毕业想直接工作就需要提前选择一个方向进行深入练习。 本校就业情况 根据计算机学院某知名教授透露，软件工程2018级（本科）毕业生签约合同上的平均年薪15万。软件工程15-17级(本科)毕业生平均年薪为17万。其中水平较高者收获了50万以上年薪。 实现超越： 相信有很多同学和我一样，高考分数可以上这个学校，但不能上这个学校的计算机专业。如果要上计算机专业的话只能退而求其次选择双非学校。 2021年我校所有专业里面计算机是收分最高的，我校在很多省份录取的高考最高分的同学都选择就读计算机专业。 如果转专业成功就同时获得可以读满意的学校和满意的专业。鉴于计算机类年年攀升的录取分数，转专业可以通过一年的劳动实现获得自己想学专业的本科学位，而如果跨考研究生或毕业后再参加培训班则不得不浪费四年的时间学习与自己志向无关的知识（前提是你今后想成为程序员），或只好改变志向。 换句话说，转专业等效于用一年的时间和精力换取高考多几分的待遇。 多样考核： 以计院为例，转专业将参考学生的准入课、四级、机考、面试成绩，可以说是考察了学生全方面的能力，即使学生在某一方面实力并不突出，也可以通过其他方面弥补。 如有同学在机考（实际上因为疫情变成笔试）中发挥糟糕，但还是凭借较高的准入课分和四级分稳住了排名。同时还有和我一起参加考核的同学在面试前的排名中居于末尾，结果凭借出彩的面试表现提高了自己的排名从而被录取。 因此我认为计院的转专业制度具有较好的容错性。多样的考核机制使得失误的影响降低了。 ","date":"2022-09-12","objectID":"/changemajor/:3:1","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"坏处： 不确定性： 这一点我深有体会，转专业的各方面信息经常残缺且自相矛盾。考前咨询老师的问题很少得到正面答复。在准备的过程中对于自己是否合格也始终无法得到准确的答案。更可怕的是因为极端原因突然修改了考核方式，这一点我深有体会：因为疫情机考和面试改为线上进行，但是机考竟然变成了手写代码的形式，一方面失去了编译器的检查功能，另一方面大大增强了改卷的主观性。而且老师拒绝回复关于题型的问题（有没有选择填空都不说），我直到拿到卷子才知道没有选择填空。 这些不确定性会让你做不少的无效劳动，有时甚至让你感到愤怒。 沉没成本： 学习不是大学生活的全部，阅读、运动、社交、兴趣爱好同样是大学生活的一部分，而转专业会占据你大量的空余时间，结果便是你需要延续高三的学习强度，无法在时间最充裕的一年级体会丰富的大学生活。而如果转专业以失败告终，那你大一失去的时间、付出的精力将付诸东流。 心理压力： 转专业的欲望越强烈，越容易受到外界扰动的刺激，心理压力也越大。你白天学习的时候会忍不住浏览论坛搜寻其他同学对于转专业的讨论，然后被一些危言耸听搞得六神无主，结果因为焦虑无法集中注意力。晚上会翻来覆去思索转专业失败的对策，无法入睡。和亲友交谈时，你得到了鼓励却感觉是难以实现的期望，你得到了安慰却感觉是失败主义的灌输。这都是你需要承受的心理包袱，它们可能会损害你的身体健康和人际关系。 适应变化： 即使转专业成功也要面临专业现实情况和自己想象的落差。一方面，需要补大一没上的必修课，导致平时作业多时间紧（但计院早八确实很少）。另一方面，迁移到新的集体中需要适应这个集体的管理特点（各学院和班级有截然不同的氛围）。另一方面，需要处理转专业成功后繁琐的事务，比如课程替代，团组织身份转移，重新选课。 Dormitary 关于寝室：若住在犀浦，学校不会安排更换寝室，若要更换寝室需要走常规流程（一般很不容易）。若住在九里，学校会安排更换寝室，学生自主表决。若同意，去哪个寝室取决于人数情况，和同专业同学是舍友概率较小。 更换寝室手续非常繁琐而且牵扯搬运生活用品。并且最终如果舍友和自己专业不一样的话会出现作息时间冲突的问题。 TL:DR 对于有志进入IT业（特别是互联网、软件业）的同学来说，转专业是花费时间最短，以能力为唯一标准的机会。然而想把握住这个机会需要持之以恒的努力、大一处于持续紧张的精神状态。同时，机遇与风险共存，走上转专业的道路就要做好迎接失败的心理准备。 ","date":"2022-09-12","objectID":"/changemajor/:3:2","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"指标 即使你经过权衡利弊后，认为转计院是个好主意，也不能忽视你将面临的挑战。很多同学被会问诸如XX转计算机好转吗之类的问题，我在这里与其给出一个“很卷”、“还行”的答案，不如把成功的指标展示出来，你在心里对难度做评估。 ","date":"2022-09-12","objectID":"/changemajor/:4:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"录取比例 2021年90人参加机考，36人进入面试，20人被录取。 进入面试比例为40%，录取比例为22%。 2022年77人参加机考，30人进入面试，25人被录取。 进入面试比例为39%，录取比例为32%。 ","date":"2022-09-12","objectID":"/changemajor/:4:1","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"能力要求（以2022年被录取学生为准） 准入课成绩平均分： 高等数学I （数学分析I）：92.52 高等数学II（数学分析II) ：95.80 线性代数B (高等代数I和高等代数II中较高的一门)：93.76 四级成绩平均分：570.04 机考平均分：78.6 六级通过人数：16 必修课算术平均分：88.4412 ","date":"2022-09-12","objectID":"/changemajor/:4:2","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"误区 唯原专业排名论 这里简称原专业排名为原排。 事实上，原排的重要性在各大论坛（尤其是贴吧）被夸大了，几乎每一个询问转计院的帖子都会强调原排的重要性，甚至有人夸张地声称只有每个学院第一第二名才有机会。 然而原专业排名既不是门槛，也不是直接指标，只是面试时的参考因素。2022年没有出现因为低原排而不让同学参加机考的情况。筛选同学进入面试时，只根据准入课、四级、机考三项指标，无视原排。我在面试时老师也没有询问我的原排。鉴于面试占总分的25%，而原排只是面试时的参考因素之一，可以得出结论原排不是转计院的决定因素，更不可能出现其他方面优秀，因为原排低而被淘汰的现象。 证据方面，我通过比对往年录取名单，发现既有同学原排极高被淘汰，又有同学原排甚至未达前40%而被录取。 专业区别论 我一开始以为三个专业分别有自己的名额，并且报不同的专业就不在一起排名。在这个假设之下，我根据报CS的人数远多于报软工的人数，而去年AI招收人数远少于SE招收人数，我得出了报SE会增加录取机会的错误结论。 事实上我的假设一开始就是错的，并且我发现论坛上也有这种假设。参加转计院的所有学生会一起排名，报考的专业不会对成功率有任何影响。最终录取也是学院按照总分排名从高到低选拔。假如计院录取名额为N，那么有且仅有总分排名前N的同学被录取，即使他们全部都报CS也不会有任何影响。 ","date":"2022-09-12","objectID":"/changemajor/:4:3","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"流程 ","date":"2022-09-12","objectID":"/changemajor/:5:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"相关公告 转专业管理办法 点击图片下载PDF文件 无论转入哪个学院，该文件都交代了一些基本的原则和注意事项。 转专业细则 一般大一上学期教务网会发布各学院的转专业实施细则，辅导员也会通知。建议结合往年的细则获得更全面的信息。 细则中将会给出准入课程，成绩计算公式，录取名额，时间安排等关键信息，最好反复仔细阅读。 2021年计算机与人工智能转专业实施细则 2022年各学院转专业实施细则 隐藏信息 计算机学院的网站上发布的关于其他事件的公告有的隐藏有对转专业有用的信息。这些信息可能没有在转专业细则上提及，也没有在这些公告的标题上提及，更没有人员专门通知。如在关于CCF CSP考试的公告文件里指出了免机考条件： Warning 由于有同学反映学校不认可CSP成绩，此类隐藏信息最好通过联系学院老师查证! ","date":"2022-09-12","objectID":"/changemajor/:5:1","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"提交申请 上图通知发布后便可按照指示提交转专业申请，在截止时间之前可对申请表进行修改或取消申请。鉴于六级成绩公布时间接近截止时间，建议出六级成绩在申请表上填写六级成绩。 Dont worry 在转专业录取名单公布之前，该申请表会一直处于未审核状态。因此不用因此焦虑。 ","date":"2022-09-12","objectID":"/changemajor/:5:2","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"机考通知 开学前后一个星期，计院官网将会公布机考和面试的时间安排 此时也会有短信通知(按照惯例应公布考场，但22年因疫情改为线上进行) Danger 若未收到短信，建议这段时间检查一下手机是否拦截了通知。我亲眼所见一名同学因短信被拦截而错过了加群的时间直接导致丧失资格。 ","date":"2022-09-12","objectID":"/changemajor/:5:3","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"机考（基于2020-2022） 时间限制：2小时 题型：编程 难度：约等于二级C语言考试，或各大OJ平台入门题难度 考查范围：C语言程序设计基础知识（结构化程序设计、文件操作、指针）、链表操作（不会考其他数据结构或算法） 考试环境： 学校机房，装有vs2019，代码提交后不会告知通过情况(线下形式) 正面+侧面两个设备进入腾讯会议并开启摄像头，手写代码（2022年的线上形式，我估计不会重现) 真题： 2021年机考真题敬请参阅supersass的文章 2022年计算机与人工智能学院转专业机考试题 Future plan 信院的转专业机考和计院考察范围一致，内容和形式虽有差别，但要求的能力一样。日后本文将补充2022年信息与技术学院转专业机考试题。 ","date":"2022-09-12","objectID":"/changemajor/:5:4","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"面试 学院将根据成绩计算公式算出综合分进行排名，划定名额后按排名从高到低选拔学生进入面试。 面试短信通知： 面试院网通知： 面试考核内容： 限制在1分钟内的自我介绍 用英语回答一个问题：Please describe your hometown. 原专业的相关信息 针对自我介绍中的信息提问，如我参加了程序设计竞赛问我的参赛经历，参加了数学建模问我在队伍中担任的角色 若评委老师没有其他问题则面试结束 Limit 可能是因为排在后面，我的面试仅持续了6分钟就结束了，问的问题也不全面，如果有同学想分享自己的面试经历欢迎联系我 ","date":"2022-09-12","objectID":"/changemajor/:5:5","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"结果公示 面试结束后不久，院网就会发布拟录取名单。至此，无论结果如何，转专业的斗争也就画上了句号。 ","date":"2022-09-12","objectID":"/changemajor/:5:6","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"建议 个人认为重要性：机考\u003e准入课\u003e四级成绩\u003e课外经历\u003e通过六级\u003e原专业排名，鉴于22年情况特殊，机考在纸上进行，很多准备充分的同学也未获得较高的机考成绩。但通常情况下机考在电脑上操作，因为拥有编译器的检查机制，同时可以自己调试从而减少了意外情况的发生，可以充分发挥实力。同时机考题目难度很低，掌握C语言的语法并大量刷题，就能很轻易拿到满分，给自己带来巨大优势。 若有多余时间最好参加竞赛或学习做项目。如参加程序设计竞赛、数学建模，写个贪吃蛇的小游戏之类的。这些不一定要做到极致，比如我大一参加的三个竞赛名气都不大，拿的奖项也不突出。但可避免自己在面试时处于被动（面试有很大概率询问计算机相关课外经历） ","date":"2022-09-12","objectID":"/changemajor/:6:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"},{"categories":["college"],"content":"总结 以上是我历时一年成功转码的全部心得，希望能让将踏上我的道路的同学对于转计院有个全面的认识。 此篇文章存在很多疏漏之处，欢迎联系我指出，我也会逐渐完善。 最后祝各位想转计院的同学能通过努力实现自己目标！ Share 喜欢这篇文章的读者若能分享给其他读者我将感激不尽！ ","date":"2022-09-12","objectID":"/changemajor/:7:0","tags":null,"title":"西南交通大学转专业心得分享","uri":"/changemajor/"}]